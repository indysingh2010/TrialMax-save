using System;
using System.Drawing;
using System.Collections;
using System.ComponentModel;
using System.Windows.Forms;
using System.Data;
using System.Threading;
using System.Diagnostics;
using System.Reflection;
using System.IO;

using Infragistics.Win;
using Infragistics.Win.UltraWinDock;
using Infragistics.Win.UltraWinToolbars;

using FTI.Shared;
using FTI.Shared.Trialmax;
using FTI.Shared.Win32;
using FTI.Shared.Xml;
using FTI.Trialmax.Forms;
using FTI.Trialmax.Encode;
using FTI.Trialmax.TMVV.Tmvideo;

namespace FTI.Trialmax.TMVV.TmaxVideo
{
	/// <summary>This is the main form class for the TrialMax Video Viewer application</summary>
	public class CTmaxVideoForm : System.Windows.Forms.Form
	{
		#region Constants

		/// <summary>Application menu command identifiers</summary>
		private enum AppCommands
		{
			Invalid = 0,
			NewScript,
			OpenScript,
			ImportDesignations,
			ExportDesignations, 
			ExportScript,
			ExportVideo,
			Save,
			SaveAs,
			Find,
			FindNext,
			Exit,
			About,
			ToggleTranscript,
			ToggleScript,
			ToggleTuner,
			ToggleResults,
			SetPreferences,
			Recent1,
			Recent2,
			Recent3,
			Recent4,
			Recent5,
			CheckForUpdates,
			ContactFTI,
			UsersManual,
			OnlineSite,  
			SystemInformation,
		}
		
		/// <summary>Application menu identifiers</summary>
		private enum AppMenus
		{
			Invalid = 0,
			File,
			Edit,
			Tools,
			Help, 
			View,
			Import,
			Export,
		}
		
 		private const string DEFAULT_APP_CONFIGURATION_FILE		= "TmaxVideo.xml";
		private const string DEFAULT_NEW_SCRIPT_FILENAME		= "_tmax_video_script.xmls_";
		private const string DEFAULT_SCREEN_LAYOUT_FILE			= "TmaxVideo.tpl";
		private const string DEFAULT_UPDATE_INSTALLER_FILENAME	= "TmaxInstaller.exe";
		private const string DEFAULT_UPDATES_SUBFOLDER			= "_tmax_updates\\";
		
		private const int ERROR_INITIALIZE_TOOLBAR_MANAGER_EX		= 0;
		private const int ERROR_INITIALIZE_DOCKING_MANAGER_EX		= 1;
		private const int ERROR_INITIALIZE_FILES_EX					= 2;
		private const int ERROR_INITIALIZE_MEMBERS_EX				= 3;
		private const int ERROR_INITIALIZE_VIEWS_EX					= 4;
		private const int ERROR_ON_APP_TOGGLE_VIEW_EX				= 5;
		private const int ERROR_SET_ULTRA_PANE_VISIBLE_EX			= 6;
		private const int ERROR_SET_ULTRA_PANE_VISIBLE_FAILED		= 7;
		private const int ERROR_OPEN_NOT_FOUND						= 8;
		private const int ERROR_OPEN_EX								= 9;
		private const int ERROR_ON_APP_OPEN_RECENT_EX				= 10;
		private const int ERROR_ON_APP_SET_PREFERENCES_EX			= 11;
		private const int ERROR_ON_TMAX_VIDEO_ACTIVATE_EX			= 12;
		private const int ERROR_ON_TMAX_VIDEO_ADD_EX				= 13;
		private const int ERROR_ON_TMAX_VIDEO_DELETE_EX				= 14;
		private const int ERROR_ON_APP_SAVE_EX						= 15;
		private const int ERROR_ACTIVATE_EX							= 16;
		private const int ERROR_GET_SAVE_FILESPEC_EX				= 17;
		private const int ERROR_ON_APP_SAVE_AS_EX					= 18;
		private const int ERROR_ON_APP_NEW_SCRIPT_EX				= 19;
		private const int ERROR_ON_TMAX_VIDEO_UPDATE_EX				= 20;
		private const int ERROR_ON_TMAX_VIDEO_EDIT_DESIGNATION_EX	= 21;
		private const int ERROR_ON_TMAX_VIDEO_SET_PREFERENCES_EX	= 22;
		private const int ERROR_FIND_EX								= 23;
		private const int ERROR_ON_TMAX_VIDEO_FIND_EX				= 24;
		private const int ERROR_ON_TMAX_VIDEO_LOAD_RESULT_EX		= 25;
		private const int ERROR_ON_APP_FIND_NEXT_EX					= 26;
		private const int ERROR_ON_APP_CHECK_FOR_UPDATES_EX			= 27;
		private const int ERROR_INITIALIZE_PRODUCT_MANAGER_EX		= 28;
		private const int ERROR_LAUNCH_UPDATES_INSTALLER_EX			= 29;
		private const int ERROR_GET_INSTALLER_VERSION_EX			= 30;
		private const int ERROR_ON_ADDED_EX							= 31;
		private const int ERROR_ON_APP_SYSTEM_INFORMATION_EX		= 32;
		private const int ERROR_INITIALIZE_VERSIONS_EX				= 33;
		private const int ERROR_INVALID_FILE_FORMAT					= 34;
		private const int ERROR_PROCESS_COMMAND_LINE_EX				= 35;
		private const int ERROR_CREATE_SCRIPT_EX					= 36;
		
		#endregion Constants

		#region Private Members

		/// <summary>Components collection required by forms designer</summary>
		private System.ComponentModel.IContainer components;

		/// <summary>Transcript grid child view</summary>
		private FTI.Trialmax.TMVV.Tmvideo.CTmaxVideoTranscript m_ctrlTranscriptView;

		/// <summary>Script tree child view</summary>
		private FTI.Trialmax.TMVV.Tmvideo.CTmaxVideoTree m_ctrlScriptView;

		/// <summary>Search results child view</summary>
		private FTI.Trialmax.TMVV.Tmvideo.CTmaxVideoSearch m_ctrlResultsView;
		
		/// <summary>Infragistics child view docking manager</summary>
		private Infragistics.Win.UltraWinDock.UltraDockManager m_ctrlDockingManager;
		
		/// <summary>Tab area generated by Infragistics docking manager</summary>
		private Infragistics.Win.UltraWinDock.UnpinnedTabArea _CTmaxVideoFormUnpinnedTabAreaLeft;
		
		/// <summary>Tab area generated by Infragistics docking manager</summary>
		private Infragistics.Win.UltraWinDock.UnpinnedTabArea _CTmaxVideoFormUnpinnedTabAreaRight;
		
		/// <summary>Tab area generated by Infragistics docking manager</summary>
		private Infragistics.Win.UltraWinDock.UnpinnedTabArea _CTmaxVideoFormUnpinnedTabAreaTop;
		
		/// <summary>Tab area generated by Infragistics docking manager</summary>
		private Infragistics.Win.UltraWinDock.UnpinnedTabArea _CTmaxVideoFormUnpinnedTabAreaBottom;
		
		/// <summary>Tab area generated by Infragistics docking manager</summary>
		private Infragistics.Win.UltraWinDock.AutoHideControl _CTmaxVideoFormAutoHideControl;
		
		/// <summary>Automatic control wrapper inserted by Infragistics docking manager</summary>
		private Infragistics.Win.UltraWinDock.DockableWindow dockableWindow1;
		
		/// <summary>Automatic control wrapper inserted by Infragistics docking manager</summary>
		private Infragistics.Win.UltraWinDock.DockableWindow dockableWindow4;
		
		/// <summary>Automatic control wrapper inserted by Infragistics docking manager</summary>
		private Infragistics.Win.UltraWinDock.DockableWindow dockableWindow2;

		/// <summary>Automatic control wrapper inserted by Infragistics docking manager</summary>
		private Infragistics.Win.UltraWinDock.DockableWindow dockableWindow5;

		/// <summary>Automatic docking area inserted by Infragistics docking manager</summary>
		private Infragistics.Win.UltraWinDock.WindowDockingArea windowDockingArea1;

		/// <summary>Automatic docking area inserted by Infragistics docking manager</summary>
		private Infragistics.Win.UltraWinDock.WindowDockingArea windowDockingArea6;

		/// <summary>Automatic docking area inserted by Infragistics docking manager</summary>
		private Infragistics.Win.UltraWinDock.WindowDockingArea windowDockingArea8;

		/// <summary>Automatic docking area inserted by Infragistics docking manager</summary>
		private Infragistics.Win.UltraWinDock.WindowDockingArea windowDockingArea4;
		
		/// <summary>Automatic docking area inserted by Infragistics docking manager</summary>
		private Infragistics.Win.UltraWinDock.WindowDockingArea windowDockingArea3;
		
		/// <summary>Automatic docking area inserted by Infragistics docking manager</summary>
		private Infragistics.Win.UltraWinDock.WindowDockingArea windowDockingArea2;
		
		/// <summary>Automatic docking area inserted by Infragistics docking manager</summary>
		private Infragistics.Win.UltraWinDock.WindowDockingArea windowDockingArea5;

		/// <summary>Docking area generated by Infragistics toolbar manager</summary>
		private Infragistics.Win.UltraWinToolbars.UltraToolbarsDockArea _CTmaxVideoForm_Toolbars_Dock_Area_Left;
		
		/// <summary>Docking area generated by Infragistics toolbar manager</summary>
		private Infragistics.Win.UltraWinToolbars.UltraToolbarsDockArea _CTmaxVideoForm_Toolbars_Dock_Area_Right;
		
		/// <summary>Docking area generated by Infragistics toolbar manager</summary>
		private Infragistics.Win.UltraWinToolbars.UltraToolbarsDockArea _CTmaxVideoForm_Toolbars_Dock_Area_Top;
		
		/// <summary>Docking area generated by Infragistics toolbar manager</summary>
		private Infragistics.Win.UltraWinToolbars.UltraToolbarsDockArea _CTmaxVideoForm_Toolbars_Dock_Area_Bottom;
		
		/// <summary>Infragistics toolbar/menu manager</summary>
		private Infragistics.Win.UltraWinToolbars.UltraToolbarsManager m_ctrlToolbarManager;
		
		/// <summary>Image list used for main menu selections</summary>
		private System.Windows.Forms.ImageList m_ctrlMenulImages;

		/// <summary>Application splash screen</summary>
		private FTI.Trialmax.Forms.CFSplashScreen m_ctrlSplashScreen = null;

		/// <summary>Application's error message builder</summary>
		private FTI.Shared.Trialmax.CTmaxErrorBuilder m_tmaxErrorBuilder = new CTmaxErrorBuilder();
		
		/// <summary>Local member bound to EventSource property</summary>
		private FTI.Shared.Trialmax.CTmaxEventSource m_tmaxEventSource = new CTmaxEventSource();

		/// <summary>Application message filter used to trap keyboard messages</summary>
		private FTI.Shared.Trialmax.CTmaxKeyboard m_tmaxKeyboard = new CTmaxKeyboard();
		
		/// <summary>Application import operations manager</summary>
		private FTI.Trialmax.TMVV.Tmvideo.CTmaxVideoImportManager m_tmaxImportManager = new CTmaxVideoImportManager();
		
		/// <summary>Application export operations manager</summary>
		private FTI.Trialmax.TMVV.Tmvideo.CTmaxVideoExportManager m_tmaxExportManager = new CTmaxVideoExportManager();
		
		/// <summary>Application options</summary>
		private FTI.Trialmax.TMVV.Tmvideo.CTmaxVideoOptions m_tmaxAppOptions = new CTmaxVideoOptions();
		
		/// <summary>Local member to manage media encoder operations</summary>
		private FTI.Trialmax.Encode.CWMEncoder m_tmaxEncoder = new CWMEncoder();

		/// <summary>Local array of child views</summary>
		private CTmaxVideoView[] m_aViews = new CTmaxVideoView[(int)TmaxVideoViews.MaxViews];
		
		/// <summary>Local flag to indicate that the updates installer application has been updated</summary>
		private bool m_bInstallerUpdated = false;
		
		/// <summary>Flag to indicate that the application is terminating</summary>
		private bool m_bTerminating = false;
		
		/// <summary>Flag to indicate that the application has been initialized</summary>
		private bool m_bInitialized = false;
		
		/// <summary>Local flag to inhibit processing of ToolClick events</summary>
		private bool m_bIgnoreToolClicks = false;

		/// <summary>The folder the application is executing from</summary>
		private string m_strAppFolder = "";
		
		/// <summary>The fully qualified path to the update installer application</summary>
		private string m_strUpdateInstaller = "";
		
		/// <summary>The fully qualified path to the installer's XML update file</summary>
		private string m_strXmlUpdateFileSpec = "";
		
		/// <summary>The fully qualified path to the temporary file for a new script</summary>
		private string m_strNewScriptFileSpec = "";
		
		/// <summary>Application's primary initialization file</summary>
		private CXmlIni m_xmlAppOptions = new CXmlIni();
		
		/// <summary>Application's error log</summary>
		private FTI.Shared.Xml.CXmlFile m_xmlErrors = new CXmlFile();
		
		/// <summary>Application's debugging log</summary>
		private FTI.Shared.Xml.CXmlFile m_xmlDiagnostics = new CXmlFile();
		
		/// <summary>Application's child video tuner control window</summary>
		private FTI.Trialmax.TMVV.Tmvideo.CTmaxVideoTuner m_ctrlTunerView;

		/// <summary>Application's active script</summary>
		private FTI.Shared.Xml.CXmlScript m_xmlScript = null;
		
		/// <summary>Local member to store and retrieve registry information</summary>
		private FTI.Shared.Trialmax.CTmaxRegistry m_tmaxRegistry = new CTmaxRegistry();

		/// <summary>Local member to store product information</summary>
		private FTI.Shared.Trialmax.CTmaxProductManager m_tmaxProductManager = new CTmaxProductManager();

		/// <summary>Local member to store a reference to the system diagnostics information</summary>
		private FTI.Trialmax.TMVV.Tmvideo.CTmaxVideoDiagnostics m_tmaxDiagnostics = new CTmaxVideoDiagnostics();

		/// <summary>Local member to store a reference to the system diagnostics form</summary>
		private FTI.Trialmax.TMVV.Tmvideo.CFTmaxVideoDiagnostics m_tmaxDiagnosticsForm = null;

		/// <summary>Local member to store application command line</summary>
		private CTmaxCommandLine m_tmaxCommandLine = null;
		
		#endregion Private Members

		#region Public Methods

		/// <summary>The main entry point for the application</summary>
		[STAThread]
		static void Main(string[] args) 
		{
			FTI.Trialmax.Forms.CFSplashScreen splashScreen = null;
			
			try
			{
				//	Check to see if there's already an active instance
				if(CTmaxInstanceManager.GetPrevInstance(TmaxApplications.VideoViewer) == true)
				{
					//	Activate the previous instance
					CTmaxInstanceManager.ActivatePrevInstance(args, TmaxApplications.VideoViewer);
				}
				else
				{
					splashScreen = new CFSplashScreen();

					Application.Run(new CTmaxVideoForm(args, splashScreen));
				}
			
			}
			catch(System.DllNotFoundException e)
			{
				MessageBox.Show(e.Message, "Dll Not Found Exception");
			}
			catch(System.IO.FileNotFoundException e)
			{
				if((e.FileName != null) && (e.FileName.Length > 0))
					MessageBox.Show(e.Message + ": " + e.FileName, "File Not Found Exception");
				else
					MessageBox.Show(e.ToString(), "File Not Found Exception");
			}
			catch(System.Exception e)
			{
				MessageBox.Show(e.ToString(), "System Exception");
			}
			finally
			{
				if((splashScreen != null) && (splashScreen.IsDisposed == false))
				{
					try { splashScreen.Dispose(); } 
					catch	{};
					splashScreen = null;
				}

			}// finally
		
		}// static void Main() 
		
		/// <summary>Constructor</summary>
		/// <param name="args">Application command line arguments</param>
		/// <param name="splashScreen">Splash screen created by application entry point</param>
		public CTmaxVideoForm(string[] args, FTI.Trialmax.Forms.CFSplashScreen splashScreen)
		{
			//	Show the splash screen
			InitializeSplashScreen(splashScreen);

			//	Initialize error and diagnostic event handling
			m_tmaxEventSource.Name = "TrialMax Video Viewer";
			m_tmaxEventSource.ErrorEvent += new FTI.Shared.Trialmax.ErrorEventHandler(this.OnError);
			m_tmaxEventSource.DiagnosticEvent += new FTI.Shared.Trialmax.DiagnosticEventHandler(this.OnDiagnostic);
			SetErrorStrings();
			
			// Initialize the child controls
			SetSplashMessage("Initializing child controls");
			InitializeComponent();

			//	Initialize the application's configuration files
			InitializeFiles();
			
			//	Initialize the application's class members
			InitializeMembers();
			
			//	Initialize the application's product manager
			InitializeProductManager();
			
			//	Initialize the version information
			InitializeVersions();
			
			//	Initialize the application's child views
			InitializeViews();
			
			// Initialize docking capabilities
			InitializeDockingManager();
			
			//	Initialize the menu and toolbars
			InitializeToolbarManager();
			
			//	Initialize the child window states
			SetViewStates();
			
			//	Initialize a command line object if provided by the caller
			if((args != null) && (args.Length > 0))
			{
				m_tmaxCommandLine = new CTmaxCommandLine(TmaxApplications.VideoViewer);
				m_tmaxCommandLine.SetProperties(args);
			}
		
		}// public CTmaxManagerForm()

		#endregion Public Methods
		
		#region Protected Methods

		/// <summary> Clean up any resources being used</summary>
		protected override void Dispose( bool disposing )
		{
			if( disposing )
			{
				if (components != null) 
				{
					components.Dispose();
				}
			}
			base.Dispose( disposing );
		
		}// protected override void Dispose( bool disposing )

		/// <summary>This method traps events fired when the form is closing</summary>
		/// <param name="e">Form closing event arguments</param>
		protected override void OnClosing(CancelEventArgs e)
		{
			//	Is it OK to terminate the application?
			if(CheckModified() == true)
			{
				Terminate();

				//	Should we launch the installer?
				if(m_strXmlUpdateFileSpec.Length > 0)
					LaunchUpdatesInstaller();

			}
			else
			{
				e.Cancel = true;
			}
		
		}// protected override void OnClosing(CancelEventArgs e)
		
		/// <summary>Overridden default window procedure</summary>
		/// <param name="m">The message to be processed</param>
		protected override void DefWndProc(ref Message m)
		{
			switch(m.Msg)
			{
				case ((int)(TmaxWindowMessages.InstanceCommandLine)):
				
					OnWMInstanceCommandLine(ref m);
					break;
					
				default:
				
					base.DefWndProc (ref m);
					break;
			}

		}// protected override void DefWndProc(ref Message m)

		/// <summary>This method is called when the form window is shown for the first time</summary>
		/// <param name="e">System event arguments</param>
		protected override void OnLoad(EventArgs e)
		{
			//	Set the instance key to prevent multiple instances of this application
			CTmaxInstanceManager.SetInstanceKey((int)Handle, TmaxApplications.VideoViewer);

			//	Set the initial size, position and state of the main window
			SetInitialPosition();

			//	The application has been initialized
			m_bInitialized = true;
			
			//	Destroy the splash screen
			TerminateSplashScreen();
			
			//	Install the keyboard filter to trap messages
			SetSplashMessage("Initializing hotkeys");
			Application.AddMessageFilter(m_tmaxKeyboard);
			
			//	Do the base class processing
			base.OnLoad(e);
		
			//	Get the version of the installer application
			if(GetInstallerVersion() != null)
			{
				//	Notify the user if the updates installer has been updated
				if(m_bInstallerUpdated == true)
				{
					MessageBox.Show("TrialMax detected a new version of the updates installer application. It has been installed on your system.", "", MessageBoxButtons.OK, MessageBoxIcon.Information);
				}
			
			}// if(GetInstallerVersion() != null)
			
			//	Do we have a command line?
			if(m_tmaxCommandLine != null)
			{
				ProcessCommandLine(m_tmaxCommandLine);
					
			}// if(m_tmaxCommandLine != null)

			//	We may have loaded a script from the command line
			if(m_xmlScript == null)
			{
				//	Does the user want to load the last file?
				if((m_tmaxAppOptions.LoadLast == true) && (m_tmaxAppOptions.RecentlyUsed.Count > 0))
				{
					OnAppOpenRecent(AppCommands.Recent1, true);
				}
			
			}// if(m_xmlScript == null)
			
			//	Make sure the captions are set properly
			SetCaptions();
			
		}// protected override void OnLoad(EventArgs e)

		#endregion Protected Methods

		#region Private Methods

		/// <summary>This method is called when the user selects About from the Help menu</summary>
		private void OnAppAbout()
		{
			CTmaxVideoAbout tmaxAbout = new CTmaxVideoAbout();
			tmaxAbout.ShowDialog();

		}// private void OnAppAbout()
		
		/// <summary>This method is called when the user wants to go to the TrialMax online site</summary>
		private void OnAppOnlineSite()
		{
			try
			{
				if(m_tmaxProductManager.OnlineSite.Length > 0)
				{
					System.Diagnostics.Process.Start(m_tmaxProductManager.OnlineSite);
				}
				
			}
			catch(System.Exception Ex)
			{
				m_tmaxEventSource.FireDiagnostic(this, "OnAppOnlineSite", Ex);
			}
			
		}// private void OnAppOnlineSite()
		
		/// <summary>This method is called when the user wants to view the user's manual</summary>
		private void OnAppUsersManual()
		{
			string strFileSpec = "";
			
			strFileSpec = m_tmaxAppOptions.GetUsersManualFileSpec();

			//	Does the file exist?
			if(System.IO.File.Exists(strFileSpec) == true)
			{
				System.Diagnostics.Process.Start(strFileSpec);
			}
			else
			{
				MessageBox.Show("Unable to locate " + strFileSpec, "Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
			}
			
		}// private void OnAppUsersManual()
		
		/// <summary>This method is called when the user wants to view the FTI contact information</summary>
		private void OnAppContactFTI()
		{
			FTI.Trialmax.Forms.CFRichLabel	contactFTI = null;
			string							strFileSpec = "";
			
			strFileSpec = m_tmaxAppOptions.GetContactsFileSpec();
			
			//	Does the file exist?
			if(System.IO.File.Exists(strFileSpec) == true)
			{
				contactFTI = new FTI.Trialmax.Forms.CFRichLabel();
				
				//	Connect to the wizard events
				contactFTI.EventSource.DiagnosticEvent += new FTI.Shared.Trialmax.DiagnosticEventHandler(this.OnDiagnostic);
				contactFTI.EventSource.ErrorEvent += new FTI.Shared.Trialmax.ErrorEventHandler(this.OnError);
	
				//	Set the default property values
				contactFTI.Text = " Contact Information";
				contactFTI.Width = 650;
				contactFTI.Height = 525;
				contactFTI.StartPosition = FormStartPosition.CenterScreen;
				contactFTI.FileSpec = strFileSpec;
				
				contactFTI.ShowDialog();
			}
			else
			{
				MessageBox.Show("Unable to locate " + strFileSpec, "Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
			}
			
		}// private void OnAppContactFTI()
		
		/// <summary>This method handles all internal application command events</summary>
		/// <param name="eCommand">The application command identifier</param>
		private void OnAppCommand(AppCommands eCommand)
		{
			//	Call the handler for the specified command
			switch(eCommand)
			{
				case AppCommands.NewScript:
					
					OnAppNewScript();
					break;

				case AppCommands.OpenScript:

					OnAppOpenScript();
					break;

				case AppCommands.Recent1:
				case AppCommands.Recent2:
				case AppCommands.Recent3:
				case AppCommands.Recent4:
				case AppCommands.Recent5:

					OnAppOpenRecent(eCommand, false);
					break;

				case AppCommands.ImportDesignations:
					
					OnAppImport(eCommand);
					break;

				case AppCommands.ExportDesignations:
				case AppCommands.ExportScript:
				case AppCommands.ExportVideo:
					
					OnAppExport(eCommand);
					break;

				case AppCommands.Save:
					
					OnAppSave();
					break;

				case AppCommands.SaveAs:
					
					OnAppSaveAs();
					break;

				case AppCommands.Find:
					
					OnAppFind();
					break;

				case AppCommands.FindNext:
					
					OnAppFindNext();
					break;

				case AppCommands.SetPreferences:
					
					OnAppSetPreferences(0);
					break;

				case AppCommands.SystemInformation:
					
					OnAppSystemInformation();
					break;

				case AppCommands.Exit: 
					
					OnAppExit();
					break;

				case AppCommands.About: 
					
					OnAppAbout();
					break;

				case AppCommands.OnlineSite: 
					
					OnAppOnlineSite();
					break;

				case AppCommands.ContactFTI: 
					
					OnAppContactFTI();
					break;

				case AppCommands.UsersManual: 
					
					OnAppUsersManual();
					break;

				case AppCommands.CheckForUpdates:
					
					OnAppCheckForUpdates();
					break;

				case AppCommands.ToggleResults: 
				case AppCommands.ToggleTranscript: 
				case AppCommands.ToggleScript: 
				case AppCommands.ToggleTuner: 
					
					OnAppToggleView(eCommand);
					break;

				default:
				
					break;
			
			}// switch(eCommand)
			
		}// private void OnAppCommand(AppCommands eCommand)
					
		/// <summary>This method is called when the user wants to exit the application</summary>
		private void OnAppExit()
		{
			if(CheckModified() == true)
			{
				//	Close down and clean up
				Terminate();
				
				//	Kill the application
				Application.Exit();
			}
			
		}// private void OnAppExit()
		
		/// <summary>This method is called when the user wants to perform an export operation</summary>
		/// <param name="eCommand">Command used to identify the export format</param>
		private void OnAppExport(AppCommands eCommand)
		{
			CTmaxVideoArgs Args = new CTmaxVideoArgs();
			
			//	Make it appear as though a child view fired the command
			if(Args.Items == null)
				Args.Items = new CTmaxItems();
			Args.Items.Add(new CTmaxItem(m_xmlScript));
			
			if(Args.Parameters == null)
				Args.Parameters = new CTmaxParameters();
				
			switch(eCommand)
			{
				case AppCommands.ExportScript:
				
					Args.Parameters.Add(TmaxCommandParameters.ExportFormat, (int)(TmaxExportFormats.Transcript));
					break;
					
				case AppCommands.ExportVideo:
				
					Args.Parameters.Add(TmaxCommandParameters.ExportFormat, (int)(TmaxExportFormats.Video));
					break;
					
				case AppCommands.ExportDesignations:
				default:
				
					Args.Parameters.Add(TmaxCommandParameters.ExportFormat, (int)(TmaxExportFormats.AsciiMedia));
					break;
					
			}
			
			OnTmaxVideoExport(this, Args);
			
		}// private void OnAppExport(AppCommands eCommand)
		
		/// <summary>This method is called when the user wants to perform an import operation</summary>
		/// <param name="eCommand">Command used to identify the import format</param>
		private void OnAppImport(AppCommands eCommand)
		{
			CTmaxVideoArgs Args = new CTmaxVideoArgs();
			
			//	Make it appear as though a child view fired the command
			if(Args.Items == null)
				Args.Items = new CTmaxItems();
			Args.Items.Add(new CTmaxItem(m_xmlScript));
			
			if(Args.Parameters == null)
				Args.Parameters = new CTmaxParameters();
			Args.Parameters.Add(TmaxCommandParameters.ImportFormat, (int)(TmaxImportFormats.AsciiMedia));
			Args.Parameters.Add(TmaxCommandParameters.Activate, true);
			
			OnTmaxVideoImport(this, Args);
			
		}// private void OnAppImport(AppCommands eCommand)
		
		/// <summary>This method is called when the user wants to search for text</summary>
		private void OnAppFind()
		{
			//	Execute the operation as though it were invoked by the transcript view
			if(Find(null, TmaxVideoViews.Transcript) == true)
				SetUltraPaneVisible(TmaxVideoViews.Results, true, false);
			
		}// private void OnAppFind()
		
		/// <summary>This method is called when the user wants to load the next search result</summary>
		private void OnAppFindNext()
		{
			CTmaxVideoSearch tmaxSearch = null;
			
			try
			{
				if((tmaxSearch = (CTmaxVideoSearch)(m_aViews[(int)TmaxVideoViews.Results])) != null)
					tmaxSearch.FindNext();
			}
			catch(System.Exception Ex)
			{
				m_tmaxEventSource.FireError(this, "OnAppFindNext", m_tmaxErrorBuilder.Message(ERROR_ON_APP_FIND_NEXT_EX), Ex);
			}
			
		}// private void OnAppFindNext()
		
		/// <summary>This method is called when the user wants to open an existing script</summary>
		private void OnAppOpenScript()
		{
			OpenFileDialog dlg = new System.Windows.Forms.OpenFileDialog();

			//	Check for unsaved changes first
			if(CheckModified() == false) return;
			
			//	Initialize the file selection dialog
			dlg.CheckFileExists = true;
			dlg.CheckPathExists = true;
			dlg.Multiselect = false;
			dlg.Title = "Open ...";
			dlg.Filter = CXmlScript.GetFilter(TmaxXmlScriptFormats.VideoViewer, false);
			dlg.FilterIndex = 1;

			//	Set the initial directory
			if(m_tmaxAppOptions.LastScript.Length > 0)
				dlg.InitialDirectory = System.IO.Path.GetDirectoryName(m_tmaxAppOptions.LastScript);
			else if(m_tmaxAppOptions.LastDeposition.Length > 0)
				dlg.InitialDirectory = System.IO.Path.GetDirectoryName(m_tmaxAppOptions.LastDeposition);
			else
				dlg.InitialDirectory = m_strAppFolder;

			//	Open the dialog box
			if(dlg.ShowDialog() == DialogResult.OK) 
			{
				Open(dlg.FileName);
			}
		
		}// private void OnAppOpenScript()
		
		/// <summary>This method is called when the user wants to create a new script</summary>
		private void OnAppNewScript()
		{
			OpenFileDialog		dlg = null;
			CXmlScript			xmlScript = null;
			
			//	Check for unsaved changes first
			if(CheckModified() == false) return;
			
			try
			{
				dlg = new System.Windows.Forms.OpenFileDialog();

				//	Initialize the file selection dialog
				dlg.CheckFileExists = true;
				dlg.CheckPathExists = true;
				dlg.Multiselect = false;
				dlg.Title = "Select Source Transcript";
				dlg.Filter = "Transcripts (*.xmlt)|*.xmlt|All Files (*.*)|*.*";
			
				//	Initialize the file selection
				if(m_tmaxAppOptions.LastDeposition.Length > 0)
				{
					if(System.IO.File.Exists(m_tmaxAppOptions.LastDeposition) == true)
					{
						dlg.InitialDirectory = System.IO.Path.GetDirectoryName(m_tmaxAppOptions.LastDeposition);
						dlg.FileName = System.IO.Path.GetFileName(m_tmaxAppOptions.LastDeposition);
					}
					
				}// if(m_tmaxAppOptions.LastDeposition.Length > 0)
				
				if(dlg.InitialDirectory.Length == 0)
					dlg.InitialDirectory = m_strAppFolder;
					
				//	Prompt the user to select the source transcript
				if(dlg.ShowDialog() == DialogResult.OK)
				{
					//	Allocate a new script
					xmlScript = new CXmlScript();
					xmlScript.XmlScriptFormat = TmaxXmlScriptFormats.VideoViewer;

					//	Load this new source
					if(xmlScript.FastFill(dlg.FileName) == true)
					{
						//	Get rid of any designations
						//
						//	NOTE:	Just in case the user opened an XMLS file
						if(xmlScript.XmlDesignations != null)
							xmlScript.XmlDesignations.Clear();
							
						if(xmlScript.Save(m_strNewScriptFileSpec) == true)
						{
							xmlScript.SourceFileSpec = dlg.FileName;
							
							//	Make sure the deposition has a media id
							//
							//	NOTE:	This is required to import into TrialMax
							if((xmlScript.XmlDeposition != null) && (xmlScript.XmlDeposition.MediaId.Length == 0))
								xmlScript.XmlDeposition.MediaId = System.IO.Path.GetFileNameWithoutExtension(dlg.FileName);
								
							//	Prepare for editing
							xmlScript.Saved = false;
							xmlScript.Modified = true;
							
							//	Make this the active script
							Activate(xmlScript);
						}
						
					}
					else
					{
						//	Warn the user
						Warn("Unable to load " + dlg.FileName);
					
					}// if(xmlScript.FastFill(dlg.FileName) == true)
				
				}// if(dlg.ShowDialog() == DialogResult.OK)
		
			}
			catch(System.Exception Ex)
			{
				m_tmaxEventSource.FireError(this, "OnAppNewScript", m_tmaxErrorBuilder.Message(ERROR_ON_APP_NEW_SCRIPT_EX), Ex);
			}
			
		}// private void OnAppNewScript()
		
		/// <summary>This method is called to warn the user when an invalid range value is encountered</summary>
		/// <param name="strMsg">The warning message</param>
		private bool Warn(string strMsg)
		{
			MessageBox.Show(strMsg, "Error", MessageBoxButtons.OK,
				MessageBoxIcon.Exclamation);
			
			return false; // allows for cleaner code						
		
		}// private bool Warn(string strMsg)
		
		/// <summary>This method is called when the user selects one of the Recent cases from the application's File menu</summary>
		/// <param name="eCommand">The command identifier of the recent case selected by the user</param>
		/// <param name="bSilent">true to inhibit warning messages if the file does not exist</param>
		private void OnAppOpenRecent(AppCommands eCommand, bool bSilent)
		{
			ToolBase	tool = null;
			string		strFileSpec = "";
			string		strMsg = "";
			
			//	Check for unsaved changes first
			if(CheckModified() == false) return;
			
			try
			{
				//	Get the menu tool selected by the user
				if((tool = GetUltraTool(eCommand)) != null)
				{
					strFileSpec = tool.SharedProps.Caption;
					
					//	Make sure this file exists
					if(System.IO.File.Exists(strFileSpec))
					{
						//	Open the file
						if(Open(strFileSpec) == false)
						{
							m_tmaxAppOptions.RemoveRecentlyUsed(strFileSpec);
						}
						
					}
					else
					{
						//	Remove the file from the list of recently used
						m_tmaxAppOptions.RemoveRecentlyUsed(strFileSpec);
					
						//	Warn the user
						if(bSilent == false)
						{
							strMsg = String.Format("Unable to locate {0}", strFileSpec);
							MessageBox.Show(strMsg, "Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
						}
						
					}
					
				}// if((tool = GetUltraTool(eCommand)) != null)
			
			}
			catch(System.Exception Ex)
			{
				m_tmaxEventSource.FireError(this, "OnAppOpenRecent", m_tmaxErrorBuilder.Message(ERROR_ON_APP_OPEN_RECENT_EX), Ex);
			}

		}// private void OnAppOpenRecent(AppCommands eCommand)
		
		/// <summary>This method is called when the user wants to save the current script</summary>
		private void OnAppSave()
		{
			try
			{
				//	Do we have an active script?
				if(m_xmlScript != null)
				{
					m_xmlScript.Save();
					m_xmlScript.Saved = true;
					m_xmlScript.Modified = false;
				}
			
			}
			catch(System.Exception Ex)
			{
				m_tmaxEventSource.FireError(this, "OnAppSave", m_tmaxErrorBuilder.Message(ERROR_ON_APP_SAVE_EX, m_xmlScript != null ? m_xmlScript.FileSpec : "NULL"), Ex);
			}
			
		}// private void OnAppSave()
		
		/// <summary>This method is called when the user wants to save the current work as a new script</summary>
		private void OnAppSaveAs()
		{
			string	strFileSpec = "";
			string	strOldFileSpec = "";
			
			//	Must have a script loaded
			Debug.Assert(m_xmlScript != null);
			if(m_xmlScript == null) return;
			
			try
			{
				//	Save the old file specification
				if(m_xmlScript.Saved == true)
					strOldFileSpec = m_xmlScript.FileSpec;

				//	Get the new path
				strFileSpec = GetSaveFileSpec(strOldFileSpec);
					
				if((strFileSpec != null) && (strFileSpec.Length > 0))
				{
					//	Attempt to save using the new path
					if(m_xmlScript.Save(strFileSpec) == true)
					{
						m_xmlScript.Saved = true;
						m_xmlScript.Modified = false;

						//	Update the application options
						if(m_tmaxAppOptions != null)
						{
							m_tmaxAppOptions.LastScript = m_xmlScript.FileSpec;
							if(m_xmlScript.SourceFileSpec.Length > 0)
								m_tmaxAppOptions.LastDeposition = m_xmlScript.SourceFileSpec;
							m_tmaxAppOptions.AddRecentlyUsed(m_xmlScript.FileSpec);
						}
				
					}
					else
					{
						//	Restore the old filename
						if(strOldFileSpec.Length > 0)
							m_xmlScript.SetFileProps(strOldFileSpec);
					}
					
				}// if((strFileSpec != null) && (strFileSpec.Length > 0))
			
			}
			catch(System.Exception Ex)
			{
				m_tmaxEventSource.FireError(this, "OnAppSaveAs", m_tmaxErrorBuilder.Message(ERROR_ON_APP_SAVE_AS_EX), Ex);
			}
			
			//	Make sure correct information is being displayed
			SetCaptions();
			
		}// private void OnAppSaveAs()
		
		/// <summary>This method is called when the user wants to set the application options</summary>
		/// <param name="iInitialPage">The index of the page to be displayed on open</param>
		private void OnAppSetPreferences(int iInitialPage)
		{
			CFTmaxVideoOptions	setOptions = null;
			bool				bApplied = false;
			
			Debug.Assert(m_tmaxAppOptions != null);
			
			try
			{
				//	Notify each of the panes that the user is about to set the options
				for(int i = 0; i < (int)TmaxVideoViews.MaxViews; i++)
				{
					if(m_aViews[i] != null)
					{
						try { m_aViews[i].OnAppBeforeSetPreferences(); }
						catch {}
					}
					
				}

				setOptions = new CFTmaxVideoOptions();
				setOptions.VideoOptions = m_tmaxAppOptions;
				setOptions.ProductManager = m_tmaxProductManager;
				setOptions.TmaxEncoder = m_tmaxEncoder;
				setOptions.InitialTabIndex = iInitialPage;
				m_tmaxEventSource.Attach(setOptions.EventSource);
				
				bApplied = (setOptions.ShowDialog() == DialogResult.OK);
				
				//	Notify each of the panes that the user is about to set the options
				for(int i = 0; i < (int)TmaxVideoViews.MaxViews; i++)
				{
					if(m_aViews[i] != null)
					{
						try { m_aViews[i].OnAppAfterSetPreferences(bApplied); }
						catch {}
					}
					
				}
			
			}
			catch(System.Exception Ex)
			{
				m_tmaxEventSource.FireError(this, "OnAppSetPreferences", m_tmaxErrorBuilder.Message(ERROR_ON_APP_SET_PREFERENCES_EX), Ex);
			}
			
		}// private void OnAppSetPreferences()
		
		/// <summary>This method is called when the user wants to view system information</summary>
		private void OnAppSystemInformation()
		{
			Debug.Assert(m_tmaxAppOptions != null);
			
			try
			{
				if((m_tmaxDiagnosticsForm != null) && (m_tmaxDiagnosticsForm.IsDisposed == false))
				{
					if(m_tmaxDiagnosticsForm.Visible == true)
					{
						m_tmaxDiagnosticsForm.BringToFront();
						
						m_tmaxDiagnosticsForm.SetBounds((Screen.GetBounds(this).Width / 2) - (m_tmaxDiagnosticsForm.Width / 2),
														(Screen.GetBounds(this).Height / 2) - (m_tmaxDiagnosticsForm.Height / 2),
														m_tmaxDiagnosticsForm.Width, m_tmaxDiagnosticsForm.Height, BoundsSpecified.Location);
					}
					else
					{
						m_tmaxDiagnosticsForm = null;
					}
					
				}
				
				if(m_tmaxDiagnosticsForm == null)
				{
					m_tmaxDiagnosticsForm = new CFTmaxVideoDiagnostics();
					m_tmaxDiagnosticsForm.VideoOptions = m_tmaxAppOptions;
					m_tmaxDiagnosticsForm.VideoDiagnostics = m_tmaxDiagnostics;
					m_tmaxDiagnosticsForm.Closing += new System.ComponentModel.CancelEventHandler(this.OnDiagnosticsClosing);
					m_tmaxEventSource.Attach(m_tmaxDiagnosticsForm.EventSource);
					
					m_tmaxDiagnosticsForm.Show();
				}
				
			}
			catch(System.Exception Ex)
			{
				m_tmaxEventSource.FireError(this, "OnAppSystemInformation", m_tmaxErrorBuilder.Message(ERROR_ON_APP_SYSTEM_INFORMATION_EX), Ex);
			}
			
		}// private void OnAppSystemInformation()
		
		/// <summary>This function toggles the visibility of the child view</summary>
		/// <param name="iView">View Identifier</param>
		private void OnAppToggleView(AppCommands eCommand)
		{
			DockablePaneBase	dockPane = null;
			TmaxVideoViews		eView = TmaxVideoViews.MaxViews;
			
			try
			{
				//	Get the view associated with this command
				if((eView = GetViewFromCommand(eCommand)) != TmaxVideoViews.MaxViews)
				{
					//	Get the specified docking pane
					if((dockPane = GetUltraPane(eView)) != null)
					{
						if(dockPane.Closed == false)
						{
							SetUltraPaneVisible(eView, false, false);
						}
						else
						{
							SetUltraPaneVisible(eView, true, true);
						}
						
						SetViewStates();
					
					}// if((dockPane = GetUltraPane(eView)) != null)
					
				}// if((eView = GetViewFromCommand(eCommand)) != TmaxVideoViews.MaxViews)
			}
			catch(System.Exception Ex)
			{
				m_tmaxEventSource.FireError(this, "OnAppToggleView", m_tmaxErrorBuilder.Message(ERROR_ON_APP_TOGGLE_VIEW_EX, eView), Ex);
			}
		
		}// private void OnAppToggleView(AppCommands eCommand)

		/// <summary>This method is called when the user wants to check for application updates</summary>
		private void OnAppCheckForUpdates()
		{
			FTI.Trialmax.Forms.CFUpdateWizard update = null;
			
			//	Clear the product update path
			m_strXmlUpdateFileSpec = "";
			
			//	Make sure the installer application exists
			if(System.IO.File.Exists(m_strUpdateInstaller) == false)
			{
				MessageBox.Show("Unable to locate " + m_strUpdateInstaller + " to perform on-line updates", "Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
				return;
			}
			
			try
			{
				update = new FTI.Trialmax.Forms.CFUpdateWizard();
				
				//	Connect the event source
				m_tmaxEventSource.Attach(update.EventSource);
				
				//	Set the form's properties
				update.Registry  = m_tmaxRegistry;
				update.AppFolder = m_strAppFolder;
				update.Product   = m_tmaxProductManager;
				
				//	Show the form to the user
				if(update.ShowDialog() == DialogResult.OK)
				{
					//	There should be a valid installation file
					if((update.InstallFileSpec == null) || (update.InstallFileSpec.Length == 0))
					{
						MessageBox.Show("Unable to launch the installer. No product update has been specified", "Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
					}
					else if(System.IO.File.Exists(update.InstallFileSpec) == false)
					{
						MessageBox.Show("Unable to locate " + update.InstallFileSpec + " to initialize the installer", "Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
					}
					else
					{
						//	Launch the installer
						m_strXmlUpdateFileSpec = update.InstallFileSpec;
						this.Close();
					}
						
				}// if(update.ShowDialog() == DialogResult.OK)
				
			}
			catch(System.Exception Ex)
			{
				m_tmaxEventSource.FireError(this, "OnAppCheckForUpdates", m_tmaxErrorBuilder.Message(ERROR_ON_APP_CHECK_FOR_UPDATES_EX), Ex);
			}

		}// private void OnAppCheckForUpdates()
		
		/// <summary>This method is called to launch the updates installer when the application exits</summary>
		/// <returns>true if successful</returns>
		private bool LaunchUpdatesInstaller()
		{
			System.Diagnostics.Process	installer = null;
			bool						bSuccessful = false;

			Debug.Assert(m_strXmlUpdateFileSpec.Length > 0);
			if(m_strXmlUpdateFileSpec.Length == 0) return false;
			if(System.IO.File.Exists(m_strUpdateInstaller) == false) return false;
			
			try
			{
				//	Create the process for launching the converter
				installer = new Process();
				
				//	Initialize the startup information
				installer.StartInfo.FileName = m_strUpdateInstaller;
				installer.StartInfo.Arguments = (" \"" + m_strXmlUpdateFileSpec + "\"");
				installer.StartInfo.WindowStyle = ProcessWindowStyle.Normal;

				//	Start the process
				bSuccessful = installer.Start();

			}
			catch(System.Exception Ex)
			{
				m_tmaxEventSource.FireError(this, "LaunchUpdatesInstaller", m_tmaxErrorBuilder.Message(ERROR_LAUNCH_UPDATES_INSTALLER_EX), Ex);
			}
			
			return bSuccessful;
			
		}// private bool LaunchUpdatesInstaller()
		
		/// <summary>This method is called to enable/disable the ability to drag panes</summary>
		/// <param name="bLock">True to enable dragging</param>
		private void SetViewLocks(bool bLock)
		{
			foreach(DockablePaneBase O in m_ctrlDockingManager.ControlPanes)
			{
				try
				{
					O.Settings.AllowDragging = (bLock == false) ? DefaultableBoolean.True : DefaultableBoolean.False;
					O.Settings.AllowFloating = (bLock == false) ? DefaultableBoolean.True : DefaultableBoolean.False;
					O.Settings.DoubleClickAction = (bLock == false) ? PaneDoubleClickAction.Default : PaneDoubleClickAction.None;
				}
				catch
				{
				}

			}
			
		}// private void SetViewLocks(bool bLock)
			
		/// <summary>This method is called to update the current state of the child views</summary>
		private void SetViewStates()
		{
			CTmaxVideoView tmaxView = null;
			
			//	Don't bother if terminating
			if(m_bTerminating == true) return;
			
			if(m_ctrlDockingManager == null) return;
			if(m_ctrlDockingManager.ControlPanes == null) return;

			//	Iterate the collection of dockable panes
			foreach(DockableControlPane O in m_ctrlDockingManager.ControlPanes)
			{
				try
				{
					if((tmaxView = (CTmaxVideoView)(O.Control)) != null)
					{
						if((O.IsSelectedTab == true) || (O.DockedState == DockedState.Floating))
							tmaxView.Active = true;
						else
							tmaxView.Active = IsUltraVisible(O.Control);
					}
					
				}
				catch
				{
				}
				
			}// foreach(DockableControlPane O in m_ctrlDockingManager.ControlPanes)
		
		}// private void SetViewStates()
		
		/// <summary>This function is called to get the name assigned to the specified view</summary>
		/// <param name="eView">The view identifier</param>
		/// <returns>Alpha-numeric name for the specified view</returns>
		private string GetViewName(TmaxVideoViews eView)
		{
			switch(eView)
			{
				case TmaxVideoViews.Transcript:	return "Transcript";
				case TmaxVideoViews.Tree:		return "Script";
				case TmaxVideoViews.Results:	return "Results";
				case TmaxVideoViews.Tuner:		return "Tuner";
				default:						Debug.Assert(false, "Unknown view identifier");
												return eView.ToString();
			}
		
		}// private string GetViewName(int iView)
		
		/// <summary>This function is called to retrieve the menu / toolbar tool with the specified key</summary>
		/// <param name="strKey">Alpha-numeric key identifier</param>
		/// <returns>Infragistics base class tool object</returns>
		private ToolBase GetUltraTool(string strKey)
		{
			ToolBase Tool = null;
			
			if(m_ctrlToolbarManager != null)
				Tool = m_ctrlToolbarManager.Tools[strKey];

			return Tool;
		
		}// private ToolBase GetUltraTool(string strKey)
		
		/// <summary>This function is called to get the tool associated with the specified command</summary>
		/// <param name="eCommand">The application command enumeration</param>
		/// <returns>Infragistics base class tool object</returns>
		private ToolBase GetUltraTool(AppCommands eCommand)
		{
			return GetUltraTool(eCommand.ToString());
		}
		
		/// <summary>This function is called to get the unique key used to identify the child view's dockable control pane</summary>
		/// <param name="eView">View identifier</param>
		/// <returns>Alpha-numeric key for the specified view's dockable pane</returns>
		private string GetUltraPaneKey(TmaxVideoViews eView)
		{
			//	Use the view name as the unique key
			return GetViewName(eView);
		
		}// private string GetUltraPaneKey(TmaxVideoViews eView)
		
		/// <summary>This function is called to get the unique key used to identify the application menu</summary>
		/// <param name="eMenu">Enumerated menu identifier</param>
		/// <returns>Alpha-numeric key for the specified menu</returns>
		private string GetUltraMenuKey(AppMenus eMenu)
		{
			//	Use the string equivalent
			return eMenu.ToString();
		
		}// private string GetUltraMenuKey(AppMenus eMenu)
		
		/// <summary>This function is called to retrieve the docking pane associated with the specified application command</summary>
		/// <param name="eCommand">Enumerated application command identifier</param>
		/// <returns>Infragistics dockable base pane owneer</returns>
		private DockablePaneBase GetUltraPane(AppCommands eCommand)
		{
			try
			{
				TmaxVideoViews eView = TmaxVideoViews.MaxViews;
				
				if((eView = GetViewFromCommand(eCommand)) != TmaxVideoViews.MaxViews)
					return GetUltraPane(eView);
				else
					return null;
			}
			catch
			{
				return null;
			}
				
		}// private DockablePaneBase GetUltraPane(AppCommands eCommand)
		
		/// <summary>This function is called to retrieve the docking pane that owns the specified view</summary>
		/// <param name="eView">View identifier</param>
		/// <returns>Infragistics dockable base pane owneer</returns>
		private DockablePaneBase GetUltraPane(TmaxVideoViews eView)
		{
			string strKey = GetUltraPaneKey(eView);
		
			if((strKey != null) && (strKey.Length > 0))
				return GetUltraPane(strKey);
			else
				return null;
				
		}// private DockablePaneBase GetUltraPane(TmaxVideoViews eView)
		
		/// <summary>This function is called to retrieve the docking pane with the specified key</summary>
		/// <param name="strKey">The value assigned to the pane's Key property</param>
		/// <returns>Infragistics dockable base pane</returns>
		private DockablePaneBase GetUltraPane(string strKey)
		{
			DockablePaneBase Pane = null;
			
			if((m_ctrlDockingManager != null) && (strKey != null) && (strKey.Length > 0))
			{
				//	NOTE:	We purposely do not trap exceptions here. It
				//			is up to the calling function to trap the exception
				
				//	Check our local dock manager first
				if((Pane = m_ctrlDockingManager.PaneFromKey(strKey)) == null)
				{
					
				}
			
			}// if((m_ctrlDockingManager != null) && (strKey.Length > 0))

			return Pane;
		
		}// private DockablePaneBase GetUltraPane(string strKey)
		
		/// <summary>Sets the visibility of the docking pane that owns the specified view control</summary>
		/// <param name="eView">View Identifier</param>
		/// <param name="bVisible">true if visible</param>
		/// <param name="bActivate">true to activate the pane after making it visible</param>
		private void SetUltraPaneVisible(TmaxVideoViews eView, bool bVisible, bool bActivate)
		{
			DockablePaneBase Pane = null;
			
			try
			{
				//	Get the specified pane object
				if((Pane = GetUltraPane(eView)) != null)
				{
					if(bVisible == false)
					{
						Pane.Close(true);
					}
					else
					{
						Pane.Show();
			
						//	Should we activate the pane?
						if(bActivate)
						{
							Pane.Activate();
						}
						//else
						//{
						Pane.IsSelectedTab = true;
						//}
					}
				}
				else
				{
					m_tmaxEventSource.FireError(this, "SetUltraPaneVisible", m_tmaxErrorBuilder.Message(ERROR_SET_ULTRA_PANE_VISIBLE_FAILED, eView, GetViewName(eView)));
				}
			
			}
			catch(System.Exception Ex)
			{
				m_tmaxEventSource.FireError(this, "SetUltraPaneVisible", m_tmaxErrorBuilder.Message(ERROR_SET_ULTRA_PANE_VISIBLE_EX, eView, GetViewName(eView)), Ex);
			}
		
		}// private void SetUltraPaneVisible(TmaxVideoViews eView, bool bVisible, bool bActivate)

		/// <summary>This method sets the checked state of the specified tool</summary>
		/// <param name="ultraTool">The tool to be set</param>
		/// <param name="eCommand">The command associated with the tool</param>
		private void SetUltraCheckedState(ToolBase ultraTool, AppCommands eCommand)
		{
			TmaxVideoViews eView = TmaxVideoViews.MaxViews;
			
			Debug.Assert(ultraTool != null);
			if(ultraTool == null) return;
			
			try
			{
				//	Do we need to get the command identifier?
				if(eCommand == AppCommands.Invalid)
					eCommand = GetCommand(ultraTool.Key);

				//	Which command is associated with this tool?
				switch(eCommand)
				{
					case AppCommands.ToggleTranscript:    
					case AppCommands.ToggleResults:    
					case AppCommands.ToggleScript:    
					case AppCommands.ToggleTuner:    
					
						//	Get the view associated with this command
						if((eView = GetViewFromCommand(eCommand)) != TmaxVideoViews.MaxViews)
						{
							SetUltraCheckedState((StateButtonTool)ultraTool, eView);
						}
						break;
						
				}// switch(GetCommand(ultraTool.Key))
					
			}
			catch
			{
			}
		
		}// private void SetUltraCheckedState(ToolBase ultraTool, AppCommands eCommand)
		
		/// <summary>This function is called to set the check state of a menu item</summary>
		/// <param name="Tool">Infragistics state button tool</param>
		/// <param name="eView">View identifier used to determine the check state</param>
		private void SetUltraCheckedState(StateButtonTool Tool, TmaxVideoViews eView)
		{
			DockablePaneBase Pane = null;
			
			Debug.Assert(Tool != null);
			
			try
			{
				//	Get the specified pane
				Pane = GetUltraPane(eView);
				
				//	Do we have a valid pane object?
				if(Pane != null)
				{
					Tool.Checked = (Pane.Closed == false);
					Tool.SharedProps.Enabled = true;
				}
				else
				{
					Tool.SharedProps.Enabled = false;
				}
			
			}
			catch
			{
			}
					
		}// private void SetUltraCheckedState(StateButtonTool Tool, TmaxVideoViews eView)
		
		/// <summary>Required by form designer to create and initialize child controls</summary>
		private void InitializeComponent()
		{
			this.components = new System.ComponentModel.Container();
			Infragistics.Win.UltraWinDock.DockAreaPane dockAreaPane1 = new Infragistics.Win.UltraWinDock.DockAreaPane(Infragistics.Win.UltraWinDock.DockedLocation.DockedBottom, new System.Guid("05f207d2-b336-43da-a788-c620f8a5cab9"));
			Infragistics.Win.UltraWinDock.DockableControlPane dockableControlPane1 = new Infragistics.Win.UltraWinDock.DockableControlPane(new System.Guid("cb454f5a-4702-4414-86dc-891f98db82cf"), new System.Guid("4d725e6a-f7d7-47fd-b978-02903aedd09d"), -1, new System.Guid("05f207d2-b336-43da-a788-c620f8a5cab9"), 0);
			Infragistics.Win.UltraWinDock.DockAreaPane dockAreaPane2 = new Infragistics.Win.UltraWinDock.DockAreaPane(Infragistics.Win.UltraWinDock.DockedLocation.DockedRight, new System.Guid("626736ac-4ba3-4a7a-8e91-544af1256a22"));
			Infragistics.Win.UltraWinDock.DockableControlPane dockableControlPane2 = new Infragistics.Win.UltraWinDock.DockableControlPane(new System.Guid("39e9175b-8261-431d-afc8-594fb05f2c40"), new System.Guid("00000000-0000-0000-0000-000000000000"), -1, new System.Guid("626736ac-4ba3-4a7a-8e91-544af1256a22"), -1);
			Infragistics.Win.UltraWinDock.DockAreaPane dockAreaPane3 = new Infragistics.Win.UltraWinDock.DockAreaPane(Infragistics.Win.UltraWinDock.DockedLocation.Floating, new System.Guid("7d9c311a-19cb-4669-8d4a-9f559a611e5d"));
			Infragistics.Win.UltraWinDock.DockAreaPane dockAreaPane4 = new Infragistics.Win.UltraWinDock.DockAreaPane(Infragistics.Win.UltraWinDock.DockedLocation.DockedLeft, new System.Guid("19b2e768-edfe-41a9-b049-2f58efeb3e33"));
			Infragistics.Win.UltraWinDock.DockableControlPane dockableControlPane3 = new Infragistics.Win.UltraWinDock.DockableControlPane(new System.Guid("2b618029-1058-4886-995d-6ed1e3f33005"), new System.Guid("7d9c311a-19cb-4669-8d4a-9f559a611e5d"), -1, new System.Guid("19b2e768-edfe-41a9-b049-2f58efeb3e33"), 0);
			Infragistics.Win.UltraWinDock.DockAreaPane dockAreaPane5 = new Infragistics.Win.UltraWinDock.DockAreaPane(Infragistics.Win.UltraWinDock.DockedLocation.Floating, new System.Guid("3260c960-1a64-49d9-bd60-79d93740ac3d"));
			Infragistics.Win.UltraWinDock.DockAreaPane dockAreaPane6 = new Infragistics.Win.UltraWinDock.DockAreaPane(Infragistics.Win.UltraWinDock.DockedLocation.DockedTop, new System.Guid("1cdfcdc9-5c42-4164-b8f3-fda3cbe4394d"));
			Infragistics.Win.UltraWinDock.DockableControlPane dockableControlPane4 = new Infragistics.Win.UltraWinDock.DockableControlPane(new System.Guid("39e66e8b-b2df-4802-9583-a43bb03cac31"), new System.Guid("3260c960-1a64-49d9-bd60-79d93740ac3d"), -1, new System.Guid("1cdfcdc9-5c42-4164-b8f3-fda3cbe4394d"), 0);
			Infragistics.Win.UltraWinDock.DockAreaPane dockAreaPane7 = new Infragistics.Win.UltraWinDock.DockAreaPane(Infragistics.Win.UltraWinDock.DockedLocation.Floating, new System.Guid("4d725e6a-f7d7-47fd-b978-02903aedd09d"));
			Infragistics.Win.UltraWinToolbars.UltraToolbar ultraToolbar1 = new Infragistics.Win.UltraWinToolbars.UltraToolbar("MainMenu");
			Infragistics.Win.UltraWinToolbars.PopupMenuTool popupMenuTool1 = new Infragistics.Win.UltraWinToolbars.PopupMenuTool("File");
			Infragistics.Win.UltraWinToolbars.PopupMenuTool popupMenuTool2 = new Infragistics.Win.UltraWinToolbars.PopupMenuTool("Edit");
			Infragistics.Win.UltraWinToolbars.PopupMenuTool popupMenuTool3 = new Infragistics.Win.UltraWinToolbars.PopupMenuTool("Tools");
			Infragistics.Win.UltraWinToolbars.PopupMenuTool popupMenuTool4 = new Infragistics.Win.UltraWinToolbars.PopupMenuTool("Help");
			Infragistics.Win.UltraWinToolbars.PopupMenuTool popupMenuTool5 = new Infragistics.Win.UltraWinToolbars.PopupMenuTool("File");
			Infragistics.Win.UltraWinToolbars.ButtonTool buttonTool1 = new Infragistics.Win.UltraWinToolbars.ButtonTool("NewScript");
			Infragistics.Win.UltraWinToolbars.ButtonTool buttonTool2 = new Infragistics.Win.UltraWinToolbars.ButtonTool("OpenScript");
			Infragistics.Win.UltraWinToolbars.ButtonTool buttonTool3 = new Infragistics.Win.UltraWinToolbars.ButtonTool("Save");
			Infragistics.Win.UltraWinToolbars.ButtonTool buttonTool4 = new Infragistics.Win.UltraWinToolbars.ButtonTool("SaveAs");
			Infragistics.Win.UltraWinToolbars.PopupMenuTool popupMenuTool6 = new Infragistics.Win.UltraWinToolbars.PopupMenuTool("Import");
			Infragistics.Win.UltraWinToolbars.PopupMenuTool popupMenuTool7 = new Infragistics.Win.UltraWinToolbars.PopupMenuTool("Export");
			Infragistics.Win.UltraWinToolbars.ButtonTool buttonTool5 = new Infragistics.Win.UltraWinToolbars.ButtonTool("Recent1");
			Infragistics.Win.UltraWinToolbars.ButtonTool buttonTool6 = new Infragistics.Win.UltraWinToolbars.ButtonTool("Recent2");
			Infragistics.Win.UltraWinToolbars.ButtonTool buttonTool7 = new Infragistics.Win.UltraWinToolbars.ButtonTool("Recent3");
			Infragistics.Win.UltraWinToolbars.ButtonTool buttonTool8 = new Infragistics.Win.UltraWinToolbars.ButtonTool("Recent4");
			Infragistics.Win.UltraWinToolbars.ButtonTool buttonTool9 = new Infragistics.Win.UltraWinToolbars.ButtonTool("Recent5");
			Infragistics.Win.UltraWinToolbars.ButtonTool buttonTool10 = new Infragistics.Win.UltraWinToolbars.ButtonTool("Exit");
			Infragistics.Win.UltraWinToolbars.PopupMenuTool popupMenuTool8 = new Infragistics.Win.UltraWinToolbars.PopupMenuTool("Edit");
			Infragistics.Win.UltraWinToolbars.ButtonTool buttonTool11 = new Infragistics.Win.UltraWinToolbars.ButtonTool("Find");
			Infragistics.Win.UltraWinToolbars.ButtonTool buttonTool12 = new Infragistics.Win.UltraWinToolbars.ButtonTool("FindNext");
			Infragistics.Win.UltraWinToolbars.PopupMenuTool popupMenuTool9 = new Infragistics.Win.UltraWinToolbars.PopupMenuTool("Tools");
			Infragistics.Win.UltraWinToolbars.ButtonTool buttonTool13 = new Infragistics.Win.UltraWinToolbars.ButtonTool("SetPreferences");
			Infragistics.Win.UltraWinToolbars.ButtonTool buttonTool14 = new Infragistics.Win.UltraWinToolbars.ButtonTool("SystemInformation");
			Infragistics.Win.UltraWinToolbars.PopupMenuTool popupMenuTool10 = new Infragistics.Win.UltraWinToolbars.PopupMenuTool("Help");
			Infragistics.Win.UltraWinToolbars.ButtonTool buttonTool15 = new Infragistics.Win.UltraWinToolbars.ButtonTool("UsersManual");
			Infragistics.Win.UltraWinToolbars.ButtonTool buttonTool16 = new Infragistics.Win.UltraWinToolbars.ButtonTool("OnlineSite");
			Infragistics.Win.UltraWinToolbars.ButtonTool buttonTool17 = new Infragistics.Win.UltraWinToolbars.ButtonTool("ContactFTI");
			Infragistics.Win.UltraWinToolbars.ButtonTool buttonTool18 = new Infragistics.Win.UltraWinToolbars.ButtonTool("About");
			Infragistics.Win.UltraWinToolbars.ButtonTool buttonTool19 = new Infragistics.Win.UltraWinToolbars.ButtonTool("CheckForUpdates");
			Infragistics.Win.UltraWinToolbars.ButtonTool buttonTool20 = new Infragistics.Win.UltraWinToolbars.ButtonTool("OpenScript");
			Infragistics.Win.Appearance appearance1 = new Infragistics.Win.Appearance();
			Infragistics.Win.UltraWinToolbars.PopupMenuTool popupMenuTool11 = new Infragistics.Win.UltraWinToolbars.PopupMenuTool("Import");
			Infragistics.Win.Appearance appearance2 = new Infragistics.Win.Appearance();
			Infragistics.Win.UltraWinToolbars.ButtonTool buttonTool21 = new Infragistics.Win.UltraWinToolbars.ButtonTool("ImportDesignations");
			Infragistics.Win.UltraWinToolbars.PopupMenuTool popupMenuTool12 = new Infragistics.Win.UltraWinToolbars.PopupMenuTool("Export");
			Infragistics.Win.Appearance appearance3 = new Infragistics.Win.Appearance();
			Infragistics.Win.UltraWinToolbars.ButtonTool buttonTool22 = new Infragistics.Win.UltraWinToolbars.ButtonTool("ExportDesignations");
			Infragistics.Win.UltraWinToolbars.ButtonTool buttonTool23 = new Infragistics.Win.UltraWinToolbars.ButtonTool("ExportScript");
			Infragistics.Win.UltraWinToolbars.ButtonTool buttonTool24 = new Infragistics.Win.UltraWinToolbars.ButtonTool("ExportVideo");
			Infragistics.Win.UltraWinToolbars.ButtonTool buttonTool25 = new Infragistics.Win.UltraWinToolbars.ButtonTool("ImportDesignations");
			Infragistics.Win.Appearance appearance4 = new Infragistics.Win.Appearance();
			Infragistics.Win.UltraWinToolbars.ButtonTool buttonTool26 = new Infragistics.Win.UltraWinToolbars.ButtonTool("ExportDesignations");
			Infragistics.Win.Appearance appearance5 = new Infragistics.Win.Appearance();
			Infragistics.Win.UltraWinToolbars.ButtonTool buttonTool27 = new Infragistics.Win.UltraWinToolbars.ButtonTool("ExportScript");
			Infragistics.Win.Appearance appearance6 = new Infragistics.Win.Appearance();
			Infragistics.Win.UltraWinToolbars.ButtonTool buttonTool28 = new Infragistics.Win.UltraWinToolbars.ButtonTool("ExportVideo");
			Infragistics.Win.Appearance appearance7 = new Infragistics.Win.Appearance();
			Infragistics.Win.UltraWinToolbars.ButtonTool buttonTool29 = new Infragistics.Win.UltraWinToolbars.ButtonTool("Save");
			Infragistics.Win.Appearance appearance8 = new Infragistics.Win.Appearance();
			Infragistics.Win.UltraWinToolbars.ButtonTool buttonTool30 = new Infragistics.Win.UltraWinToolbars.ButtonTool("SaveAs");
			Infragistics.Win.Appearance appearance9 = new Infragistics.Win.Appearance();
			Infragistics.Win.UltraWinToolbars.ButtonTool buttonTool31 = new Infragistics.Win.UltraWinToolbars.ButtonTool("Exit");
			Infragistics.Win.Appearance appearance10 = new Infragistics.Win.Appearance();
			Infragistics.Win.UltraWinToolbars.ButtonTool buttonTool32 = new Infragistics.Win.UltraWinToolbars.ButtonTool("About");
			Infragistics.Win.Appearance appearance11 = new Infragistics.Win.Appearance();
			Infragistics.Win.UltraWinToolbars.PopupMenuTool popupMenuTool13 = new Infragistics.Win.UltraWinToolbars.PopupMenuTool("View");
			Infragistics.Win.UltraWinToolbars.StateButtonTool stateButtonTool1 = new Infragistics.Win.UltraWinToolbars.StateButtonTool("ToggleTranscript", "");
			Infragistics.Win.UltraWinToolbars.StateButtonTool stateButtonTool2 = new Infragistics.Win.UltraWinToolbars.StateButtonTool("ToggleScript", "");
			Infragistics.Win.UltraWinToolbars.StateButtonTool stateButtonTool3 = new Infragistics.Win.UltraWinToolbars.StateButtonTool("ToggleTuner", "");
			Infragistics.Win.UltraWinToolbars.StateButtonTool stateButtonTool4 = new Infragistics.Win.UltraWinToolbars.StateButtonTool("ToggleResults", "");
			Infragistics.Win.UltraWinToolbars.StateButtonTool stateButtonTool5 = new Infragistics.Win.UltraWinToolbars.StateButtonTool("ToggleTranscript", "");
			Infragistics.Win.UltraWinToolbars.StateButtonTool stateButtonTool6 = new Infragistics.Win.UltraWinToolbars.StateButtonTool("ToggleScript", "");
			Infragistics.Win.UltraWinToolbars.StateButtonTool stateButtonTool7 = new Infragistics.Win.UltraWinToolbars.StateButtonTool("ToggleTuner", "");
			Infragistics.Win.UltraWinToolbars.StateButtonTool stateButtonTool8 = new Infragistics.Win.UltraWinToolbars.StateButtonTool("ToggleResults", "");
			Infragistics.Win.UltraWinToolbars.ButtonTool buttonTool33 = new Infragistics.Win.UltraWinToolbars.ButtonTool("SetPreferences");
			Infragistics.Win.Appearance appearance12 = new Infragistics.Win.Appearance();
			Infragistics.Win.UltraWinToolbars.ButtonTool buttonTool34 = new Infragistics.Win.UltraWinToolbars.ButtonTool("Recent1");
			Infragistics.Win.Appearance appearance13 = new Infragistics.Win.Appearance();
			Infragistics.Win.UltraWinToolbars.ButtonTool buttonTool35 = new Infragistics.Win.UltraWinToolbars.ButtonTool("Recent2");
			Infragistics.Win.Appearance appearance14 = new Infragistics.Win.Appearance();
			Infragistics.Win.UltraWinToolbars.ButtonTool buttonTool36 = new Infragistics.Win.UltraWinToolbars.ButtonTool("Recent3");
			Infragistics.Win.Appearance appearance15 = new Infragistics.Win.Appearance();
			Infragistics.Win.UltraWinToolbars.ButtonTool buttonTool37 = new Infragistics.Win.UltraWinToolbars.ButtonTool("Recent4");
			Infragistics.Win.Appearance appearance16 = new Infragistics.Win.Appearance();
			Infragistics.Win.UltraWinToolbars.ButtonTool buttonTool38 = new Infragistics.Win.UltraWinToolbars.ButtonTool("Recent5");
			Infragistics.Win.Appearance appearance17 = new Infragistics.Win.Appearance();
			Infragistics.Win.UltraWinToolbars.ButtonTool buttonTool39 = new Infragistics.Win.UltraWinToolbars.ButtonTool("NewScript");
			Infragistics.Win.Appearance appearance18 = new Infragistics.Win.Appearance();
			Infragistics.Win.UltraWinToolbars.ButtonTool buttonTool40 = new Infragistics.Win.UltraWinToolbars.ButtonTool("Find");
			Infragistics.Win.Appearance appearance19 = new Infragistics.Win.Appearance();
			Infragistics.Win.UltraWinToolbars.ButtonTool buttonTool41 = new Infragistics.Win.UltraWinToolbars.ButtonTool("FindNext");
			Infragistics.Win.Appearance appearance20 = new Infragistics.Win.Appearance();
			Infragistics.Win.UltraWinToolbars.ButtonTool buttonTool42 = new Infragistics.Win.UltraWinToolbars.ButtonTool("CheckForUpdates");
			Infragistics.Win.Appearance appearance21 = new Infragistics.Win.Appearance();
			Infragistics.Win.UltraWinToolbars.ButtonTool buttonTool43 = new Infragistics.Win.UltraWinToolbars.ButtonTool("UsersManual");
			Infragistics.Win.Appearance appearance22 = new Infragistics.Win.Appearance();
			Infragistics.Win.UltraWinToolbars.ButtonTool buttonTool44 = new Infragistics.Win.UltraWinToolbars.ButtonTool("OnlineSite");
			Infragistics.Win.Appearance appearance23 = new Infragistics.Win.Appearance();
			Infragistics.Win.UltraWinToolbars.ButtonTool buttonTool45 = new Infragistics.Win.UltraWinToolbars.ButtonTool("ContactFTI");
			Infragistics.Win.Appearance appearance24 = new Infragistics.Win.Appearance();
			Infragistics.Win.UltraWinToolbars.ButtonTool buttonTool46 = new Infragistics.Win.UltraWinToolbars.ButtonTool("SystemInformation");
			Infragistics.Win.Appearance appearance25 = new Infragistics.Win.Appearance();
			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(CTmaxVideoForm));
			this.m_ctrlResultsView = new FTI.Trialmax.TMVV.Tmvideo.CTmaxVideoSearch();
			this.m_ctrlTunerView = new FTI.Trialmax.TMVV.Tmvideo.CTmaxVideoTuner();
			this.m_ctrlTranscriptView = new FTI.Trialmax.TMVV.Tmvideo.CTmaxVideoTranscript();
			this.m_ctrlScriptView = new FTI.Trialmax.TMVV.Tmvideo.CTmaxVideoTree();
			this.m_ctrlDockingManager = new Infragistics.Win.UltraWinDock.UltraDockManager(this.components);
			this._CTmaxVideoFormUnpinnedTabAreaLeft = new Infragistics.Win.UltraWinDock.UnpinnedTabArea();
			this._CTmaxVideoFormUnpinnedTabAreaRight = new Infragistics.Win.UltraWinDock.UnpinnedTabArea();
			this._CTmaxVideoFormUnpinnedTabAreaTop = new Infragistics.Win.UltraWinDock.UnpinnedTabArea();
			this._CTmaxVideoFormUnpinnedTabAreaBottom = new Infragistics.Win.UltraWinDock.UnpinnedTabArea();
			this._CTmaxVideoFormAutoHideControl = new Infragistics.Win.UltraWinDock.AutoHideControl();
			this.m_ctrlToolbarManager = new Infragistics.Win.UltraWinToolbars.UltraToolbarsManager(this.components);
			this.m_ctrlMenulImages = new System.Windows.Forms.ImageList(this.components);
			this._CTmaxVideoForm_Toolbars_Dock_Area_Left = new Infragistics.Win.UltraWinToolbars.UltraToolbarsDockArea();
			this._CTmaxVideoForm_Toolbars_Dock_Area_Right = new Infragistics.Win.UltraWinToolbars.UltraToolbarsDockArea();
			this._CTmaxVideoForm_Toolbars_Dock_Area_Top = new Infragistics.Win.UltraWinToolbars.UltraToolbarsDockArea();
			this._CTmaxVideoForm_Toolbars_Dock_Area_Bottom = new Infragistics.Win.UltraWinToolbars.UltraToolbarsDockArea();
			this.dockableWindow1 = new Infragistics.Win.UltraWinDock.DockableWindow();
			this.dockableWindow4 = new Infragistics.Win.UltraWinDock.DockableWindow();
			this.windowDockingArea4 = new Infragistics.Win.UltraWinDock.WindowDockingArea();
			this.windowDockingArea3 = new Infragistics.Win.UltraWinDock.WindowDockingArea();
			this.windowDockingArea2 = new Infragistics.Win.UltraWinDock.WindowDockingArea();
			this.windowDockingArea5 = new Infragistics.Win.UltraWinDock.WindowDockingArea();
			this.dockableWindow2 = new Infragistics.Win.UltraWinDock.DockableWindow();
			this.dockableWindow5 = new Infragistics.Win.UltraWinDock.DockableWindow();
			this.windowDockingArea1 = new Infragistics.Win.UltraWinDock.WindowDockingArea();
			this.windowDockingArea6 = new Infragistics.Win.UltraWinDock.WindowDockingArea();
			this.windowDockingArea8 = new Infragistics.Win.UltraWinDock.WindowDockingArea();
			((System.ComponentModel.ISupportInitialize)(this.m_ctrlDockingManager)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.m_ctrlToolbarManager)).BeginInit();
			this.dockableWindow1.SuspendLayout();
			this.dockableWindow4.SuspendLayout();
			this.windowDockingArea4.SuspendLayout();
			this.windowDockingArea3.SuspendLayout();
			this.windowDockingArea5.SuspendLayout();
			this.dockableWindow2.SuspendLayout();
			this.dockableWindow5.SuspendLayout();
			this.windowDockingArea6.SuspendLayout();
			this.SuspendLayout();
			// 
			// m_ctrlResultsView
			// 
			this.m_ctrlResultsView.Active = false;
			this.m_ctrlResultsView.AppId = FTI.Trialmax.TMVV.Tmvideo.TmaxVideoViews.MaxViews;
			this.m_ctrlResultsView.AppOptions = null;
			this.m_ctrlResultsView.Dock = System.Windows.Forms.DockStyle.Fill;
			this.m_ctrlResultsView.Location = new System.Drawing.Point(2, 20);
			this.m_ctrlResultsView.Name = "m_ctrlResultsView";
			this.m_ctrlResultsView.Results = null;
			this.m_ctrlResultsView.Size = new System.Drawing.Size(656, 90);
			this.m_ctrlResultsView.TabIndex = 2;
			this.m_ctrlResultsView.ViewName = "Results View";
			// 
			// m_ctrlTunerView
			// 
			this.m_ctrlTunerView.Active = false;
			this.m_ctrlTunerView.AppId = FTI.Trialmax.TMVV.Tmvideo.TmaxVideoViews.MaxViews;
			this.m_ctrlTunerView.AppOptions = null;
			this.m_ctrlTunerView.ForeColor = System.Drawing.SystemColors.ControlText;
			this.m_ctrlTunerView.Location = new System.Drawing.Point(2, 20);
			this.m_ctrlTunerView.Name = "m_ctrlTunerView";
			this.m_ctrlTunerView.Size = new System.Drawing.Size(280, 253);
			this.m_ctrlTunerView.TabIndex = 29;
			this.m_ctrlTunerView.ViewName = "";
			// 
			// m_ctrlTranscriptView
			// 
			this.m_ctrlTranscriptView.Active = false;
			this.m_ctrlTranscriptView.AppId = FTI.Trialmax.TMVV.Tmvideo.TmaxVideoViews.MaxViews;
			this.m_ctrlTranscriptView.AppOptions = null;
			this.m_ctrlTranscriptView.BackColor = System.Drawing.SystemColors.Control;
			this.m_ctrlTranscriptView.Dock = System.Windows.Forms.DockStyle.Fill;
			this.m_ctrlTranscriptView.Location = new System.Drawing.Point(2, 20);
			this.m_ctrlTranscriptView.Name = "m_ctrlTranscriptView";
			this.m_ctrlTranscriptView.Size = new System.Drawing.Size(253, 253);
			this.m_ctrlTranscriptView.TabIndex = 0;
			this.m_ctrlTranscriptView.ViewName = "Transcript View";
			// 
			// m_ctrlScriptView
			// 
			this.m_ctrlScriptView.Active = false;
			this.m_ctrlScriptView.AppId = FTI.Trialmax.TMVV.Tmvideo.TmaxVideoViews.MaxViews;
			this.m_ctrlScriptView.AppOptions = null;
			this.m_ctrlScriptView.BackColor = System.Drawing.Color.Blue;
			this.m_ctrlScriptView.Dock = System.Windows.Forms.DockStyle.Fill;
			this.m_ctrlScriptView.Location = new System.Drawing.Point(2, 20);
			this.m_ctrlScriptView.Name = "m_ctrlScriptView";
			this.m_ctrlScriptView.Size = new System.Drawing.Size(97, 253);
			this.m_ctrlScriptView.TabIndex = 1;
			this.m_ctrlScriptView.ViewName = "Script View";
			// 
			// m_ctrlDockingManager
			// 
			this.m_ctrlDockingManager.AnimationEnabled = false;
			this.m_ctrlDockingManager.AutoHideDelay = 1000;
			this.m_ctrlDockingManager.DefaultPaneSettings.BorderStylePane = Infragistics.Win.UIElementBorderStyle.Etched;
			dockAreaPane1.DockedBefore = new System.Guid("626736ac-4ba3-4a7a-8e91-544af1256a22");
			dockAreaPane1.FloatingLocation = new System.Drawing.Point(185, 476);
			dockableControlPane1.Control = this.m_ctrlResultsView;
			dockableControlPane1.Key = "Results";
			dockableControlPane1.OriginalControlBounds = new System.Drawing.Rectangle(200, 160, 144, 80);
			dockableControlPane1.Size = new System.Drawing.Size(100, 100);
			dockableControlPane1.Text = "Search Results";
			dockAreaPane1.Panes.AddRange(new Infragistics.Win.UltraWinDock.DockablePaneBase[] {
            dockableControlPane1});
			dockAreaPane1.Size = new System.Drawing.Size(664, 116);
			dockAreaPane2.DockedBefore = new System.Guid("7d9c311a-19cb-4669-8d4a-9f559a611e5d");
			dockableControlPane2.Control = this.m_ctrlTunerView;
			dockableControlPane2.Key = "Tuner";
			dockableControlPane2.OriginalControlBounds = new System.Drawing.Rectangle(632, 280, 304, 264);
			dockableControlPane2.Size = new System.Drawing.Size(100, 100);
			dockableControlPane2.Text = "Tuner";
			dockAreaPane2.Panes.AddRange(new Infragistics.Win.UltraWinDock.DockablePaneBase[] {
            dockableControlPane2});
			dockAreaPane2.Size = new System.Drawing.Size(288, 253);
			dockAreaPane3.ChildPaneStyle = Infragistics.Win.UltraWinDock.ChildPaneStyle.VerticalSplit;
			dockAreaPane3.DockedBefore = new System.Guid("19b2e768-edfe-41a9-b049-2f58efeb3e33");
			dockAreaPane3.FloatingLocation = new System.Drawing.Point(412, 188);
			dockAreaPane3.Size = new System.Drawing.Size(107, 335);
			dockAreaPane4.ChildPaneStyle = Infragistics.Win.UltraWinDock.ChildPaneStyle.VerticalSplit;
			dockAreaPane4.DockedBefore = new System.Guid("3260c960-1a64-49d9-bd60-79d93740ac3d");
			dockAreaPane4.FloatingLocation = new System.Drawing.Point(412, 188);
			dockableControlPane3.Control = this.m_ctrlTranscriptView;
			dockableControlPane3.Key = "Transcript";
			dockableControlPane3.OriginalControlBounds = new System.Drawing.Rectangle(24, 48, 136, 104);
			dockableControlPane3.Size = new System.Drawing.Size(100, 100);
			dockableControlPane3.Text = "Transcript";
			dockAreaPane4.Panes.AddRange(new Infragistics.Win.UltraWinDock.DockablePaneBase[] {
            dockableControlPane3});
			dockAreaPane4.Size = new System.Drawing.Size(261, 253);
			dockAreaPane5.DockedBefore = new System.Guid("1cdfcdc9-5c42-4164-b8f3-fda3cbe4394d");
			dockAreaPane5.FloatingLocation = new System.Drawing.Point(651, 174);
			dockAreaPane5.Size = new System.Drawing.Size(100, 100);
			dockAreaPane6.DockedBefore = new System.Guid("4d725e6a-f7d7-47fd-b978-02903aedd09d");
			dockAreaPane6.FloatingLocation = new System.Drawing.Point(651, 174);
			dockableControlPane4.Control = this.m_ctrlScriptView;
			dockableControlPane4.Key = "Script";
			dockableControlPane4.OriginalControlBounds = new System.Drawing.Rectangle(224, 16, 136, 96);
			dockableControlPane4.Size = new System.Drawing.Size(100, 100);
			dockableControlPane4.Text = "Script";
			dockAreaPane6.Panes.AddRange(new Infragistics.Win.UltraWinDock.DockablePaneBase[] {
            dockableControlPane4});
			dockAreaPane6.Size = new System.Drawing.Size(105, 253);
			dockAreaPane6.UnfilledSize = new System.Drawing.Size(383, 192);
			dockAreaPane7.FloatingLocation = new System.Drawing.Point(185, 476);
			dockAreaPane7.Size = new System.Drawing.Size(449, 138);
			this.m_ctrlDockingManager.DockAreas.AddRange(new Infragistics.Win.UltraWinDock.DockAreaPane[] {
            dockAreaPane1,
            dockAreaPane2,
            dockAreaPane3,
            dockAreaPane4,
            dockAreaPane5,
            dockAreaPane6,
            dockAreaPane7});
			this.m_ctrlDockingManager.DragWindowStyle = Infragistics.Win.UltraWinDock.DragWindowStyle.LayeredWindow;
			this.m_ctrlDockingManager.HostControl = this;
			this.m_ctrlDockingManager.LayoutStyle = Infragistics.Win.UltraWinDock.DockAreaLayoutStyle.FillContainer;
			this.m_ctrlDockingManager.ShowCloseButton = false;
			this.m_ctrlDockingManager.ShowDisabledButtons = false;
			this.m_ctrlDockingManager.ShowPinButton = false;
			this.m_ctrlDockingManager.PaneActivate += new Infragistics.Win.UltraWinDock.ControlPaneEventHandler(this.OnUltraPaneActivate);
			this.m_ctrlDockingManager.PaneDeactivate += new Infragistics.Win.UltraWinDock.ControlPaneEventHandler(this.OnUltraPaneDectivate);
			this.m_ctrlDockingManager.AfterPaneButtonClick += new Infragistics.Win.UltraWinDock.PaneButtonEventHandler(this.OnUltraPaneButtonClick);
			// 
			// _CTmaxVideoFormUnpinnedTabAreaLeft
			// 
			this._CTmaxVideoFormUnpinnedTabAreaLeft.Dock = System.Windows.Forms.DockStyle.Left;
			this._CTmaxVideoFormUnpinnedTabAreaLeft.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
			this._CTmaxVideoFormUnpinnedTabAreaLeft.Location = new System.Drawing.Point(0, 21);
			this._CTmaxVideoFormUnpinnedTabAreaLeft.Name = "_CTmaxVideoFormUnpinnedTabAreaLeft";
			this._CTmaxVideoFormUnpinnedTabAreaLeft.Owner = this.m_ctrlDockingManager;
			this._CTmaxVideoFormUnpinnedTabAreaLeft.Size = new System.Drawing.Size(0, 400);
			this._CTmaxVideoFormUnpinnedTabAreaLeft.TabIndex = 0;
			// 
			// _CTmaxVideoFormUnpinnedTabAreaRight
			// 
			this._CTmaxVideoFormUnpinnedTabAreaRight.Dock = System.Windows.Forms.DockStyle.Right;
			this._CTmaxVideoFormUnpinnedTabAreaRight.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
			this._CTmaxVideoFormUnpinnedTabAreaRight.Location = new System.Drawing.Point(664, 21);
			this._CTmaxVideoFormUnpinnedTabAreaRight.Name = "_CTmaxVideoFormUnpinnedTabAreaRight";
			this._CTmaxVideoFormUnpinnedTabAreaRight.Owner = this.m_ctrlDockingManager;
			this._CTmaxVideoFormUnpinnedTabAreaRight.Size = new System.Drawing.Size(0, 400);
			this._CTmaxVideoFormUnpinnedTabAreaRight.TabIndex = 1;
			// 
			// _CTmaxVideoFormUnpinnedTabAreaTop
			// 
			this._CTmaxVideoFormUnpinnedTabAreaTop.Dock = System.Windows.Forms.DockStyle.Top;
			this._CTmaxVideoFormUnpinnedTabAreaTop.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
			this._CTmaxVideoFormUnpinnedTabAreaTop.Location = new System.Drawing.Point(0, 21);
			this._CTmaxVideoFormUnpinnedTabAreaTop.Name = "_CTmaxVideoFormUnpinnedTabAreaTop";
			this._CTmaxVideoFormUnpinnedTabAreaTop.Owner = this.m_ctrlDockingManager;
			this._CTmaxVideoFormUnpinnedTabAreaTop.Size = new System.Drawing.Size(664, 0);
			this._CTmaxVideoFormUnpinnedTabAreaTop.TabIndex = 2;
			// 
			// _CTmaxVideoFormUnpinnedTabAreaBottom
			// 
			this._CTmaxVideoFormUnpinnedTabAreaBottom.Dock = System.Windows.Forms.DockStyle.Bottom;
			this._CTmaxVideoFormUnpinnedTabAreaBottom.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
			this._CTmaxVideoFormUnpinnedTabAreaBottom.Location = new System.Drawing.Point(0, 421);
			this._CTmaxVideoFormUnpinnedTabAreaBottom.Name = "_CTmaxVideoFormUnpinnedTabAreaBottom";
			this._CTmaxVideoFormUnpinnedTabAreaBottom.Owner = this.m_ctrlDockingManager;
			this._CTmaxVideoFormUnpinnedTabAreaBottom.Size = new System.Drawing.Size(664, 0);
			this._CTmaxVideoFormUnpinnedTabAreaBottom.TabIndex = 3;
			// 
			// _CTmaxVideoFormAutoHideControl
			// 
			this._CTmaxVideoFormAutoHideControl.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
			this._CTmaxVideoFormAutoHideControl.Location = new System.Drawing.Point(0, 0);
			this._CTmaxVideoFormAutoHideControl.Name = "_CTmaxVideoFormAutoHideControl";
			this._CTmaxVideoFormAutoHideControl.Owner = this.m_ctrlDockingManager;
			this._CTmaxVideoFormAutoHideControl.Size = new System.Drawing.Size(0, 0);
			this._CTmaxVideoFormAutoHideControl.TabIndex = 4;
			// 
			// m_ctrlToolbarManager
			// 
			this.m_ctrlToolbarManager.DesignerFlags = 1;
			this.m_ctrlToolbarManager.DockWithinContainer = this;
			this.m_ctrlToolbarManager.DockWithinContainerBaseType = typeof(System.Windows.Forms.Form);
			this.m_ctrlToolbarManager.ImageListSmall = this.m_ctrlMenulImages;
			this.m_ctrlToolbarManager.ShowFullMenusDelay = 500;
			ultraToolbar1.DockedColumn = 0;
			ultraToolbar1.DockedRow = 0;
			ultraToolbar1.IsMainMenuBar = true;
			ultraToolbar1.NonInheritedTools.AddRange(new Infragistics.Win.UltraWinToolbars.ToolBase[] {
            popupMenuTool1,
            popupMenuTool2,
            popupMenuTool3,
            popupMenuTool4});
			ultraToolbar1.Text = "MainMenu";
			this.m_ctrlToolbarManager.Toolbars.AddRange(new Infragistics.Win.UltraWinToolbars.UltraToolbar[] {
            ultraToolbar1});
			popupMenuTool5.SharedProps.Caption = "&File";
			buttonTool3.InstanceProps.IsFirstInGroup = true;
			popupMenuTool6.InstanceProps.IsFirstInGroup = true;
			buttonTool5.InstanceProps.IsFirstInGroup = true;
			buttonTool10.InstanceProps.IsFirstInGroup = true;
			popupMenuTool5.Tools.AddRange(new Infragistics.Win.UltraWinToolbars.ToolBase[] {
            buttonTool1,
            buttonTool2,
            buttonTool3,
            buttonTool4,
            popupMenuTool6,
            popupMenuTool7,
            buttonTool5,
            buttonTool6,
            buttonTool7,
            buttonTool8,
            buttonTool9,
            buttonTool10});
			popupMenuTool8.SharedProps.Caption = "&Edit";
			popupMenuTool8.Tools.AddRange(new Infragistics.Win.UltraWinToolbars.ToolBase[] {
            buttonTool11,
            buttonTool12});
			popupMenuTool9.SharedProps.Caption = "&Tools";
			buttonTool14.InstanceProps.IsFirstInGroup = true;
			popupMenuTool9.Tools.AddRange(new Infragistics.Win.UltraWinToolbars.ToolBase[] {
            buttonTool13,
            buttonTool14});
			popupMenuTool10.SharedProps.Caption = "&Help";
			buttonTool19.InstanceProps.IsFirstInGroup = true;
			popupMenuTool10.Tools.AddRange(new Infragistics.Win.UltraWinToolbars.ToolBase[] {
            buttonTool15,
            buttonTool16,
            buttonTool17,
            buttonTool18,
            buttonTool19});
			appearance1.Image = 9;
			buttonTool20.SharedProps.AppearancesSmall.Appearance = appearance1;
			buttonTool20.SharedProps.Caption = "&Open Script ...";
			buttonTool20.SharedProps.Shortcut = System.Windows.Forms.Shortcut.CtrlO;
			appearance2.Image = 7;
			popupMenuTool11.SharedProps.AppearancesSmall.Appearance = appearance2;
			popupMenuTool11.SharedProps.Caption = "&Import";
			popupMenuTool11.Tools.AddRange(new Infragistics.Win.UltraWinToolbars.ToolBase[] {
            buttonTool21});
			appearance3.Image = 8;
			popupMenuTool12.SharedProps.AppearancesSmall.Appearance = appearance3;
			popupMenuTool12.SharedProps.Caption = "&Export";
			popupMenuTool12.Tools.AddRange(new Infragistics.Win.UltraWinToolbars.ToolBase[] {
            buttonTool22,
            buttonTool23,
            buttonTool24});
			appearance4.Image = 18;
			buttonTool25.SharedProps.AppearancesSmall.Appearance = appearance4;
			buttonTool25.SharedProps.Caption = "&Designations ...";
			appearance5.Image = 18;
			buttonTool26.SharedProps.AppearancesSmall.Appearance = appearance5;
			buttonTool26.SharedProps.Caption = "&Designations ...";
			appearance6.Image = 19;
			buttonTool27.SharedProps.AppearancesSmall.Appearance = appearance6;
			buttonTool27.SharedProps.Caption = "&Script Text ...";
			appearance7.Image = 16;
			buttonTool28.SharedProps.AppearancesSmall.Appearance = appearance7;
			buttonTool28.SharedProps.Caption = "Video (Text optional) ...";
			appearance8.Image = 12;
			buttonTool29.SharedProps.AppearancesSmall.Appearance = appearance8;
			buttonTool29.SharedProps.Caption = "&Save";
			buttonTool29.SharedProps.Shortcut = System.Windows.Forms.Shortcut.CtrlShiftS;
			appearance9.Image = 13;
			buttonTool30.SharedProps.AppearancesSmall.Appearance = appearance9;
			buttonTool30.SharedProps.Caption = "Save &As ...";
			appearance10.Image = 2;
			buttonTool31.SharedProps.AppearancesSmall.Appearance = appearance10;
			buttonTool31.SharedProps.Caption = "E&xit";
			buttonTool31.SharedProps.Shortcut = System.Windows.Forms.Shortcut.AltF4;
			appearance11.Image = 1;
			buttonTool32.SharedProps.AppearancesSmall.Appearance = appearance11;
			buttonTool32.SharedProps.Caption = "&About ...";
			popupMenuTool13.SharedProps.Caption = "&View";
			stateButtonTool1.MenuDisplayStyle = Infragistics.Win.UltraWinToolbars.StateButtonMenuDisplayStyle.DisplayCheckmark;
			stateButtonTool2.MenuDisplayStyle = Infragistics.Win.UltraWinToolbars.StateButtonMenuDisplayStyle.DisplayCheckmark;
			stateButtonTool3.MenuDisplayStyle = Infragistics.Win.UltraWinToolbars.StateButtonMenuDisplayStyle.DisplayCheckmark;
			stateButtonTool4.MenuDisplayStyle = Infragistics.Win.UltraWinToolbars.StateButtonMenuDisplayStyle.DisplayCheckmark;
			popupMenuTool13.Tools.AddRange(new Infragistics.Win.UltraWinToolbars.ToolBase[] {
            stateButtonTool1,
            stateButtonTool2,
            stateButtonTool3,
            stateButtonTool4});
			stateButtonTool5.MenuDisplayStyle = Infragistics.Win.UltraWinToolbars.StateButtonMenuDisplayStyle.DisplayCheckmark;
			stateButtonTool5.SharedProps.Caption = "&Transcript";
			stateButtonTool6.MenuDisplayStyle = Infragistics.Win.UltraWinToolbars.StateButtonMenuDisplayStyle.DisplayCheckmark;
			stateButtonTool6.SharedProps.Caption = "Script";
			stateButtonTool7.MenuDisplayStyle = Infragistics.Win.UltraWinToolbars.StateButtonMenuDisplayStyle.DisplayCheckmark;
			stateButtonTool7.SharedProps.Caption = "T&uner";
			stateButtonTool8.MenuDisplayStyle = Infragistics.Win.UltraWinToolbars.StateButtonMenuDisplayStyle.DisplayCheckmark;
			stateButtonTool8.SharedProps.Caption = "&Search Results";
			appearance12.Image = 11;
			buttonTool33.SharedProps.AppearancesSmall.Appearance = appearance12;
			buttonTool33.SharedProps.Caption = "&Preferences ...";
			appearance13.Image = 3;
			buttonTool34.SharedProps.AppearancesSmall.Appearance = appearance13;
			buttonTool34.SharedProps.Caption = "Recent1";
			buttonTool34.SharedProps.Shortcut = System.Windows.Forms.Shortcut.CtrlL;
			appearance14.Image = 3;
			buttonTool35.SharedProps.AppearancesSmall.Appearance = appearance14;
			buttonTool35.SharedProps.Caption = "Recent2";
			appearance15.Image = 3;
			buttonTool36.SharedProps.AppearancesSmall.Appearance = appearance15;
			buttonTool36.SharedProps.Caption = "Recent3";
			appearance16.Image = 3;
			buttonTool37.SharedProps.AppearancesSmall.Appearance = appearance16;
			buttonTool37.SharedProps.Caption = "Recent4";
			appearance17.Image = 3;
			buttonTool38.SharedProps.AppearancesSmall.Appearance = appearance17;
			buttonTool38.SharedProps.Caption = "Recent5";
			appearance18.Image = 10;
			buttonTool39.SharedProps.AppearancesSmall.Appearance = appearance18;
			buttonTool39.SharedProps.Caption = "&New Script ...";
			buttonTool39.SharedProps.Shortcut = System.Windows.Forms.Shortcut.CtrlN;
			appearance19.Image = 4;
			buttonTool40.SharedProps.AppearancesSmall.Appearance = appearance19;
			buttonTool40.SharedProps.Caption = "&Find Transcript Text ...";
			buttonTool40.SharedProps.Shortcut = System.Windows.Forms.Shortcut.CtrlF;
			appearance20.Image = 5;
			buttonTool41.SharedProps.AppearancesSmall.Appearance = appearance20;
			buttonTool41.SharedProps.Caption = "Find &Next";
			buttonTool41.SharedProps.Shortcut = System.Windows.Forms.Shortcut.F2;
			appearance21.Image = 14;
			buttonTool42.SharedProps.AppearancesSmall.Appearance = appearance21;
			buttonTool42.SharedProps.Caption = "Check For &Updates ...";
			appearance22.Image = 20;
			buttonTool43.SharedProps.AppearancesSmall.Appearance = appearance22;
			buttonTool43.SharedProps.Caption = "&Users Manual ...";
			appearance23.Image = 22;
			buttonTool44.SharedProps.AppearancesSmall.Appearance = appearance23;
			buttonTool44.SharedProps.Caption = "TrialMax &Online ...";
			appearance24.Image = 21;
			buttonTool45.SharedProps.AppearancesSmall.Appearance = appearance24;
			buttonTool45.SharedProps.Caption = "Contact &FTI ...";
			appearance25.Image = 23;
			buttonTool46.SharedProps.AppearancesSmall.Appearance = appearance25;
			buttonTool46.SharedProps.Caption = "&System Information ...";
			this.m_ctrlToolbarManager.Tools.AddRange(new Infragistics.Win.UltraWinToolbars.ToolBase[] {
            popupMenuTool5,
            popupMenuTool8,
            popupMenuTool9,
            popupMenuTool10,
            buttonTool20,
            popupMenuTool11,
            popupMenuTool12,
            buttonTool25,
            buttonTool26,
            buttonTool27,
            buttonTool28,
            buttonTool29,
            buttonTool30,
            buttonTool31,
            buttonTool32,
            popupMenuTool13,
            stateButtonTool5,
            stateButtonTool6,
            stateButtonTool7,
            stateButtonTool8,
            buttonTool33,
            buttonTool34,
            buttonTool35,
            buttonTool36,
            buttonTool37,
            buttonTool38,
            buttonTool39,
            buttonTool40,
            buttonTool41,
            buttonTool42,
            buttonTool43,
            buttonTool44,
            buttonTool45,
            buttonTool46});
			this.m_ctrlToolbarManager.BeforeToolDropdown += new Infragistics.Win.UltraWinToolbars.BeforeToolDropdownEventHandler(this.OnUltraBeforeDropDown);
			this.m_ctrlToolbarManager.ToolClick += new Infragistics.Win.UltraWinToolbars.ToolClickEventHandler(this.OnUltraToolClick);
			// 
			// m_ctrlMenulImages
			// 
			this.m_ctrlMenulImages.ImageStream = ((System.Windows.Forms.ImageListStreamer)(resources.GetObject("m_ctrlMenulImages.ImageStream")));
			this.m_ctrlMenulImages.TransparentColor = System.Drawing.Color.Magenta;
			this.m_ctrlMenulImages.Images.SetKeyName(0, "");
			this.m_ctrlMenulImages.Images.SetKeyName(1, "");
			this.m_ctrlMenulImages.Images.SetKeyName(2, "");
			this.m_ctrlMenulImages.Images.SetKeyName(3, "");
			this.m_ctrlMenulImages.Images.SetKeyName(4, "");
			this.m_ctrlMenulImages.Images.SetKeyName(5, "");
			this.m_ctrlMenulImages.Images.SetKeyName(6, "");
			this.m_ctrlMenulImages.Images.SetKeyName(7, "");
			this.m_ctrlMenulImages.Images.SetKeyName(8, "");
			this.m_ctrlMenulImages.Images.SetKeyName(9, "");
			this.m_ctrlMenulImages.Images.SetKeyName(10, "");
			this.m_ctrlMenulImages.Images.SetKeyName(11, "");
			this.m_ctrlMenulImages.Images.SetKeyName(12, "");
			this.m_ctrlMenulImages.Images.SetKeyName(13, "");
			this.m_ctrlMenulImages.Images.SetKeyName(14, "");
			this.m_ctrlMenulImages.Images.SetKeyName(15, "");
			this.m_ctrlMenulImages.Images.SetKeyName(16, "");
			this.m_ctrlMenulImages.Images.SetKeyName(17, "");
			this.m_ctrlMenulImages.Images.SetKeyName(18, "");
			this.m_ctrlMenulImages.Images.SetKeyName(19, "");
			this.m_ctrlMenulImages.Images.SetKeyName(20, "");
			this.m_ctrlMenulImages.Images.SetKeyName(21, "");
			this.m_ctrlMenulImages.Images.SetKeyName(22, "");
			this.m_ctrlMenulImages.Images.SetKeyName(23, "");
			// 
			// _CTmaxVideoForm_Toolbars_Dock_Area_Left
			// 
			this._CTmaxVideoForm_Toolbars_Dock_Area_Left.AccessibleRole = System.Windows.Forms.AccessibleRole.Grouping;
			this._CTmaxVideoForm_Toolbars_Dock_Area_Left.BackColor = System.Drawing.SystemColors.Control;
			this._CTmaxVideoForm_Toolbars_Dock_Area_Left.DockedPosition = Infragistics.Win.UltraWinToolbars.DockedPosition.Left;
			this._CTmaxVideoForm_Toolbars_Dock_Area_Left.ForeColor = System.Drawing.SystemColors.ControlText;
			this._CTmaxVideoForm_Toolbars_Dock_Area_Left.Location = new System.Drawing.Point(0, 21);
			this._CTmaxVideoForm_Toolbars_Dock_Area_Left.Name = "_CTmaxVideoForm_Toolbars_Dock_Area_Left";
			this._CTmaxVideoForm_Toolbars_Dock_Area_Left.Size = new System.Drawing.Size(0, 400);
			this._CTmaxVideoForm_Toolbars_Dock_Area_Left.ToolbarsManager = this.m_ctrlToolbarManager;
			// 
			// _CTmaxVideoForm_Toolbars_Dock_Area_Right
			// 
			this._CTmaxVideoForm_Toolbars_Dock_Area_Right.AccessibleRole = System.Windows.Forms.AccessibleRole.Grouping;
			this._CTmaxVideoForm_Toolbars_Dock_Area_Right.BackColor = System.Drawing.SystemColors.Control;
			this._CTmaxVideoForm_Toolbars_Dock_Area_Right.DockedPosition = Infragistics.Win.UltraWinToolbars.DockedPosition.Right;
			this._CTmaxVideoForm_Toolbars_Dock_Area_Right.ForeColor = System.Drawing.SystemColors.ControlText;
			this._CTmaxVideoForm_Toolbars_Dock_Area_Right.Location = new System.Drawing.Point(664, 21);
			this._CTmaxVideoForm_Toolbars_Dock_Area_Right.Name = "_CTmaxVideoForm_Toolbars_Dock_Area_Right";
			this._CTmaxVideoForm_Toolbars_Dock_Area_Right.Size = new System.Drawing.Size(0, 400);
			this._CTmaxVideoForm_Toolbars_Dock_Area_Right.ToolbarsManager = this.m_ctrlToolbarManager;
			// 
			// _CTmaxVideoForm_Toolbars_Dock_Area_Top
			// 
			this._CTmaxVideoForm_Toolbars_Dock_Area_Top.AccessibleRole = System.Windows.Forms.AccessibleRole.Grouping;
			this._CTmaxVideoForm_Toolbars_Dock_Area_Top.BackColor = System.Drawing.SystemColors.Control;
			this._CTmaxVideoForm_Toolbars_Dock_Area_Top.DockedPosition = Infragistics.Win.UltraWinToolbars.DockedPosition.Top;
			this._CTmaxVideoForm_Toolbars_Dock_Area_Top.ForeColor = System.Drawing.SystemColors.ControlText;
			this._CTmaxVideoForm_Toolbars_Dock_Area_Top.Location = new System.Drawing.Point(0, 0);
			this._CTmaxVideoForm_Toolbars_Dock_Area_Top.Name = "_CTmaxVideoForm_Toolbars_Dock_Area_Top";
			this._CTmaxVideoForm_Toolbars_Dock_Area_Top.Size = new System.Drawing.Size(664, 21);
			this._CTmaxVideoForm_Toolbars_Dock_Area_Top.ToolbarsManager = this.m_ctrlToolbarManager;
			// 
			// _CTmaxVideoForm_Toolbars_Dock_Area_Bottom
			// 
			this._CTmaxVideoForm_Toolbars_Dock_Area_Bottom.AccessibleRole = System.Windows.Forms.AccessibleRole.Grouping;
			this._CTmaxVideoForm_Toolbars_Dock_Area_Bottom.BackColor = System.Drawing.SystemColors.Control;
			this._CTmaxVideoForm_Toolbars_Dock_Area_Bottom.DockedPosition = Infragistics.Win.UltraWinToolbars.DockedPosition.Bottom;
			this._CTmaxVideoForm_Toolbars_Dock_Area_Bottom.ForeColor = System.Drawing.SystemColors.ControlText;
			this._CTmaxVideoForm_Toolbars_Dock_Area_Bottom.Location = new System.Drawing.Point(0, 421);
			this._CTmaxVideoForm_Toolbars_Dock_Area_Bottom.Name = "_CTmaxVideoForm_Toolbars_Dock_Area_Bottom";
			this._CTmaxVideoForm_Toolbars_Dock_Area_Bottom.Size = new System.Drawing.Size(664, 0);
			this._CTmaxVideoForm_Toolbars_Dock_Area_Bottom.ToolbarsManager = this.m_ctrlToolbarManager;
			// 
			// dockableWindow1
			// 
			this.dockableWindow1.Controls.Add(this.m_ctrlResultsView);
			this.dockableWindow1.Location = new System.Drawing.Point(2, 7);
			this.dockableWindow1.Name = "dockableWindow1";
			this.dockableWindow1.Owner = this.m_ctrlDockingManager;
			this.dockableWindow1.Size = new System.Drawing.Size(660, 112);
			this.dockableWindow1.TabIndex = 29;
			// 
			// dockableWindow4
			// 
			this.dockableWindow4.Controls.Add(this.m_ctrlTunerView);
			this.dockableWindow4.Location = new System.Drawing.Point(7, 2);
			this.dockableWindow4.Name = "dockableWindow4";
			this.dockableWindow4.Owner = this.m_ctrlDockingManager;
			this.dockableWindow4.Size = new System.Drawing.Size(284, 275);
			this.dockableWindow4.TabIndex = 30;
			// 
			// windowDockingArea4
			// 
			this.windowDockingArea4.Controls.Add(this.dockableWindow1);
			this.windowDockingArea4.Dock = System.Windows.Forms.DockStyle.Bottom;
			this.windowDockingArea4.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
			this.windowDockingArea4.Location = new System.Drawing.Point(0, 300);
			this.windowDockingArea4.Name = "windowDockingArea4";
			this.windowDockingArea4.Owner = this.m_ctrlDockingManager;
			this.windowDockingArea4.Size = new System.Drawing.Size(664, 121);
			this.windowDockingArea4.TabIndex = 0;
			// 
			// windowDockingArea3
			// 
			this.windowDockingArea3.Controls.Add(this.dockableWindow4);
			this.windowDockingArea3.Dock = System.Windows.Forms.DockStyle.Right;
			this.windowDockingArea3.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
			this.windowDockingArea3.Location = new System.Drawing.Point(371, 21);
			this.windowDockingArea3.Name = "windowDockingArea3";
			this.windowDockingArea3.Owner = this.m_ctrlDockingManager;
			this.windowDockingArea3.Size = new System.Drawing.Size(293, 279);
			this.windowDockingArea3.TabIndex = 20;
			// 
			// windowDockingArea2
			// 
			this.windowDockingArea2.Dock = System.Windows.Forms.DockStyle.Fill;
			this.windowDockingArea2.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
			this.windowDockingArea2.Location = new System.Drawing.Point(4, 4);
			this.windowDockingArea2.Name = "windowDockingArea2";
			this.windowDockingArea2.Owner = this.m_ctrlDockingManager;
			this.windowDockingArea2.Size = new System.Drawing.Size(107, 335);
			this.windowDockingArea2.TabIndex = 0;
			// 
			// windowDockingArea5
			// 
			this.windowDockingArea5.Controls.Add(this.dockableWindow2);
			this.windowDockingArea5.Dock = System.Windows.Forms.DockStyle.Left;
			this.windowDockingArea5.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
			this.windowDockingArea5.Location = new System.Drawing.Point(0, 21);
			this.windowDockingArea5.Name = "windowDockingArea5";
			this.windowDockingArea5.Owner = this.m_ctrlDockingManager;
			this.windowDockingArea5.Size = new System.Drawing.Size(266, 279);
			this.windowDockingArea5.TabIndex = 24;
			// 
			// dockableWindow2
			// 
			this.dockableWindow2.Controls.Add(this.m_ctrlTranscriptView);
			this.dockableWindow2.Location = new System.Drawing.Point(2, 2);
			this.dockableWindow2.Name = "dockableWindow2";
			this.dockableWindow2.Owner = this.m_ctrlDockingManager;
			this.dockableWindow2.Size = new System.Drawing.Size(257, 275);
			this.dockableWindow2.TabIndex = 31;
			// 
			// dockableWindow5
			// 
			this.dockableWindow5.Controls.Add(this.m_ctrlScriptView);
			this.dockableWindow5.Location = new System.Drawing.Point(2, 2);
			this.dockableWindow5.Name = "dockableWindow5";
			this.dockableWindow5.Owner = this.m_ctrlDockingManager;
			this.dockableWindow5.Size = new System.Drawing.Size(101, 275);
			this.dockableWindow5.TabIndex = 32;
			// 
			// windowDockingArea1
			// 
			this.windowDockingArea1.Dock = System.Windows.Forms.DockStyle.Fill;
			this.windowDockingArea1.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
			this.windowDockingArea1.Location = new System.Drawing.Point(371, 22);
			this.windowDockingArea1.Name = "windowDockingArea1";
			this.windowDockingArea1.Owner = this.m_ctrlDockingManager;
			this.windowDockingArea1.Size = new System.Drawing.Size(100, 100);
			this.windowDockingArea1.TabIndex = 31;
			// 
			// windowDockingArea6
			// 
			this.windowDockingArea6.Controls.Add(this.dockableWindow5);
			this.windowDockingArea6.Dock = System.Windows.Forms.DockStyle.Fill;
			this.windowDockingArea6.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
			this.windowDockingArea6.Location = new System.Drawing.Point(266, 21);
			this.windowDockingArea6.Name = "windowDockingArea6";
			this.windowDockingArea6.Owner = this.m_ctrlDockingManager;
			this.windowDockingArea6.Size = new System.Drawing.Size(105, 279);
			this.windowDockingArea6.TabIndex = 0;
			// 
			// windowDockingArea8
			// 
			this.windowDockingArea8.Dock = System.Windows.Forms.DockStyle.Fill;
			this.windowDockingArea8.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
			this.windowDockingArea8.Location = new System.Drawing.Point(0, 305);
			this.windowDockingArea8.Name = "windowDockingArea8";
			this.windowDockingArea8.Owner = this.m_ctrlDockingManager;
			this.windowDockingArea8.Size = new System.Drawing.Size(449, 138);
			this.windowDockingArea8.TabIndex = 32;
			// 
			// CTmaxVideoForm
			// 
			this.AutoScaleBaseSize = new System.Drawing.Size(5, 13);
			this.ClientSize = new System.Drawing.Size(664, 421);
			this.Controls.Add(this._CTmaxVideoFormAutoHideControl);
			this.Controls.Add(this._CTmaxVideoFormUnpinnedTabAreaLeft);
			this.Controls.Add(this._CTmaxVideoFormUnpinnedTabAreaTop);
			this.Controls.Add(this._CTmaxVideoFormUnpinnedTabAreaBottom);
			this.Controls.Add(this._CTmaxVideoFormUnpinnedTabAreaRight);
			this.Controls.Add(this.windowDockingArea6);
			this.Controls.Add(this.windowDockingArea5);
			this.Controls.Add(this.windowDockingArea3);
			this.Controls.Add(this.windowDockingArea4);
			this.Controls.Add(this._CTmaxVideoForm_Toolbars_Dock_Area_Left);
			this.Controls.Add(this._CTmaxVideoForm_Toolbars_Dock_Area_Right);
			this.Controls.Add(this._CTmaxVideoForm_Toolbars_Dock_Area_Top);
			this.Controls.Add(this._CTmaxVideoForm_Toolbars_Dock_Area_Bottom);
			this.Icon = ((System.Drawing.Icon)(resources.GetObject("$this.Icon")));
			this.Name = "CTmaxVideoForm";
			this.Text = "TrialMax Video Viewer";
			this.SizeChanged += new System.EventHandler(this.OnSizeChanged);
			this.LocationChanged += new System.EventHandler(this.OnLocationChanged);
			((System.ComponentModel.ISupportInitialize)(this.m_ctrlDockingManager)).EndInit();
			((System.ComponentModel.ISupportInitialize)(this.m_ctrlToolbarManager)).EndInit();
			this.dockableWindow1.ResumeLayout(false);
			this.dockableWindow4.ResumeLayout(false);
			this.windowDockingArea4.ResumeLayout(false);
			this.windowDockingArea3.ResumeLayout(false);
			this.windowDockingArea5.ResumeLayout(false);
			this.dockableWindow2.ResumeLayout(false);
			this.dockableWindow5.ResumeLayout(false);
			this.windowDockingArea6.ResumeLayout(false);
			this.ResumeLayout(false);

		}
		
		/// <summary>This message handles WM_INSTANCE_COMMAND_LINE messages sent to the window</summary>
		/// <param name="m">The message to be processed</param>
		private void OnWMInstanceCommandLine(ref Message m)
		{
			try
			{
				CTmaxCommandLine cmdLine = new CTmaxCommandLine(TmaxApplications.VideoViewer);
				
				cmdLine.Folder = m_strAppFolder;
				
				if(cmdLine.Open(false) == true)
				{
					//	Process the arguments
					ProcessCommandLine(cmdLine);
				}
				
			}
			catch
			{
			}

			m.Result = IntPtr.Zero;

		}// private void OnWMInstanceCommandLine(ref Message m)

		/// <summary>This method initializes the application's splash screen</summary>
		/// <param name="splashScreen">Splash screen created by application entry point</param>
		/// <returns>true if successful</returns>
		public bool InitializeSplashScreen(FTI.Trialmax.Forms.CFSplashScreen splashScreen)
		{
			bool bSuccessful = true;
		
			//	Save a reference to the splash screen
			if((m_ctrlSplashScreen = splashScreen) == null) return false;
			
			try
			{
				//	Assign the appropriate image
				SetSplashImage();
				
				//	Make the form visible 
				m_ctrlSplashScreen.Start();
		
				//	Set the initial message
				SetSplashMessage("Loading TrialMax Video Viewer");

				Thread splashThread = new Thread(new ThreadStart(this.SplashThreadProc));
				splashThread.Start();
			}
			catch
			{
				bSuccessful = false;
			}
			
			return bSuccessful;
		
		}// public bool InitializeSplashScreen(FTI.Trialmax.Forms.CFSplashScreen splashScreen)

		/// <summary>This method is called to shut down the splash screen</summary>
		private void TerminateSplashScreen()
		{
			try
			{
				if(m_ctrlSplashScreen != null)
				{
					if(m_ctrlSplashScreen.IsDisposed == false)
					{
						m_ctrlSplashScreen.Stop();
						m_ctrlSplashScreen.Dispose();
					}
					
					m_ctrlSplashScreen = null;
				
				}// if(m_ctrlSplashScreen != null)
				
			}
			catch
			{
			}
		
		}// private void TerminateSplashScreen()

		/// <summary>This method sets the image displayed in the splash screen</summary>
		/// <returns>true if successful</returns>
		public bool SetSplashImage()
		{
			Assembly	thisAssembly = null;
			Stream		imageStream = null;
			bool		bSuccessful = false;
			
			try
			{
				//	Get a reference to this assembly
				if((thisAssembly = System.Reflection.Assembly.GetExecutingAssembly()) != null)
				{
					//	Get the image from the resources bound to this assembly
					if((imageStream = thisAssembly.GetManifestResourceStream("TmaxVideo.Splash_TMVV.bmp")) != null)
					{ 
						m_ctrlSplashScreen.PictureBoxCtrl.Image = System.Drawing.Image.FromStream(imageStream);
						bSuccessful = true;
					}
					else
					{
//						string [] names = thisAssembly.GetManifestResourceNames();
//						if(names != null)
//							foreach(string O in names)
//								MessageBox.Show(O);
					}
					
				}// if((thisAssembly = System.Reflection.Assembly.GetExecutingAssembly()) != null)
				
			}
			catch
			{
				bSuccessful = false;
			}
			
			return bSuccessful;
		
		}// public bool InitializeSplashScreen(FTI.Trialmax.Forms.CFSplashScreen splashScreen)

		/// <summary>Thread procedure for updating splash box progress during initialization</summary>
		private void SplashThreadProc()
		{
			//	Loop as long as the splash screen is visible
			while((m_ctrlSplashScreen != null) && (m_ctrlSplashScreen.IsDisposed == false))
			{
				try
				{
					if(m_ctrlSplashScreen.Visible == false) break;

					//	Delay
					System.Threading.Thread.Sleep(50);
			
					//	Step the progress indicator
					m_ctrlSplashScreen.StepProgress();

				}
				catch
				{
					break;
				}
				
			}// while((m_ctrlSplashScreen != null) && (m_ctrlSplashScreen.IsDisposed == false))

		}// private void SplashThreadProc()
		
		/// <summary>Called to terminate the application</summary>
		private void Terminate()
		{
			//	Application is now terminating
			m_bTerminating = true;

			//	Save the current screen layout
			SaveScreenLayout();
			
			//	Notify the child views
			for(int i = 0; i < (int)TmaxVideoViews.MaxViews; i++)
			{
				if(m_aViews[i] != null)
				{
					try
					{
						Cursor.Current = Cursors.WaitCursor;
						
						try { m_aViews[i].Terminate(m_xmlAppOptions); }
						catch {}
						
						Cursor.Current = Cursors.Default;
					}
					catch
					{
					}

				}// if(m_aViews[i] != null)
			
			}// for(int i = 0; i < VIDEO_VIEW_MAX; i++)
			
			//	Terminate the connection to the registry
			if(m_tmaxRegistry != null)
			{
				m_tmaxRegistry.Terminate();
				m_tmaxRegistry = null;
			}
			
			//	Get the current position of the main window
			StoreWndPosition();
			
			//	Save the configuration information to file
			try { m_tmaxProductManager.Save(m_xmlAppOptions); } catch {}
			try { m_tmaxEncoder.Save(m_xmlAppOptions); } catch {} 
			try { m_tmaxAppOptions.Save(m_xmlAppOptions); } catch {}
			try { m_xmlAppOptions.Save(); } catch {}
		
			//	Terminate the connection to the registry
			if(m_tmaxRegistry != null)
			{
				m_tmaxRegistry.Terminate();
				m_tmaxRegistry = null;
			}
			
		}// private void Terminate()
		
		/// <summary>Called to save the current size and position of the main form window</summary>
		private void StoreWndPosition()
		{
			try
			{
				if((m_tmaxAppOptions != null) && (m_bInitialized == true))
				{
					//	Is this window maximized?
					m_tmaxAppOptions.Maximized = (this.WindowState == FormWindowState.Maximized);
					
					//	Save the size and position if not maximized
					if(m_tmaxAppOptions.Maximized == false)
					{
						if((this.Width > 0) && (this.Height > 0))
						{
							if(m_tmaxAppOptions.Left >= 0)
								m_tmaxAppOptions.Left = this.Left;
							else
								m_tmaxAppOptions.Left = 0;
								
							if(m_tmaxAppOptions.Top >= 0)
								m_tmaxAppOptions.Top = this.Top;
							else
								m_tmaxAppOptions.Top = 0;
								
							m_tmaxAppOptions.Width  = this.Width;
							m_tmaxAppOptions.Height = this.Height;
						
						}// if((this.Width > 0) && (this.Height > 0))
						
					}// if(m_tmaxAppOptions.Maximized == false)
			
				}// if(m_tmaxAppOptions != null)                                        
			}                                                                  
			catch(System.Exception Ex)
			{
				m_tmaxEventSource.FireDiagnostic(this, "StoreWndPosition", Ex);
			}
					
		}// private void StoreWndPosition()
		
		/// <summary>This method is called to set the initial size and position of the main form window</summary>
		private void SetInitialPosition()
		{
			try
			{
				if(m_tmaxAppOptions != null)
				{
					//	Make sure the coordinates are valid
					if((m_tmaxAppOptions.Width <= 0) || (m_tmaxAppOptions.Width > Screen.PrimaryScreen.Bounds.Width))
						m_tmaxAppOptions.Width = Screen.PrimaryScreen.Bounds.Width;
		
					if((m_tmaxAppOptions.Height <= 0) || (m_tmaxAppOptions.Height > Screen.PrimaryScreen.Bounds.Height))
						m_tmaxAppOptions.Height = Screen.PrimaryScreen.Bounds.Height;
		
					if((m_tmaxAppOptions.Left < 0) || (m_tmaxAppOptions.Left >= m_tmaxAppOptions.Width))
						m_tmaxAppOptions.Left = 0;
						
					if((m_tmaxAppOptions.Top < 0) || (m_tmaxAppOptions.Top >= m_tmaxAppOptions.Height))
						m_tmaxAppOptions.Top = 0;
						
					this.SetBounds(m_tmaxAppOptions.Left, m_tmaxAppOptions.Top,
						m_tmaxAppOptions.Width, m_tmaxAppOptions.Height);
					
					//	Is the form maximized?
					if(m_tmaxAppOptions.Maximized == true)
					{
						this.WindowState = FormWindowState.Maximized;
					}
					
				}// if(m_tmaxAppOptions != null)
				
			}// if(m_tmaxAppOptions != null)
			catch(System.Exception Ex)
			{
				m_tmaxEventSource.FireDiagnostic(this, "SetInitialPosition", Ex);
			}

		}// private void SetInitialPosition()

		/// <summary>This method will set the text displayed in the splash box</summary>
		/// <param name="strMessage">The message to be displayed</param>
		private void SetSplashMessage(string strMessage)
		{
			if((m_ctrlSplashScreen != null) && (m_ctrlSplashScreen.IsDisposed == false))
			{
				try 
				{ 
					//	Set the text
					m_ctrlSplashScreen.SetMessage(strMessage); 
				
					//	Step the progress indicator
					m_ctrlSplashScreen.StepProgress();
				
				}
				catch 
				{
				}
			}
			
		}// private void SetSplashMessage(string strMessage)
		
		/// <summary>This method initializes the application's docking manager</summary>
		/// <returns>true if successful</returns>
		public bool InitializeDockingManager()
		{
			bool bSuccessful = true;
			
			SetSplashMessage("Initializing docking manager");
		
			try
			{
				//	Load the last screen layout
				LoadScreenLayout();
			}
			catch(System.Exception Ex)
			{
				m_tmaxEventSource.FireError(this, "InitializeDockingManager", m_tmaxErrorBuilder.Message(ERROR_INITIALIZE_DOCKING_MANAGER_EX), Ex);
				bSuccessful = false;
			}
			
			return bSuccessful;
		
		}// public bool InitializeDockingManager()

		/// <summary>This method is called to initialize the application product manager</summary>
		private void InitializeProductManager()
		{
			SetSplashMessage("Initializing product manager");

			try
			{
				//	Initialize the product descriptor
				m_tmaxProductManager.HostApplication = TmaxComponents.VideoViewer;
				m_tmaxProductManager.EventSource.DiagnosticEvent += new FTI.Shared.Trialmax.DiagnosticEventHandler(this.OnDiagnostic);
				m_tmaxProductManager.EventSource.ErrorEvent += new FTI.Shared.Trialmax.ErrorEventHandler(this.OnError);
				m_tmaxProductManager.Registry = m_tmaxRegistry;
				m_tmaxProductManager.Load(m_xmlAppOptions);
				m_tmaxProductManager.FillComponents();
			}
			catch(System.Exception Ex)
			{
				m_tmaxEventSource.FireError(this, "InitializeProductManager", m_tmaxErrorBuilder.Message(ERROR_INITIALIZE_PRODUCT_MANAGER_EX), Ex);
			}

		}// private void InitializeProductManager()
		
		/// <summary>This method initializes the application's toolbar manager</summary>
		/// <returns>true if successful</returns>
		public bool InitializeToolbarManager()
		{
			bool bSuccessful = true;
			
			SetSplashMessage("Initializing toolbar manager");
		
			try
			{
				PopupMenuTool PopupMenu = (PopupMenuTool)m_ctrlToolbarManager.Tools["File"];

				PopupMenu.Settings.IsSideStripVisible							= DefaultableBoolean.True;
				PopupMenu.Settings.SideStripText								= "TrialMax Video Viewer";
				PopupMenu.Settings.SideStripAppearance.ForeColor				= Color.White;
				PopupMenu.Settings.SideStripAppearance.BackColor				= Color.WhiteSmoke;
				PopupMenu.Settings.SideStripAppearance.BackColor2				= Color.Navy;
				PopupMenu.Settings.SideStripAppearance.BackGradientStyle		= GradientStyle.Vertical;
				PopupMenu.Settings.SideStripAppearance.FontData.Bold			= DefaultableBoolean.True;
				PopupMenu.Settings.SideStripAppearance.FontData.Italic 			= DefaultableBoolean.True;
				PopupMenu.Settings.SideStripAppearance.FontData.SizeInPoints	= 10;
				PopupMenu.Settings.SideStripAppearance.FontData.Name			= "Arial";
				PopupMenu.Settings.SideStripAppearance.TextVAlign				= VAlign.Middle;
				
				//	Make sure the Recently Used selections are initialized just in case the
				//	user presses Control+L without having opened the File menu
				SetRecentlyUsed();
				
			}
			catch(System.Exception Ex)
			{
				m_tmaxEventSource.FireError(this, "InitializeToolbarManager", m_tmaxErrorBuilder.Message(ERROR_INITIALIZE_TOOLBAR_MANAGER_EX), Ex);
				bSuccessful = false;
			}
			
			return bSuccessful;
		
		}// public bool InitializeToolbarManager()

		/// <summary>This function is called to initialize the application's initialization and event log files</summary>
		/// <returns>True if successful</returns>
		private bool InitializeFiles()
		{
			string				strFileSpec = "";
			bool				bSuccessful = false;
			CTmaxVideoVersion	ver = new CTmaxVideoVersion();

			SetSplashMessage("Initializing configuration files");

			try
			{
				//	Store the path to the application folder
				m_strAppFolder = System.IO.Path.GetDirectoryName(Application.ExecutablePath);
				m_strAppFolder += "\\";
				
				//	Construct the path to the filename for new scripts
				m_strNewScriptFileSpec = m_strAppFolder + DEFAULT_NEW_SCRIPT_FILENAME;
				
				//	Construct the path to the application's configuration file
				m_strUpdateInstaller = m_strAppFolder + DEFAULT_UPDATE_INSTALLER_FILENAME;
				strFileSpec = m_strAppFolder + DEFAULT_APP_CONFIGURATION_FILE;
				
				//	Open the application's configuration file
				m_xmlAppOptions.XMLComments.Add("TrialMax Video Viewer Configuration File");
				m_xmlAppOptions.XMLComments.Add("Copyright FTI Consulting");
				m_xmlAppOptions.EventSource.ErrorEvent += new FTI.Shared.Trialmax.ErrorEventHandler(this.OnError);
				m_xmlAppOptions.EventSource.DiagnosticEvent += new FTI.Shared.Trialmax.DiagnosticEventHandler(this.OnDiagnostic);
				m_xmlAppOptions.Open(strFileSpec);
				
				//	Initialize the error log
				m_xmlErrors.Folder = m_strAppFolder;
				m_xmlErrors.Filename = "EL_tmaxVideo_";
				m_xmlErrors.AddDateToFilename = true;
				m_xmlErrors.Extension = ".xml";
				m_xmlErrors.Root = "Errors";
				m_xmlErrors.Comments.Add("TrialMax " + ver.Version + " Error Log");
				m_xmlErrors.EventSource.ErrorEvent += new FTI.Shared.Trialmax.ErrorEventHandler(this.OnError);
				
				//	Initialize the diagnostics log
				m_xmlDiagnostics.Folder = m_strAppFolder;
				m_xmlDiagnostics.Filename = "DL__tmaxVideo_";
				m_xmlDiagnostics.AddDateToFilename = true;
				m_xmlDiagnostics.Extension = ".xml";
				m_xmlDiagnostics.Root = "Diagnostics";
				m_xmlDiagnostics.Comments.Add("TrialMax " + ver.Version + " Diagnostics Log");
				m_xmlDiagnostics.EventSource.ErrorEvent += new FTI.Shared.Trialmax.ErrorEventHandler(this.OnError);
				
				//	All done
				bSuccessful = true;
				
			}
			catch(System.Exception Ex)
			{
				m_tmaxEventSource.FireError(this, "InitializeFiles", m_tmaxErrorBuilder.Message(ERROR_INITIALIZE_FILES_EX), Ex);
			}
			
			return bSuccessful;
			
		}// private bool InitializeFiles()

		/// <summary>This function is called to initialize the application's class members</summary>
		/// <returns>True if successful</returns>
		private bool InitializeMembers()
		{
			bool bSuccessful = false;
			
			SetSplashMessage("Initializing class members");

			try
			{
				//	Initialize the connection to the system registry
				SetSplashMessage("Initializing registry interface");
				m_tmaxRegistry.EventSource.DiagnosticEvent += new FTI.Shared.Trialmax.DiagnosticEventHandler(this.OnDiagnostic);
				m_tmaxRegistry.EventSource.ErrorEvent += new FTI.Shared.Trialmax.ErrorEventHandler(this.OnError);
				m_tmaxRegistry.Initialize();
			
				//	Initialize the application options
				m_tmaxAppOptions.Load(m_xmlAppOptions);
				
				//	Initialize the keyboard hook
				if(m_tmaxKeyboard != null)
				{
					m_tmaxKeyboard.TmaxKeyDown += new CTmaxKeyboard.TmaxKeyDownHandler(this.OnTmaxKeyDown);
					m_tmaxKeyboard.TmaxHotkey += new CTmaxKeyboard.TmaxHotkeyHandler(this.OnTmaxHotkey);
					m_tmaxEventSource.Attach(m_tmaxKeyboard.EventSource);
				}
				
				//	Initialize the media encoder
				SetSplashMessage("Initializing media encoder");
				if(m_tmaxEncoder.Initialize(null) == true)
					m_tmaxEncoder.Load(m_xmlAppOptions);
			
				//	Initialize the import manager
				SetSplashMessage("Initializing import manager");
				if(m_tmaxImportManager != null)
				{
					m_tmaxImportManager.AppOptions = m_tmaxAppOptions;
					m_tmaxEventSource.Attach(m_tmaxImportManager.EventSource);
				}
				
				//	Initialize the export manager
				SetSplashMessage("Initializing export manager");
				if(m_tmaxExportManager != null)
				{
					m_tmaxExportManager.AppOptions = m_tmaxAppOptions;
					m_tmaxExportManager.TmaxEncoder = m_tmaxEncoder;
					m_tmaxEventSource.Attach(m_tmaxExportManager.EventSource);
				}
				
				//	All done
				bSuccessful = true;
				
			}
			catch(System.Exception Ex)
			{
				m_tmaxEventSource.FireError(this, "InitializeMembers", m_tmaxErrorBuilder.Message(ERROR_INITIALIZE_MEMBERS_EX), Ex);
			}
			
			return bSuccessful;
			
		}// private bool InitializeMembers()

		/// <summary>This method is called to initialize each child pane</summary>
		/// <returns>True if successful</returns>
		private bool InitializeViews()
		{
			string	strView = "";
			bool	bSuccessful = false;
			
			try
			{
				//	Populate the array of child views
				m_aViews[(int)TmaxVideoViews.Transcript] = m_ctrlTranscriptView;
				m_aViews[(int)TmaxVideoViews.Tree]		 = m_ctrlScriptView;
				m_aViews[(int)TmaxVideoViews.Results]	 = m_ctrlResultsView;
				m_aViews[(int)TmaxVideoViews.Tuner]		 = m_ctrlTunerView;
				
				//	Set the pane properties
				for(int i = 0; i < (int)TmaxVideoViews.MaxViews; i++)
				{
					if(m_aViews[i] == null) continue;

					//	Just in case there's an error
					strView = m_aViews[i].ViewName;
						
					SetSplashMessage("Initializing " + strView);

					//	Set the view identifier
					m_aViews[i].AppId = (TmaxVideoViews)i;
					m_aViews[i].ViewName = GetViewName(m_aViews[i].AppId);
						
					//	Register the event handlers
					m_aViews[i].TmaxVideoCommandEvent += new FTI.Trialmax.TMVV.Tmvideo.TmaxVideoHandler(this.OnTmaxVideoCommand);
					m_aViews[i].EventSource.ErrorEvent += new FTI.Shared.Trialmax.ErrorEventHandler(this.OnError);
					m_aViews[i].EventSource.DiagnosticEvent += new FTI.Shared.Trialmax.DiagnosticEventHandler(this.OnDiagnostic);
					
					//	Set references to application data objects
					m_aViews[i].AppOptions	 = m_tmaxAppOptions;
						
					//	Perform runtime initialization
					m_aViews[i].Initialize(m_xmlAppOptions);

				}// for(int i = 0; i < VIDEO_VIEW_MAX; i++)
				
				bSuccessful = true;
				
			}
			catch(System.Exception Ex)
			{
				m_tmaxEventSource.FireError(this, "InitializeViews", m_tmaxErrorBuilder.Message(ERROR_INITIALIZE_VIEWS_EX, strView), Ex);
			}
			
			return bSuccessful;

		}// private bool InitializeViews()
		
		/// <summary>This method is called to initialize the versions pane with the information for all assemblies and ActiveX controls</summary>
		private void InitializeVersions()
		{
			CFPresentationOptions	presentationOptions = null;
			CTmaxComponent			tmaxComponent = null;
			CBaseVersion			baseVersion = null;		
			ArrayList				aAxVersions = null;
		
			Debug.Assert(m_tmaxDiagnostics != null);
			if(m_tmaxDiagnostics == null) return;
			Debug.Assert(m_tmaxDiagnostics.Versions != null);
			if(m_tmaxDiagnostics.Versions == null) return;
			
			SetSplashMessage("Initializing version descriptors");

			try
			{
				//	Add version descriptors for each of the .NET assemblies
				m_tmaxDiagnostics.Versions.Add(new CTmaxVideoVersion());
				m_tmaxDiagnostics.Versions.Add(new CTmvideoVersion());
				m_tmaxDiagnostics.Versions.Add(new CTmformsVersion());
				m_tmaxDiagnostics.Versions.Add(new FTI.Trialmax.Controls.CTmctrlsVersion());
				m_tmaxDiagnostics.Versions.Add(new FTI.Trialmax.ActiveX.CTmactxVersion());
				m_tmaxDiagnostics.Versions.Add(new CTmencodeVersion());
				m_tmaxDiagnostics.Versions.Add(new CTmsharedVersion());
				
				if((baseVersion = GetInstallerVersion()) != null)
					m_tmaxDiagnostics.Versions.Add(baseVersion);
					
				//	Add the Presentation/ActiveX versions
				try
				{
					if((presentationOptions = new CFPresentationOptions()) != null)
					{
						if((aAxVersions = presentationOptions.GetAxVersions(false)) != null)
						{
							foreach(CBaseVersion O in aAxVersions)
							{
								//	Is this control not registered?
								if(O.Major == 0)
								{
									//	Only add to the list if required by this application
									if((String.Compare(O.Title, "tmview", true) == 0) ||
									   (String.Compare(O.Title, "tmmovie", true) == 0) ||
									   (String.Compare(O.Title, "tmsetup", true) == 0))
									{
										m_tmaxDiagnostics.Versions.Add(O);
									}

								}
								else
								{
									m_tmaxDiagnostics.Versions.Add(O);
								}
								
							}// foreach(CBaseVersion O in aAxVersions)
						
						}// if((aAxVersions = presentationOptions.GetAxVersions(false)) != null)
							
						presentationOptions.Dispose();					
					}
					
				}
				catch
				{
				}
				
				//	Add a blank line
				m_tmaxDiagnostics.Versions.Add(new CBaseVersion());
				
				//	Add Windows Media Encoder
				if((m_tmaxProductManager != null) && (m_tmaxProductManager.Components != null))
				{
					if((tmaxComponent = m_tmaxProductManager.Components.Find(TmaxComponents.WMEncoder)) != null)
					{
						if((baseVersion = tmaxComponent.GetBaseVersion()) != null)
							m_tmaxDiagnostics.Versions.Add(baseVersion);
					}
				}
				
				//	Add version information for .NET Framework
				baseVersion = new CBaseVersion();
				baseVersion.Title = "NET Framework";				
				baseVersion.Major = System.Environment.Version.Major;
				baseVersion.Minor = System.Environment.Version.Minor;
				baseVersion.QEF = System.Environment.Version.Build;
				baseVersion.SetVersionText(false);
				m_tmaxDiagnostics.Versions.Add(baseVersion);
				
			}
			catch(System.Exception Ex)
			{
				m_tmaxEventSource.FireError(this, "InitializeVersions", m_tmaxErrorBuilder.Message(ERROR_INITIALIZE_VERSIONS_EX), Ex);
			}

		}// private void InitializeVersions()
		
		/// <summary>This method converts the specified text key to an application command enumeration</summary>
		/// <param name="strKey">The text identifier</param>
		/// <returns>The associated application command</returns>
		private AppCommands GetCommand(string strKey)
		{
			try
			{
				Array aCommands = Enum.GetValues(typeof(AppCommands));
				
				foreach(AppCommands O in aCommands)
				{
					if(O.ToString() == strKey)
						return O;
				}
				
			}
			catch
			{
			}
			
			return AppCommands.Invalid;
		
		}// private AppCommands GetCommand(string strKey)
		
		/// <summary>This method is called to determine if the specified command should be enabled</summary>
		/// <param name="eCommand">The command being checked</param>
		/// <returns>true to enable the command</returns>
		private bool GetCommandEnabled(AppCommands eCommand)
		{
			TmaxVideoViews	eView = TmaxVideoViews.MaxViews;
			string			strFileSpec = "";
			
			switch(eCommand)
			{
				case AppCommands.ToggleTranscript:
				case AppCommands.ToggleScript:
				case AppCommands.ToggleTuner:
				case AppCommands.ToggleResults:
				
					if((eView = GetViewFromCommand(eCommand)) != TmaxVideoViews.MaxViews)
						return (m_aViews[(int)eView] != null);
					else
						return false;	
				
				case AppCommands.SetPreferences:
				
					return (m_tmaxAppOptions != null);
					
				case AppCommands.SystemInformation:
				
					return (m_tmaxDiagnostics != null);
					
				case AppCommands.ImportDesignations:

					//	Must have a valid script
					if(m_xmlScript == null) return false;
					
					return true;
					
				case AppCommands.ExportDesignations:
				case AppCommands.ExportScript:
				case AppCommands.ExportVideo:
				
					//	Must have a valid script with designations
					if(m_xmlScript == null) return false;
					if(m_xmlScript.XmlDesignations == null) return false;
					if(m_xmlScript.XmlDesignations.Count == 0) return false;
					
					if(eCommand == AppCommands.ExportVideo)
					{
						if(m_tmaxEncoder == null) return false;
						if(m_tmaxEncoder.Profiles == null) return false;
						if(m_tmaxEncoder.Profiles.Count == 0) return false;
					}
					
					return true;
					
				case AppCommands.Save:
				case AppCommands.SaveAs:

					//	Must have a valid script
					if(m_xmlScript == null) return false;
					
					//	Has the script been saved before?
					if(m_xmlScript.Saved == true)
						return true;
					else
						return (eCommand == AppCommands.SaveAs);
					
				case AppCommands.Find:

					//	Must have a valid script
					if(m_xmlScript == null) return false;
					
					return true;
					
				case AppCommands.FindNext:
					
					if(m_ctrlResultsView == null) return false;
					if(m_ctrlResultsView.CanFindNext() == false) return false;
					
					return true;

				case AppCommands.CheckForUpdates:

					return ((m_tmaxProductManager != null) && (m_tmaxProductManager.Activated == true));
					
				case AppCommands.OnlineSite:

					if((m_tmaxProductManager == null) || (m_tmaxProductManager.OnlineSite.Length == 0))
						return false;

					return true;
					
				case AppCommands.UsersManual:

					//	Does the user's manual exist?
					strFileSpec = m_tmaxAppOptions.GetUsersManualFileSpec();
					if((strFileSpec.Length == 0) || (System.IO.File.Exists(strFileSpec) == false))
						return false;
						
					return true;
					
				case AppCommands.ContactFTI:

					//	Does the user's manual exist?
					strFileSpec = m_tmaxAppOptions.GetContactsFileSpec();
					if((strFileSpec.Length == 0) || (System.IO.File.Exists(strFileSpec) == false))
						return false;
						
					return true;
					
				case AppCommands.NewScript:
				case AppCommands.OpenScript:
				case AppCommands.Exit:
				default:
				
					return true;	//	Enabled by default
					
			}
			
		}// private bool GetCommandEnabled(AppCommands eCommand)
		
		/// <summary>This method will retrieve the application view identifier associated with the specified command</summary>
		/// <param name="eCommand">The enumerated application command</param>
		/// <returns>The view identifier if valid</returns>
		private TmaxVideoViews GetViewFromCommand(AppCommands eCommand)
		{
			TmaxVideoViews eView = TmaxVideoViews.MaxViews;
			
			//	Which command is associated with this tool?
			switch(eCommand)
			{
				case AppCommands.ToggleResults:
					
					eView = TmaxVideoViews.Results;
					break;
						
				case AppCommands.ToggleTranscript:    
					
					eView = TmaxVideoViews.Transcript;
					break;
						
				case AppCommands.ToggleScript:    
					
					eView = TmaxVideoViews.Tree;
					break;
						
				case AppCommands.ToggleTuner:    
					
					eView = TmaxVideoViews.Tuner;
					break;
					
			}// switch(eCommand)
		
			return eView;
			
		}// private TmaxVideoViews GetViewFromCommand(AppCommands eCommand)
		
		/// <summary>This function handles events fired by the toolbar manager when the user clicks on a toolbar button or menu item</summary>
		/// <param name="sender">Object firing the event</param>
		/// <param name="e">Infragistics event parameters</param>
		private void OnUltraToolClick(object sender, Infragistics.Win.UltraWinToolbars.ToolClickEventArgs e)
		{
			//	Is processing of this event disabled?
			if(m_bIgnoreToolClicks == true) return;
			
			AppCommands eCommand = AppCommands.Invalid;
			
			if((eCommand = GetCommand(e.Tool.Key)) != AppCommands.Invalid)
				OnAppCommand(eCommand);
		
		}// OnUltraToolClick(object sender, Infragistics.Win.UltraWinToolbars.ToolClickEventArgs e)

		/// <summary>This function handles events fired by the toolbar manager when it is about to display a menu</summary>
		/// <param name="sender">The object firing the event</param>
		/// <param name="e">Infragistics event parameters</param>
		private void OnUltraBeforeDropDown(object sender, Infragistics.Win.UltraWinToolbars.BeforeToolDropdownEventArgs e)
		{
			PopupMenuTool	popupMenu = null;
			AppCommands		eCommand = AppCommands.Invalid;
			
			try
			{
				popupMenu = (PopupMenuTool)(e.Tool);
						
				//	Iterate the tool collection for this submenu
				foreach(ToolBase O in popupMenu.Tools)
				{
					//	Get the command associated with this tool
					if((eCommand = GetCommand(O.Key)) != AppCommands.Invalid)
					{
						//	Should this tool be enabled?
						O.SharedProps.Enabled = GetCommandEnabled(eCommand);
					
						m_bIgnoreToolClicks = true;
						SetUltraCheckedState(O, eCommand);
						m_bIgnoreToolClicks = false;
					}
						
				}// foreach(ToolBase O in popupMenu.Tools)
						
			}
			catch
			{
					
			}
					
			//	Have to do some additional work for the File menu
			if(e.Tool.Key == GetUltraMenuKey(AppMenus.File))
				SetRecentlyUsed();
		
		}// private void OnUltraBeforeDropDown(object sender, Infragistics.Win.UltraWinToolbars.BeforeToolDropdownEventArgs e)

		/// <summary>This function handles events fired by the docking manager when it is about to activate a pane</summary>
		/// <param name="sender">The object firing the event</param>
		/// <param name="e">Infragistics event parameters</param>
		private void OnUltraPaneActivate(object sender, Infragistics.Win.UltraWinDock.ControlPaneEventArgs e)
		{
			SetViewStates();
		}

		/// <summary>This function handles events fired by the docking manager when it is about to deactivate a pane</summary>
		/// <param name="sender">The object firing the event</param>
		/// <param name="e">Infragistics event parameters</param>
		private void OnUltraPaneDectivate(object sender, Infragistics.Win.UltraWinDock.ControlPaneEventArgs e)
		{
			SetViewStates();
		}

		/// <summary>This function handles events fired by the docking manager when the user clicks the close button on a pane</summary>
		/// <param name="sender">The object firing the event</param>
		/// <param name="e">Infragistics event parameters</param>
		private void OnUltraPaneButtonClick(object sender, Infragistics.Win.UltraWinDock.PaneButtonEventArgs e)
		{
			if(e.Pane == m_ctrlDockingManager.ActivePane)
			{
				e.Pane.DockAreaPane.Activate();
			}
			SetViewStates();
		
		}// private void OnUltraPaneButtonClick(object sender, Infragistics.Win.UltraWinDock.PaneButtonEventArgs e)

		/// <summary>This method handles all Diagnostic events received by the application</summary>
		/// <param name="objSender">The object sending the event</param>
		/// <param name="Args">Diagnostic event arguments</param>
		private void OnDiagnostic(object objSender, CTmaxDiagnosticArgs Args)
		{
			if(m_tmaxAppOptions.EnableDiagnostics == true)
			{
				//	Add to the diagnostics form or object
				if((m_tmaxDiagnosticsForm != null) && (m_tmaxDiagnosticsForm.IsDisposed == false))
					m_tmaxDiagnosticsForm.Add(Args);
				else if(m_tmaxDiagnostics != null)
					m_tmaxDiagnostics.Add(Args);
				
				//	Add to the log file
				if(m_xmlDiagnostics != null && (m_tmaxAppOptions.LogDiagnostics == true))
					m_xmlDiagnostics.Write(Args);
			}

		}// private void OnDiagnostic(object objSender, CTmaxDiagnosticArgs Args)
		
		/// <summary>This method handles all Error events received by the application</summary>
		/// <param name="objSender">The object sending the event</param>
		/// <param name="Args">Error event arguments</param>
		private void OnError(object objSender, CTmaxErrorArgs Args)
		{
			FTI.Trialmax.Forms.CFErrorMessage cfErrorMessage = null;
			
			//	Should we display the popup?
			if((m_bTerminating == false) && (Args.Show == true) && (m_tmaxAppOptions.ShowErrorMessages == true))
			{
				//	Make sure the splash screen is removed
				TerminateSplashScreen();
				
				User.MessageBeep(User.MB_ICONEXCLAMATION);
				cfErrorMessage = new FTI.Trialmax.Forms.CFErrorMessage();
				cfErrorMessage.SetControls(Args);
				cfErrorMessage.ShowDialog(this);
			}
			
			//	Add to the diagnostics form or object
			if(m_bTerminating == false)
			{
				if((m_tmaxDiagnosticsForm != null) && (m_tmaxDiagnosticsForm.IsDisposed == false))
					m_tmaxDiagnosticsForm.Add(Args);
				else if(m_tmaxDiagnostics != null)
					m_tmaxDiagnostics.Add(Args);
				
			}// if(m_bTerminating == false)
				
			//	Add to the error log as long as the log did not generate the error
			if((m_xmlErrors != null) && (object.ReferenceEquals(m_xmlErrors, objSender) == false))
				m_xmlErrors.Write(Args);
			
		}// private void OnError(object objSender, CTmaxErrorArgs Args)
		
		/// <summary>This method is called to determine if the control can be seen by the user</summary>
		/// <param name="control">The control to be checked</param>
		/// <returns>true if the control is visible on the screen</returns>
		/// <remarks>This method is provided by Infragistics tech support</remarks>
		private bool IsUltraVisible(Control control)
		{
			if(control == null) return false;
			if(control.IsHandleCreated == false) return false;
			if(control.Visible == false) return false;
			
			try
			{
				Rectangle rcScreen = control.RectangleToScreen(control.ClientRectangle);
				return IsUltraVisible(control, rcScreen);
			}
			catch
			{
				//	Assume visible
				return true;
			}
		
		}// private bool IsUltraVisible(Control control)
		
		/// <summary>This method is called to determine if the rectangle owned by the specified control is visible within it's parent's client rectangle</summary>
		/// <param name="control">The control associated with the specified rectangle</param>
		/// <param name="rcScreen">The screen rectangle to be checked</param>
		/// <returns>true if the complete or partial rectangle is visbile</returns>
		/// <remarks>This method is provided by Infragistics tech support</remarks>
		private bool IsUltraVisible(Control control, Rectangle rcScreen)
		{
			Control parent = null;
			
			if(control == null) return false;
			if(control.IsHandleCreated == false) return false;
			if(control.Visible == false) return false;
			
			//	Have we walked to the top of the parent chain?
			if((parent = control.Parent) == null) return true;
			
			//	The parent must be visible for the control to be visible
			if(parent.IsHandleCreated == false) return false;
			if(parent.Visible == false) return false;
			
			//	Get the screen coordinates for the parent's rectangle
			Rectangle rcParent = parent.RectangleToScreen(parent.ClientRectangle);
			
			//	Eliminate any portion of the specified rectangle that is outside
			//	the parent's screen rectangle
			rcScreen.Intersect(rcParent);
			
			//	Not visible to end user if nothing visible inside the parent
			if(rcScreen.Size.IsEmpty == true) return false;
			
			//	Make sure not hidden by a sibling control
			for(int i = 0; i < parent.Controls.Count; i++)
			{
				//	The collection is maintained based on Z order with 0 on top
				Control sibling = parent.Controls[i];
				
				if(ReferenceEquals(sibling, control) == true)
					break;
					
				if(sibling.IsHandleCreated == false) continue;
				if(sibling.Visible == false) continue;
					
				Rectangle rcSibling = sibling.RectangleToScreen(sibling.ClientRectangle);
				
				//	Adjust the caller's rectangle if the sibling clips it
				if(rcSibling.IntersectsWith(rcScreen) == true)
					rcScreen.Intersect(rcSibling);
					
				if(rcScreen.Size.IsEmpty == true)
					return false;
			
			}// for(int i = 0; i < control.Controls.Count; i++)
			
			//	Walk the parent chain
			return IsUltraVisible(parent, rcScreen);

		}// private bool IsUltraVisible(Control control, Rectangle rcScreen)
		
		/// <summary>This method will populate the local error builder's format string collection</summary>
		private void SetErrorStrings()
		{
			ArrayList aStrings = null;
			
			if(m_tmaxErrorBuilder != null)
				aStrings = m_tmaxErrorBuilder.FormatStrings;
		
			if(aStrings == null) return;
				
			//	The format strings must be added in the order in which they are defined
			aStrings.Add("An exception was raised while initializing the application's toolbar manager.");
			aStrings.Add("An exception was raised while initializing the application's docking manager.");
			aStrings.Add("An exception was raised while initializing the application's configuration files.");
			aStrings.Add("An exception was raised while initializing the application's class members.");
			aStrings.Add("An exception was raised while initializing the application's child views. View = %1");
			
			aStrings.Add("An exception was raised while toggling the child view. View Id = %1");
			aStrings.Add("An exception was raised while setting the visibility of the docking pane: View Id = %1  View Name = %2");
			aStrings.Add("Unable to locate the docking pane bound to the specified view: View Id = %1  View Name = %2");
			aStrings.Add("Unable to locate the XML script / deposition: filename = %1");
			aStrings.Add("An exception was raised while attempting to open the XML script / deposition: filename = %1");
			
			aStrings.Add("An exception was raised while attempting to open the recently used file");
			aStrings.Add("An exception was raised while attempting to set the application preferences.");
			aStrings.Add("An exception was raised while attempting to activate the specified designation.");
			aStrings.Add("An exception was raised while attempting to add the designations");
			aStrings.Add("An exception was raised while attempting to delete the designations");

			aStrings.Add("An exception was raised while attempting to save the active script: Filename = %1");
			aStrings.Add("An exception was raised while attempting to activate the XML script: Filename = %1");
			aStrings.Add("An exception was raised while attempting to get the path for the XML script.");
			aStrings.Add("An exception was raised while attempting to save the XML script as a new file.");
			aStrings.Add("An exception was raised while attempting to create the new script.");

			aStrings.Add("An exception was raised while attempting to process the update event.");
			aStrings.Add("An exception was raised while attempting to edit the active designation.");
			aStrings.Add("An exception was raised while attempting to handle the request to set the application preferences.");
			aStrings.Add("An exception was raised while attempting to search the transcript text.");
			aStrings.Add("An exception was raised while attempting to search the selected objects.");

			aStrings.Add("An exception was raised while attempting to load the search result. View = %1");
			aStrings.Add("An exception was raised while attempting to load the next search result.");
			aStrings.Add("An exception was raised while attempting to check for updates.");
			aStrings.Add("An exception was raised while attempting to initialize the TrialMax product manager.");
			aStrings.Add("An exception was raised while attempting to launch the TrialMax update installer application.");
		
			aStrings.Add("An exception was raised while attempting to get the version of the TrialMax update installer application. Filename = %1");
			aStrings.Add("An exception was raised while processing the new designations.");
			aStrings.Add("An exception was raised while attempting to view the system information.");
			aStrings.Add("An exception was raised while attempting to initialize the version descriptors.");
			aStrings.Add("Unable to open %1. This script has not been formatted for use with TrialMax Video Viewer.");

			aStrings.Add("An exception was raised while attempting to process the application command line: %1");
			aStrings.Add("An exception was raised while attempting to create a new script using the specified source file: %1");

		}// private void SetErrorStrings()
		
		/// <summary>This method is called to open the specified file</summary>
		/// <param name="strFileSpec">The fully qualified path to the file</param>
		///	<returns>true if successful</returns>
		private bool Open(string strFileSpec)
		{
			bool		bSuccessful = false;
			CXmlScript	xmlScript = null;
			string		strMsg = "";
			
			//	Make sure the file exists
			if(System.IO.File.Exists(strFileSpec) == false)
			{
				m_tmaxEventSource.FireError(this, "Open", m_tmaxErrorBuilder.Message(ERROR_OPEN_NOT_FOUND, strFileSpec));
				return false;
			}
			
			try
			{
				xmlScript = new CXmlScript();
				m_tmaxEventSource.Attach(xmlScript.EventSource);
				
				//	Open and parse the XML file
				if(xmlScript.FastFill(strFileSpec) == false)
				{
					xmlScript = null;
					return false;
				}
				else
				{
					if((xmlScript.XmlScriptFormat == TmaxXmlScriptFormats.VideoViewer) ||
					   (xmlScript.XmlScriptFormat == TmaxXmlScriptFormats.Unknown))
					{
						xmlScript.Saved = true;
						xmlScript.Modified = false;
					}
					else
					{
						strMsg = m_tmaxErrorBuilder.Message(ERROR_INVALID_FILE_FORMAT, strFileSpec);
						MessageBox.Show(strMsg, "Error", MessageBoxButtons.OK, MessageBoxIcon.Warning);
						
						xmlScript = null;
						return false;
					}
				
				}
				
				//	Make this the active script
				bSuccessful = Activate(xmlScript);
				
				//	Select the first designation if successful
				if(bSuccessful == true)
				{
					if((xmlScript.XmlDesignations != null) && (xmlScript.XmlDesignations.Count > 0))
					{
						try 
						{ 
							((CTmaxVideoTree)(m_aViews[(int)TmaxVideoViews.Tree])).SetSelection(xmlScript.XmlDesignations[0], true); 
						}
						catch(System.Exception Ex)
						{ 
							m_tmaxEventSource.FireDiagnostic(this, "Open", Ex);
						}
					
					}
					
				}// if(bSuccessful == true)
				
			}
			catch(System.Exception Ex)
			{
				m_tmaxEventSource.FireError(this, "Open", m_tmaxErrorBuilder.Message(ERROR_OPEN_EX, strFileSpec), Ex);
			}
			
			return bSuccessful;
			
		}// private bool Open(string strFileSpec)
		
		/// <summary>This method is called to activate the specified script</summary>
		/// <param name="xmlScript">The XML script to be activated</param>
		///	<returns>true if successful</returns>
		private bool Activate(CXmlScript xmlScript)
		{
			bool bSuccessful = false;
			
			try
			{
				//	Save the reference
				Debug.Assert(xmlScript != null);
				m_xmlScript = xmlScript;

				//	Notify each of the child views
				for(int i = 0; i < (int)TmaxVideoViews.MaxViews; i++)
				{
					if(m_aViews[i] != null)
						m_aViews[i].OnAppOpened(m_xmlScript);
				}
				
				//	Update the application options
				if(m_tmaxAppOptions != null)
				{
					if(m_xmlScript.SourceFileSpec.Length > 0)
						m_tmaxAppOptions.LastDeposition = m_xmlScript.SourceFileSpec;
					
					if(m_xmlScript.Saved == true)
					{
						m_tmaxAppOptions.LastScript = m_xmlScript.FileSpec;
						m_tmaxAppOptions.AddRecentlyUsed(m_xmlScript.FileSpec);
					
					}
				}
				
				bSuccessful = true;
		
			}
			catch(System.Exception Ex)
			{
				m_tmaxEventSource.FireError(this, "Activate", m_tmaxErrorBuilder.Message(ERROR_ACTIVATE_EX, m_xmlScript != null ? m_xmlScript.FileSpec : "NULL"), Ex);
			}
			
			//	Make sure the view captions are correct
			SetCaptions();
			
			return bSuccessful;
			
		}// private bool Activate(CXmlScript xmlScript)
		
		/// <summary>This method is called to get the path to use to save the active script</summary>
		///	<param name="strInitial">File path used to initialize the form</param>
		///	<returns>The path to be used to save/create the script</returns>
		private string GetSaveFileSpec(string strInitial)
		{
			string			strFileSpec = "";
			SaveFileDialog	saveFile = null;
			try
			{
				saveFile = new System.Windows.Forms.SaveFileDialog();

				//	Initialize the file selection dialog
				saveFile.OverwritePrompt = true;
				saveFile.CheckFileExists = false;
				saveFile.CheckPathExists = false;
				saveFile.CreatePrompt = false;
				saveFile.DefaultExt = CXmlScript.GetExtension(TmaxXmlScriptFormats.VideoViewer);
				saveFile.AddExtension = true;
				saveFile.Title = "Save As ...";
				saveFile.Filter = CXmlScript.GetFilter(TmaxXmlScriptFormats.VideoViewer, false);
				saveFile.FilterIndex = 1;
			
				//	Set the initial filename if provided
				if(strInitial.Length > 0)
				{
					saveFile.FileName = strInitial;
				}
				else
				{
					//	Set the initial directory
					if(m_tmaxAppOptions.LastScript.Length > 0)
						saveFile.InitialDirectory = System.IO.Path.GetDirectoryName(m_tmaxAppOptions.LastScript);
					else
						saveFile.InitialDirectory = m_strAppFolder;
				}
				
				//	Open the dialog box
				if(saveFile.ShowDialog() == DialogResult.OK) 
				{
					strFileSpec = saveFile.FileName;
				}
		
			}
			catch(System.Exception Ex)
			{
				m_tmaxEventSource.FireError(this, "GetSaveFileSpec", m_tmaxErrorBuilder.Message(ERROR_GET_SAVE_FILESPEC_EX), Ex);
			}
			
			return strFileSpec;
			
		}// private string GetSaveFileSpec()
		
		/// <summary>This method is called to set the view captions</summary>
		private void SetCaptions()
		{
			string	strScript = "";
			string	strDuration = "";
			string	strTranscript = "";
			
			try
			{
				if(m_xmlScript != null)
				{
					//	Has this script been saved?
					if(m_xmlScript.Saved == true)
					{
						strScript = System.IO.Path.GetFileNameWithoutExtension(m_xmlScript.FileSpec);
						if(m_xmlScript.Name.Length > 0)
							strScript += (" " + m_xmlScript.Name);
					}
					else
					{
						if(m_xmlScript.Name.Length > 0)
							strScript = m_xmlScript.Name;
						else
							strScript = "Unsaved";
					}
						
					strDuration = m_ctrlScriptView.GetDurationAsString();
					if(strDuration.Length > 0)
						strScript += (" - " + strDuration);
						
					if(m_xmlScript.XmlDeposition != null)
					{
						if(m_xmlScript.XmlDeposition.Name.Length > 0)
							strTranscript = m_xmlScript.XmlDeposition.Name;
						else if(m_xmlScript.XmlDeposition.Deponent.Length > 0)
							strTranscript = m_xmlScript.XmlDeposition.Deponent;
						else
							strTranscript = m_xmlScript.XmlDeposition.Filename;
					}
					else
					{
						strTranscript = "Transcript";
					}
					
					if(m_xmlScript.Saved == true)
						this.Text = ("TrialMax Video Viewer - " + m_xmlScript.FileSpec.ToLower());
					else
						this.Text = "TrialMax Video Viewer";
				}
				else
				{
					strScript = "Script";
					strTranscript = "Transcript";
					this.Text = "TrialMax Video Viewer";
				}
				
			}
			catch(System.Exception Ex)
			{
				m_tmaxEventSource.FireDiagnostic(this, "SetCaptions", Ex);
			}
			
			if(GetUltraPane(TmaxVideoViews.Tree) != null)
				GetUltraPane(TmaxVideoViews.Tree).Text = strScript;
			if(GetUltraPane(TmaxVideoViews.Transcript) != null)
				GetUltraPane(TmaxVideoViews.Transcript).Text = strTranscript;
			
		}// private void SetCaptions()
		
		/// <summary>This function is called to set the recently used selections in the file menu</summary>
		private void SetRecentlyUsed()
		{
			ToolBase	Tool = null;
			string		strKey = "";
	
			for(int i = 0; i < m_tmaxAppOptions.MaxRecentlyUsed; i++)
			{
				//	Construct the key to the menu tool
				strKey = ("Recent" + ((i + 1).ToString()));

				//	Get the menu tool
				if((Tool = GetUltraTool(strKey)) != null)
				{
					//	Do we have a valid folder path?
					if((i < m_tmaxAppOptions.RecentlyUsed.Count) && 
						(m_tmaxAppOptions.RecentlyUsed[i].ToString().Length > 0))
					{
						Tool.SharedProps.Caption = m_tmaxAppOptions.RecentlyUsed[i].ToString();
						Tool.SharedProps.Visible = true;
					}
					else
					{
						Tool.SharedProps.Caption = "Not available";
						Tool.SharedProps.Visible = false;
					}
				}
				else
				{
					//	Out of menu tools
					break;
				}
				
			}// for(int i = 0; i < m_tmaxAppOptions.MaxRecentlyUsed; i++)
			
		}// private void SetRecentlyUsed()
		
		/// <summary>Handles SizeChanged events fired by the main form window</summary>
		/// <param name="sender">The object firing the event</param>
		/// <param name="e">The system event arguments</param>
		private void OnSizeChanged(object sender, System.EventArgs e)
		{
			//	Update the window sized stored in the application options
			StoreWndPosition(); 
		
		}// private void OnSizeChanged(object sender, System.EventArgs e)

		/// <summary>Handles LocationChanged events fired by the main form window</summary>
		/// <param name="sender">The object firing the event</param>
		/// <param name="e">The system event arguments</param>
		private void OnLocationChanged(object sender, System.EventArgs e)
		{
			//	Update the window sized stored in the application options
			StoreWndPosition(); 
		
		}// private void OnLocationChanged(object sender, System.EventArgs e)

		/// <summary>This method handles all command events fired by the child views</summary>
		/// <param name="objSender">The object sending the event</param>
		/// <param name="Args">Command event arguments</param>
		private void OnTmaxVideoCommand(object objSender, FTI.Trialmax.TMVV.Tmvideo.CTmaxVideoArgs Args)
		{
			try
			{
				switch(Args.Command)
				{
					case TmaxVideoCommands.Activate:
						
						OnTmaxVideoActivate(objSender, Args);
						break;
				
					case TmaxVideoCommands.Add:
						
						OnTmaxVideoAdd(objSender, Args);
						break;
				
					case TmaxVideoCommands.Delete:
						
						OnTmaxVideoDelete(objSender, Args);
						break;
				
					case TmaxVideoCommands.Reorder:
						
						OnTmaxVideoReorder(objSender, Args);
						break;
				
					case TmaxVideoCommands.Update:
						
						OnTmaxVideoUpdate(objSender, Args);
						break;
				
					case TmaxVideoCommands.EditDesignation:
						
						OnTmaxVideoEditDesignation(objSender, Args);
						break;
				
					case TmaxVideoCommands.SetPreferences:
						
						OnTmaxVideoSetPreferences(objSender, Args);
						break;
				
					case TmaxVideoCommands.Find:
						
						OnTmaxVideoFind(objSender, Args);
						break;
				
					case TmaxVideoCommands.LoadResult:
						
						OnTmaxVideoLoadResult(objSender, Args);
						break;
				
					case TmaxVideoCommands.Import:
						
						OnTmaxVideoImport(objSender, Args);
						break;
				
					case TmaxVideoCommands.Export:
						
						OnTmaxVideoExport(objSender, Args);
						break;
				
					default:
					
						Debug.Assert(false, "Unhandled command identifier: " + Args.Command.ToString());
						break;
						
				}// switch(Args.Command)
			
			}
			catch(System.Exception Ex)
			{
				m_tmaxEventSource.FireDiagnostic(this, "OnTmaxVideoCommand", Ex);
			}
			
		}// private void OnTmaxVideoCommand(object objSender, FTI.Trialmax.TMVV.Tmvideo.CTmaxVideoArgs Args)
		
		/// <summary>This method handles all Activate command events fired by the child views</summary>
		/// <param name="objSender">The object sending the event</param>
		/// <param name="Args">Command event arguments</param>
		private void OnTmaxVideoActivate(object objSender, FTI.Trialmax.TMVV.Tmvideo.CTmaxVideoArgs Args)
		{
			CTmaxParameter	tmaxParameter = null;
			bool			bSynchronize = false;
			
			Debug.Assert(Args.Items != null);
			Debug.Assert(Args.Items.Count > 0);
			
			try
			{
				if((Args.Items != null) && (Args.Items.Count > 0))
				{
					//	Get the optional parameters
					if((tmaxParameter = Args.GetParameter(TmaxCommandParameters.SyncMediaTree)) != null)
						bSynchronize = tmaxParameter.AsBoolean();

					//	Should we force the tree to process this notification?
					if(bSynchronize == true)
					{
						if(m_aViews[(int)TmaxVideoViews.Tree] != null)
						{
							((CTmaxVideoTree)(m_aViews[(int)TmaxVideoViews.Tree])).SetSelection(Args.Items[0], false);
						}

					}

					//	Perform the normal notification
					for(int i = 0; i < (int)TmaxVideoViews.MaxViews; i++)
					{
						if(m_aViews[i] != null)
							m_aViews[i].OnTmaxVideoActivate(Args.Items[0], Args.View);
					
					}// for(int i = 0; i < VIDEO_VIEW_MAX; i++)
					
				}// if((Args.Items != null) && (Args.Items.Count > 0))
			
			}
			catch(System.Exception Ex)
			{
				m_tmaxEventSource.FireError(this, "OnTmaxVideoActivate", m_tmaxErrorBuilder.Message(ERROR_ON_TMAX_VIDEO_ACTIVATE_EX), Ex);
			}

		}// private void OnTmaxVideoActivate(object objSender, FTI.Trialmax.TMVV.Tmvideo.CTmaxVideoArgs Args)
		
		/// <summary>This method handles all Add command events fired by the child views</summary>
		/// <param name="objSender">The object sending the event</param>
		/// <param name="Args">Command event arguments</param>
		private void OnTmaxVideoAdd(object objSender, FTI.Trialmax.TMVV.Tmvideo.CTmaxVideoArgs Args)
		{
			CXmlDesignations	xmlAdd = null;
			CXmlDesignation		xmlLocation = null;
			CTmaxParameter		tmaxParameter = null;
			bool				bBefore = false;
			bool				bActivate = false;
			
			Debug.Assert(Args.Items != null);
			Debug.Assert(Args.Items.Count == 1);
			if(Args.Items == null) return;
			if(Args.Items.Count == 0) return;
			
			//	Must have an active script
			Debug.Assert(m_xmlScript != null);
			if(m_xmlScript == null) return;
			
			try
			{
				//	Get the collection of designations to be added
				if(Args.Items[0].SourceItems != null)
				{
					//	Allocate the collection for the designations to be added
					xmlAdd = new CXmlDesignations();
					
					foreach(CTmaxItem O in Args.Items[0].SourceItems)
					{
						if(O.XmlDesignation != null)
							xmlAdd.Add(O.XmlDesignation);
					}
					
				}// if(Args.Items[0].SourceItems != null)
				
				//	Nothing to do if nothing to add
				if(xmlAdd == null) return;
				if(xmlAdd.Count == 0) return;
				
				//	Get the parameter to request activation
				if(Args.Parameters != null)
					tmaxParameter = Args.Parameters.Find(TmaxCommandParameters.Activate);
				if(tmaxParameter != null)
					bActivate = tmaxParameter.AsBoolean();

				//	Get the insertion location if specified
				if((Args.Items[0].SubItems != null) && (Args.Items[0].SubItems.Count > 0))
					xmlLocation = Args.Items[0].SubItems[0].XmlDesignation;
				
				//	Are we supposed to be inserting the objects?
				if(xmlLocation != null)
				{
					//	Get the parameter to declare Before or After
					if(Args.Parameters != null)
						tmaxParameter = Args.Parameters.Find(TmaxCommandParameters.Before);
					if(tmaxParameter != null)
						bBefore = tmaxParameter.AsBoolean();

					//	Insert the new designations
					Args.Successful = m_xmlScript.Insert(xmlAdd, xmlLocation, bBefore);		
				}
				else
				{
					//	Add to the active script
					Args.Successful = m_xmlScript.Add(xmlAdd);	
				}
				
				//	Was the operation successful?
				if(Args.Successful == true)
					Args.Result = OnAdded(Args.View, xmlAdd, bActivate);
			}
			catch(System.Exception Ex)
			{
				m_tmaxEventSource.FireError(this, "OnTmaxVideoAdd", m_tmaxErrorBuilder.Message(ERROR_ON_TMAX_VIDEO_ADD_EX), Ex);
			}

		}// private void OnTmaxVideoAdd(object objSender, FTI.Trialmax.TMVV.Tmvideo.CTmaxVideoArgs Args)
		
		/// <summary>This method handles all SetPreferences command events fired by the child views</summary>
		/// <param name="objSender">The object sending the event</param>
		/// <param name="Args">Command event arguments</param>
		private void OnTmaxVideoSetPreferences(object objSender, FTI.Trialmax.TMVV.Tmvideo.CTmaxVideoArgs Args)
		{
			CTmaxParameter	tmaxParameter = null;
			int					iIndex = 0;
			
			try
			{
				//	Get the parameter to indentify the initial page
				if(Args.Parameters != null)
					tmaxParameter = Args.Parameters.Find(TmaxCommandParameters.InitialPage);
				if(tmaxParameter != null)
					iIndex = tmaxParameter.AsInteger();

				//	Invoke the preferences editor
				OnAppSetPreferences(iIndex);
			
				Args.Successful = true;
			}
			catch(System.Exception Ex)
			{
				m_tmaxEventSource.FireError(this, "OnTmaxVideoSetPreferences", m_tmaxErrorBuilder.Message(ERROR_ON_TMAX_VIDEO_SET_PREFERENCES_EX), Ex);
			}

		}// private void OnTmaxVideoSetPreferences(object objSender, FTI.Trialmax.TMVV.Tmvideo.CTmaxVideoArgs Args)
		
		/// <summary>This method handles all Delete command events fired by the child views</summary>
		/// <param name="objSender">The object sending the event</param>
		/// <param name="Args">Command event arguments</param>
		private void OnTmaxVideoDelete(object objSender, FTI.Trialmax.TMVV.Tmvideo.CTmaxVideoArgs Args)
		{
			CXmlDesignations	xmlDelete = null;
			CTmaxItem		tmaxResults = null;
			
			Debug.Assert(Args.Items != null);
			Debug.Assert(Args.Items.Count == 1);
			if(Args.Items == null) return;
			if(Args.Items.Count == 0) return;
			
			//	Must have an active script
			Debug.Assert(m_xmlScript != null);
			if(m_xmlScript == null) return;
			
			try
			{
				//	Get the collection of designations to be deleted
				if(Args.Items[0].SubItems != null)
				{
					//	Allocate the collection for the designations to be added
					xmlDelete = new CXmlDesignations();
					
					foreach(CTmaxItem O in Args.Items[0].SubItems)
					{
						if(O.XmlDesignation != null)
							xmlDelete.Add(O.XmlDesignation);
					}
					
				}// if(Args.Items[0].SourceItems != null)
				
				//	Nothing to do if nothing to delete
				if(xmlDelete == null) return;
				if(xmlDelete.Count == 0) return;
				
				//	Delete from the active script
				Args.Successful = m_xmlScript.Remove(xmlDelete);	
				
				//	Was the operation successful?
				if(Args.Successful == true)
				{
					//	The script has been modified
					m_xmlScript.Modified = true;
					
					//	Create an item to represent the results
					tmaxResults = new CTmaxItem(m_xmlScript);
					foreach(CXmlDesignation O in xmlDelete)
						tmaxResults.SubItems.Add(new CTmaxItem(m_xmlScript, O));
					
					//	Notify each of the child views
					for(int i = 0; i < (int)TmaxVideoViews.MaxViews; i++)
					{
						if(m_aViews[i] != null)
							m_aViews[i].OnTmaxVideoDelete(tmaxResults, Args.View);
				
					}// for(int i = 0; i < VIDEO_VIEW_MAX; i++)

					//	Update the captions
					SetCaptions();

				}// if(Args.Successful == true)
			
			}
			catch(System.Exception Ex)
			{
				m_tmaxEventSource.FireError(this, "OnTmaxVideoDelete", m_tmaxErrorBuilder.Message(ERROR_ON_TMAX_VIDEO_DELETE_EX), Ex);
			}

		}// private void OnTmaxVideoDelete(object objSender, FTI.Trialmax.TMVV.Tmvideo.CTmaxVideoArgs Args)
		
		/// <summary>This method handles all Find command events fired by the child views</summary>
		/// <param name="objSender">The object sending the event</param>
		/// <param name="Args">Command event arguments</param>
		private void OnTmaxVideoFind(object objSender, FTI.Trialmax.TMVV.Tmvideo.CTmaxVideoArgs Args)
		{
			//	Must have an active script
			Debug.Assert(m_xmlScript != null);
			if(m_xmlScript == null) return;
			
			try
			{
				//	Pass the request to the search results pane
				if((m_ctrlResultsView != null) && (m_ctrlResultsView.IsDisposed == false))
				{
					Args.Successful = Find(Args.Items, Args.View);
				}
				else
				{
					Args.Successful = false;
				}
			
				if(Args.Successful == true)
				{
					SetUltraPaneVisible(TmaxVideoViews.Results, true, false);
				}
			
			}
			catch(System.Exception Ex)
			{
				m_tmaxEventSource.FireError(this, "OnTmaxVideoFind", m_tmaxErrorBuilder.Message(ERROR_ON_TMAX_VIDEO_FIND_EX), Ex);
			}

		}// private void OnTmaxVideoFind(object objSender, FTI.Trialmax.TMVV.Tmvideo.CTmaxVideoArgs Args)
		
		/// <summary>This method handles all Import command events fired by the child views</summary>
		/// <param name="objSender">The object sending the event</param>
		/// <param name="Args">Command event arguments</param>
		private void OnTmaxVideoImport(object objSender, FTI.Trialmax.TMVV.Tmvideo.CTmaxVideoArgs Args)
		{
			CTmaxItem		tmaxTarget = null;
			CTmaxParameter	tmaxParameter = null;
			bool			bActivate = false;
			
			try
			{
				//	Get the target for the import operation
				if((Args.Items != null) && (Args.Items.Count > 0))
					tmaxTarget = Args.Items[0];
					
				//	Should we set the default target?
				if(tmaxTarget == null)
					tmaxTarget = new CTmaxItem(m_xmlScript);
				
				//	Get the parameter to request activation
				if(Args.Parameters != null)
					tmaxParameter = Args.Parameters.Find(TmaxCommandParameters.Activate);
				if(tmaxParameter != null)
					bActivate = tmaxParameter.AsBoolean();

				Args.Successful = m_tmaxImportManager.Import(tmaxTarget, Args.Parameters);
				
				if((Args.Successful == true) && (m_tmaxImportManager.XmlAdded != null))
				{
					Args.Result = OnAdded(Args.View, m_tmaxImportManager.XmlAdded, bActivate);
				}
			
			}
			catch(System.Exception Ex)
			{
				m_tmaxEventSource.FireError(this, "OnTmaxVideoFind", m_tmaxErrorBuilder.Message(ERROR_ON_TMAX_VIDEO_FIND_EX), Ex);
			}

		}// private void OnTmaxVideoImport(object objSender, FTI.Trialmax.TMVV.Tmvideo.CTmaxVideoArgs Args)
		
		/// <summary>This method handles all Export command events fired by the child views</summary>
		/// <param name="objSender">The object sending the event</param>
		/// <param name="Args">Command event arguments</param>
		private void OnTmaxVideoExport(object objSender, FTI.Trialmax.TMVV.Tmvideo.CTmaxVideoArgs Args)
		{
			CTmaxItem tmaxSource = null;
			
			try
			{
				//	Get the source for the operation
				if((Args.Items != null) && (Args.Items.Count > 0))
					tmaxSource = Args.Items[0];
					
				//	Should we set the default target?
				if(tmaxSource == null)
					tmaxSource = new CTmaxItem(m_xmlScript);
				
				//	Get the parameter to request activation
				Args.Successful = m_tmaxExportManager.Export(tmaxSource, Args.Parameters);
				
			}
			catch(System.Exception Ex)
			{
				m_tmaxEventSource.FireError(this, "OnTmaxVideoExport", m_tmaxErrorBuilder.Message(ERROR_ON_TMAX_VIDEO_FIND_EX), Ex);
			}

		}// private void OnTmaxVideoExport(object objSender, FTI.Trialmax.TMVV.Tmvideo.CTmaxVideoArgs Args)
		
		/// <summary>This method is called to handle view events where CommandId == LoadResult</summary>
		/// <param name="objSender">The object firing the event</param>
		/// <param name="Args">TrialMax command arguments</param>
		private void OnTmaxVideoLoadResult(object objSender, FTI.Trialmax.TMVV.Tmvideo.CTmaxVideoArgs Args)
		{
			CTmaxVideoResult	tmaxResult;
			CTmaxParameter		tmaxParameter;
			bool				bViewer = false;
			
			Debug.Assert(Args != null);
			Debug.Assert(Args.Items != null);
			Debug.Assert(Args.Items.Count == 1);
			Debug.Assert(Args.Items[0].UserData1 != null);
			
			//	Cast the item data to a search result
			try
			{
				if((tmaxResult = ((CTmaxVideoResult)(Args.Items[0].UserData1))) != null)
				{
					//	Should we open the transcript viewer
					if((tmaxParameter = Args.GetParameter(TmaxCommandParameters.Viewer)) != null)
						bViewer = tmaxParameter.AsBoolean();
				
					if(bViewer == true)
					{
						SetUltraPaneVisible(TmaxVideoViews.Transcript, true, false);
						SetViewStates();
					}
					
					//	Notify each pane
					for(int i = 0; i < (int)TmaxVideoViews.MaxViews; i++)
					{
						try
						{
							if(m_aViews[i] != null)
							{
								m_aViews[i].OnTmaxVideoLoadResult(tmaxResult);
							}
						}
						catch(System.Exception Ex)
						{
							m_tmaxEventSource.FireError(this, "OnTmaxVideoLoadResult", m_tmaxErrorBuilder.Message(ERROR_ON_TMAX_VIDEO_LOAD_RESULT_EX, ((TmaxVideoViews)i).ToString()), Ex);
						}
						
					}// for(int i = 0; i < (int)TmaxVideoViews.MaxViews; i++)
					
				}
				
			}
			catch(System.Exception Ex)
			{
				m_tmaxEventSource.FireError(this, "OnTmaxVideoLoadResult", m_tmaxErrorBuilder.Message(ERROR_ON_TMAX_VIDEO_LOAD_RESULT_EX, "Application"), Ex);
			}

			Args.Successful = true;
			
		}// private void OnTmaxVideoLoadResult(object objSender, FTI.Trialmax.TMVV.Tmvideo.CTmaxVideoArgs Args)
		
		/// <summary>This method handles all Reorder command events fired by the child views</summary>
		/// <param name="objSender">The object sending the event</param>
		/// <param name="Args">Command event arguments</param>
		private void OnTmaxVideoReorder(object objSender, FTI.Trialmax.TMVV.Tmvideo.CTmaxVideoArgs Args)
		{
			CXmlDesignations	xmlReordered = null;
			CTmaxItem		tmaxResults = null;
			
			Debug.Assert(Args.Items != null);
			Debug.Assert(Args.Items.Count == 1);
			if(Args.Items == null) return;
			if(Args.Items.Count == 0) return;
			
			//	Must have an active script
			Debug.Assert(m_xmlScript != null);
			if(m_xmlScript == null) return;
			
			try
			{
				//	Get the reordered collection of designations
				if(Args.Items[0].SubItems != null)
				{
					//	Allocate the collection for the designations
					xmlReordered = new CXmlDesignations();
					
					foreach(CTmaxItem O in Args.Items[0].SubItems)
					{
						if(O.XmlDesignation != null)
							xmlReordered.Add(O.XmlDesignation);
					}
					
				}// if(Args.Items[0].SubItems != null)
				
				//	Nothing to do if nothing to reorder
				if(xmlReordered == null) return;
				if(xmlReordered.Count == 0) return;
				
				//	Reorder the designations
				Args.Successful = m_xmlScript.Reorder(xmlReordered);	
				
				//	Was the operation successful?
				if(Args.Successful == true)
				{
					//	The script has been modified
					m_xmlScript.Modified = true;
					
					//	Create an item to represent the results
					tmaxResults = new CTmaxItem(m_xmlScript);
					foreach(CXmlDesignation O in xmlReordered)
						tmaxResults.SubItems.Add(new CTmaxItem(m_xmlScript, O));
					
					//	Notify each of the child views
					for(int i = 0; i < (int)TmaxVideoViews.MaxViews; i++)
					{
						if(m_aViews[i] != null)
							m_aViews[i].OnTmaxVideoReorder(tmaxResults, Args.View);
				
					}// for(int i = 0; i < VIDEO_VIEW_MAX; i++)

					//	Update the captions
					SetCaptions();

				}// if(Args.Successful == true)
			
			}
			catch(System.Exception Ex)
			{
				m_tmaxEventSource.FireError(this, "OnTmaxVideoAdd", m_tmaxErrorBuilder.Message(ERROR_ON_TMAX_VIDEO_ADD_EX), Ex);
			}

		}// private void OnTmaxVideoReorder(object objSender, FTI.Trialmax.TMVV.Tmvideo.CTmaxVideoArgs Args)
		
		/// <summary>This method handles all Update command events fired by the child views</summary>
		/// <param name="objSender">The object sending the event</param>
		/// <param name="Args">Command event arguments</param>
		private void OnTmaxVideoUpdate(object objSender, FTI.Trialmax.TMVV.Tmvideo.CTmaxVideoArgs Args)
		{
			Debug.Assert(Args.Items != null);
			Debug.Assert(Args.Items.Count == 1);
			if(Args.Items == null) return;
			if(Args.Items.Count == 0) return;
			
			//	Must have an active script
			Debug.Assert(m_xmlScript != null);
			if(m_xmlScript == null) return;
			
			try
			{
				//	The event has been handled
				Args.Successful = true;
				
				//	Was the operation successful?
				if(Args.Successful == true)
				{
					//	The script has been modified
					m_xmlScript.Modified = true;
					
					//	Notify each of the child views
					for(int i = 0; i < (int)TmaxVideoViews.MaxViews; i++)
					{
						if(m_aViews[i] != null)
							m_aViews[i].OnTmaxVideoUpdate(Args.Items[0], Args.View);
				
					}// for(int i = 0; i < VIDEO_VIEW_MAX; i++)

					//	Update the captions
					SetCaptions();

				}// if(Args.Successful == true)
			
			}
			catch(System.Exception Ex)
			{
				m_tmaxEventSource.FireError(this, "OnTmaxVideoUpdate", m_tmaxErrorBuilder.Message(ERROR_ON_TMAX_VIDEO_UPDATE_EX), Ex);
			}

			//	The script name may have changed
			SetCaptions();
			
		}// private void OnTmaxVideoUpdate(object objSender, FTI.Trialmax.TMVV.Tmvideo.CTmaxVideoArgs Args)
		
		/// <summary>This method handles all EditDesignation command events fired by the child views</summary>
		/// <param name="objSender">The object sending the event</param>
		/// <param name="Args">Command event arguments</param>
		private void OnTmaxVideoEditDesignation(object objSender, FTI.Trialmax.TMVV.Tmvideo.CTmaxVideoArgs Args)
		{
			CXmlDesignation				xmlDesignation = null;
			CXmlDesignations			xmlAdded = null;
			CTmaxItem					tmaxUpdate = null;
			CTmaxItem					tmaxScript = null;
			CTmaxItem					tmaxAdded = null;
			CTmaxParameter				tmaxParameter = null; 
			TmaxDesignationEditMethods	eMethod = TmaxDesignationEditMethods.Unknown;
			long						lStartPL = 0;
			long						lStopPL = 0;
			int							iHighlighter = 0;
			
			Debug.Assert(Args.Items != null);
			Debug.Assert(Args.Items.Count == 1);
			if(Args.Items == null) return;
			if(Args.Items.Count == 0) return;
			
			//	Must have an active script
			Debug.Assert(m_xmlScript != null);
			if(m_xmlScript == null) return;
			
			try
			{
				//	Get the designation to be edited
				xmlDesignation = Args.Items[0].XmlDesignation;
				Debug.Assert(xmlDesignation != null, "Invalid argument: NULL designation");
				if(xmlDesignation == null) return;
				
				//	Get the edit method
				if((tmaxParameter = Args.Parameters.Find(TmaxCommandParameters.EditMethod)) != null)
				{
					try	  { eMethod = (TmaxDesignationEditMethods)(tmaxParameter.AsInteger()); }
					catch {}
				}

				//	Get the edit range
				if((tmaxParameter = Args.Parameters.Find(TmaxCommandParameters.StartPL)) != null)
					lStartPL = tmaxParameter.AsLong();
				if((tmaxParameter = Args.Parameters.Find(TmaxCommandParameters.StopPL)) != null)
					lStopPL = tmaxParameter.AsLong();
				
				//	Check to see if a new highlighter has been assigned
				if((tmaxParameter = Args.Parameters.Find(TmaxCommandParameters.Highlighter)) != null)
				{
					if((iHighlighter = tmaxParameter.AsInteger()) > 0)
					{
						//	Make sure the new id is valid
						if(m_tmaxAppOptions.Highlighters.Find(iHighlighter) != null)
							xmlDesignation.Highlighter = iHighlighter;
					}
					
				}

				//	Let the active script perform the operation
				xmlAdded = new CXmlDesignations();
				Args.Successful = m_xmlScript.Edit(eMethod, xmlDesignation, lStartPL, lStopPL, xmlAdded);

				//	Was the operation successful?
				if(Args.Successful == true)
				{
					//	The script has been modified
					m_xmlScript.Modified = true;
					
					//	Set up items to report the results
					tmaxUpdate = new CTmaxItem(m_xmlScript, xmlDesignation);
					
					if((xmlAdded != null) && (xmlAdded.Count > 0))
					{
						tmaxScript = new CTmaxItem(m_xmlScript);
						foreach(CXmlDesignation O in xmlAdded)
						{
							tmaxAdded = new CTmaxItem(m_xmlScript, O);
							tmaxScript.SubItems.Add(tmaxAdded);
							
							//	Search results view uses these to update it's results
							tmaxUpdate.SubItems.Add(tmaxAdded);
						}
					}
					
					//	Notify each of the child views
					for(int i = 0; i < (int)TmaxVideoViews.MaxViews; i++)
					{
						if(m_aViews[i] != null)
						{
						
							m_aViews[i].OnTmaxVideoUpdate(tmaxUpdate, Args.View);
				
							if(tmaxScript != null)
								m_aViews[i].OnTmaxVideoAdd(tmaxScript, Args.View);
						}
						
					}// for(int i = 0; i < VIDEO_VIEW_MAX; i++)

					//	Update the captions
					SetCaptions();

				}// if(Args.Successful == true)
			
			}
			catch(System.Exception Ex)
			{
				m_tmaxEventSource.FireError(this, "OnTmaxVideoEditDesignation", m_tmaxErrorBuilder.Message(ERROR_ON_TMAX_VIDEO_EDIT_DESIGNATION_EX), Ex);
			}
			finally
			{
				if(xmlAdded != null)
					xmlAdded.Clear();
			}

		}// private void OnTmaxVideoEditDesignation(object objSender, FTI.Trialmax.TMVV.Tmvideo.CTmaxVideoArgs Args)
		
		/// <summary>This function is called to save the pane docking layout to file</summary>
		///	<returns>true if successful</returns>
		private bool SaveScreenLayout()
		{
			string					strFileSpec = "";
			System.IO.FileStream	fsLayout = null; 
			bool					bSuccessful = true;

			try
			{
				//	Build the file path
				strFileSpec = m_strAppFolder;
				if(strFileSpec.EndsWith("\\") == false)
					strFileSpec += "\\";
				strFileSpec = DEFAULT_SCREEN_LAYOUT_FILE;
				
				fsLayout = new System.IO.FileStream(strFileSpec, System.IO.FileMode.OpenOrCreate, System.IO.FileAccess.ReadWrite, System.IO.FileShare.None);
				this.m_ctrlDockingManager.SaveAsXML(fsLayout);
			}
			catch(System.Exception Ex)
			{
				m_tmaxEventSource.FireDiagnostic(this, "SaveScreenLayout", Ex);
				bSuccessful = false;
			}
			finally
			{
				if(fsLayout != null)
					fsLayout.Close();
			}
			
			return bSuccessful;
			
		}// private bool SaveScreenLayout()

		/// <summary>This function is called to load the pane docking layout from file</summary>
		/// <returns>true if successful</returns>
		private bool LoadScreenLayout()
		{
			string					strFileSpec = "";
			System.IO.FileStream	fsLayout = null; 
			bool					bReturn = false;

			//	Build the file path
			strFileSpec = m_strAppFolder;
			if(strFileSpec.EndsWith("\\") == false)
				strFileSpec += "\\";
			strFileSpec = DEFAULT_SCREEN_LAYOUT_FILE;
				
			//	Make sure the file exists
			if(System.IO.File.Exists(strFileSpec) == false) return false;
			
			try
			{
				fsLayout = new System.IO.FileStream(strFileSpec, System.IO.FileMode.Open, System.IO.FileAccess.Read, System.IO.FileShare.Read);

				if(fsLayout != null)
				{
					this.m_ctrlDockingManager.LoadFromXML(fsLayout);
					bReturn = true;
				}
				
				//	Prevent the user from dragging the panes
				SetViewLocks(true);
			
			}
			catch(System.Exception Ex)
			{
				m_tmaxEventSource.FireDiagnostic(this, "LoadScreenLayout)", Ex);
			}
			finally
			{
				if(fsLayout != null)
					fsLayout.Close();
					
			}// finally
			
			return bReturn;
		
		}// private bool LoadScreenLayout()
		
		/// <summary>This method is called to execute a search operation</summary>
		/// <param name="tmaxItems">The items used to initialize the search</param>
		/// <param name="eView">The view identifier</param>
		/// <returns>True if successful</returns>
		private bool Find(CTmaxItems tmaxItems, TmaxVideoViews eView)
		{
			bool bSuccessful = false;
			
			try
			{
				//	Pass the request to the search results view
				if((m_ctrlResultsView != null) && (m_ctrlResultsView.IsDisposed == false))
				{
					bSuccessful = m_ctrlResultsView.Find(tmaxItems, eView);
				}
			
			}
			catch(System.Exception Ex)
			{
				m_tmaxEventSource.FireError(this, "Find", m_tmaxErrorBuilder.Message(ERROR_FIND_EX), Ex);
			}

			return bSuccessful;
			
		}// private bool Find(CTmaxItems tmaxItems, int iView)
		
		/// <summary>This method is called to get the pane that currently has the keyboard focus</summary>
		/// <returns>The pane that currently has the keyboard focus</returns>
		private CTmaxVideoView GetActiveView()
		{
			CTmaxVideoView tmaxView = null;
			
			if(m_ctrlDockingManager == null) return null;
			if(m_ctrlDockingManager.ActivePane == null) return null;
			if(m_ctrlDockingManager.ActivePane.Control == null) return null;
			
			try
			{
				//	Make sure the pane is visible
				//
				//	NOTE:	Just because the pane's active it may not be visible. If the 
				//			user selects the pane and then clicks on the close button, 
				//			Infragistics still makes it the active pane
				if(m_ctrlDockingManager.ActivePane.IsVisible == true)
				{
					tmaxView = (CTmaxVideoView)(m_ctrlDockingManager.ActivePane.Control);
				}
				
			}
			catch(System.Exception Ex)
			{
				m_tmaxEventSource.FireDiagnostic(this, "GetActiveView", "Ex: " + Ex.ToString());
			}
					
			return tmaxView;
			
		}// private CTmaxVideoView GetActiveView()
		
		/// <summary>This function is called to get the version of TmaxInstaller</summary>
		/// <returns>The TrialMax version descriptor if available</returns>
		private CBaseVersion GetInstallerVersion()
		{
			CBaseVersion verInstaller = null;
			string strUpdateFileSpec = "";
			string strVerCurrent = "";
			string strVerUpdate = "";
			long lPackedCurrent = 0;
			long lPackedUpdate = 0;
			int iBuildCurrent = 0;
			int iBuildUpdate = 0;
			System.DateTime dtBuildCurrent = System.DateTime.Now;
			System.DateTime dtBuildUpdate = System.DateTime.Now;
			bool bReplace = false;
			int iAttempts = 0;

			Debug.Assert(m_strUpdateInstaller.Length != 0);
			if(m_strUpdateInstaller.Length == 0) return null;

			//	Get the version information for the current installer
			if(System.IO.File.Exists(m_strUpdateInstaller) == true)
			{
				strVerCurrent = CBaseVersion.GetVersion(m_strUpdateInstaller);
				lPackedCurrent = CBaseVersion.GetPackedVersion(strVerCurrent);
				iBuildCurrent = CBaseVersion.GetBuild(strVerCurrent);
				if(iBuildCurrent > 0)
					CBaseVersion.GetBuildAsDate(iBuildCurrent, ref dtBuildCurrent);
			}

			//	Get the version information for the update if it exists
			strUpdateFileSpec = m_strAppFolder;
			if((strUpdateFileSpec.Length > 0) && (strUpdateFileSpec.EndsWith("\\") == false))
				strUpdateFileSpec += "\\";
			strUpdateFileSpec += DEFAULT_UPDATES_SUBFOLDER;
			strUpdateFileSpec += DEFAULT_UPDATE_INSTALLER_FILENAME;
			if(System.IO.File.Exists(strUpdateFileSpec) == true)
			{
				strVerUpdate = CBaseVersion.GetVersion(strUpdateFileSpec);
				lPackedUpdate = CBaseVersion.GetPackedVersion(strVerUpdate);
				iBuildUpdate = CBaseVersion.GetBuild(strVerUpdate);
				if(iBuildUpdate > 0)
					CBaseVersion.GetBuildAsDate(iBuildUpdate, ref dtBuildUpdate);
			}

			//	Do we have a pending update?
			if(lPackedUpdate > 0)
			{
				//	Are the major.minor.update values the same?
				if(lPackedUpdate == lPackedCurrent)
				{
					if((iBuildCurrent > 0) && (iBuildUpdate > 0))
						bReplace = (dtBuildUpdate > dtBuildCurrent);
					else
						bReplace = (iBuildUpdate > iBuildCurrent);
				}
				else
				{
					bReplace = (lPackedUpdate > lPackedCurrent);
				}

			}// Do we have a pending update?			

			//	Do we have a newer update?
			if(bReplace == true)
			{
				//	Delete the current application
				while(System.IO.File.Exists(m_strUpdateInstaller) == true)
				{
					//	Attempt to delete the file
					try
					{
						System.IO.File.Delete(m_strUpdateInstaller);
					}
					catch
					{
						//	It may be that manager was launched by the installer and
						//	the installer has not yet had time to terminate.
						if(iAttempts < 5)
						{
							Thread.Sleep(200);
							iAttempts++;
						}
						else
						{
							//	Give up 
							break;
						}

					}

				}// while(System.IO.File.Exists(m_strUpdateInstaller) == true)

				//	Install the update
				if(System.IO.File.Exists(m_strUpdateInstaller) == false)
				{
					try
					{
						System.IO.File.Move(strUpdateFileSpec, m_strUpdateInstaller);

						lPackedCurrent = lPackedUpdate;
						strVerCurrent = strVerUpdate;

						m_bInstallerUpdated = true;
					}
					catch(System.Exception Ex)
					{
						m_tmaxEventSource.FireError(this, "GetInstallerVersion", m_tmaxErrorBuilder.Message(ERROR_GET_INSTALLER_VERSION_EX, m_strUpdateInstaller), Ex);
					}

				}// if(System.IO.File.Exists(m_strUpdateInstaller) == false)

			}// if((lPackedUpdate > 0) && (lPackedUpdate > lPackedCurrent))

			//	Do we have the installer?
			if(lPackedCurrent > 0)
			{
				verInstaller = new CBaseVersion();
				verInstaller.SetTmaxLocation(m_strUpdateInstaller);
				verInstaller.Description = "TrialMax Updates Installer";
			}

			return verInstaller;
			
		}// private CBaseVersion GetInstallerVersion()
		
		/// <summary>This method is called to determine if unsaved changes are about to be lost</summary>
		/// <returns>true if OK to continue</returns>
		private bool CheckModified()
		{
			string strMsg = "";
			
			if(m_xmlScript == null) return true;
			if(m_xmlScript.Modified == false) return true;
			
			//	Build the message
			if(m_xmlScript.Saved == true)
			{
				if(m_xmlScript.Name.Length > 0)
					strMsg = String.Format("Do you want to save the changes to {0} before continuing?", m_xmlScript.Name);
				else
					strMsg = "Do you want to save your changes before continuing?";

			}
			else
			{
				strMsg = "Do you want to save the current script before continuing?";
			}
			
			switch(MessageBox.Show(strMsg, "Save?", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question))
			{
				case DialogResult.No:
				
					m_xmlScript.Modified = false; // Prevents multiple prompts
					return true;
					
				case DialogResult.Cancel:
				
					return false;
					
				case DialogResult.Yes:
				default:
				
					if(m_xmlScript.Saved == true)
						OnAppSave();
					else
						OnAppSaveAs();
						
					//	Modified flag gets cleared when Save is successful
					return (m_xmlScript.Modified == false);
					
			}// switch(MessageBox.Show(strMsg, "Save?", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question))		
			
		}// private bool CheckModified()
		
		/// <summary>This method handles all KeyDown events fired by the keyboard manager</summary>
		/// <param name="objSender">The object sending the event</param>
		/// <param name="eKey">The key being pressed</param>
		///	<param name="eModifiers">The current control/shift/alt key states</param>
		/// <param name="bProcessed">Set to true if the keystroke is processed</param>
		private void OnTmaxKeyDown(object objSender, Keys eKey, Keys eModifiers, ref bool bProcessed)
		{
			CTmaxVideoView tmaxView = null;

			//	Initialize the return value
			bProcessed = false;
			
			try
			{
				if((tmaxView = GetActiveView()) != null)
					bProcessed = tmaxView.OnAppKeyDown(eKey, eModifiers);
			}
			catch(System.Exception Ex)
			{
				m_tmaxEventSource.FireDiagnostic(this, "OnTmaxKeyDown", "Ex: " + Ex.ToString());
			}

		}// private void OnTmaxKeyDown(object objSender, Keys eKey, Keys eModifiers, ref bool bProcessed)
		
		/// <summary>This method handles all Hotkey events fired by the keyboard manager</summary>
		/// <param name="objSender">The object sending the event</param>
		/// <param name="eHotkey">The enumerated hotkey</param>
		/// <param name="bProcessed">Set to true if the keystroke is processed</param>
		private void OnTmaxHotkey(object objSender, TmaxHotkeys eHotkey, ref bool bProcessed)
		{
			CTmaxVideoView tmaxView = GetActiveView();

			//	Initialize the return value
			bProcessed = false;
			
			//	Which hotkey has been pressed?
			switch(eHotkey)
			{
				case TmaxHotkeys.FileNew:
					
					OnAppNewScript();
					break;

				case TmaxHotkeys.FileOpen:
					
					OnAppOpenScript();
					break;

				case TmaxHotkeys.OpenLast:

					//	Don't bother if script is already open
					if(m_xmlScript == null)
					{
						if(m_tmaxAppOptions.RecentlyUsed.Count > 0)
						{
							Open(m_tmaxAppOptions.RecentlyUsed[0].ToString());
						}
						
					}
					break;

				case TmaxHotkeys.Find:
				
					//	Let the active view process this request
					if(tmaxView != null)
					{
						bProcessed = tmaxView.OnAppHotkey(eHotkey);
					}
					
					//	Did the active view process the hotkey
					if(bProcessed == false)
					{
						if(GetCommandEnabled(AppCommands.Find) == true)
							OnAppFind();
					}
					
					break;
					
				case TmaxHotkeys.GoTo:
				case TmaxHotkeys.AddToScript:
				
					//	Let the active view process this request
					if(tmaxView != null)
					{
						bProcessed = tmaxView.OnAppHotkey(eHotkey);
					}
					break;
					
				case TmaxHotkeys.FindNext:
				
					if(GetCommandEnabled(AppCommands.FindNext) == true)
						OnAppFindNext();
					break;
					
				case TmaxHotkeys.Copy:
				case TmaxHotkeys.Paste:
				case TmaxHotkeys.GoToBarcode:
				case TmaxHotkeys.SetFilter:
				case TmaxHotkeys.ReloadCase:
				case TmaxHotkeys.CaseOptions:
				case TmaxHotkeys.RefreshTreatments:
				case TmaxHotkeys.AddToBinder:
				case TmaxHotkeys.ScreenCapture:
				case TmaxHotkeys.OpenPresentation:
				case TmaxHotkeys.BlankPresentation:
				case TmaxHotkeys.Print:
				case TmaxHotkeys.OpenHelp:
				case TmaxHotkeys.ViewTuner:
				case TmaxHotkeys.ViewProperties:
				case TmaxHotkeys.ViewBuilder:
				case TmaxHotkeys.ViewMediaViewer:
				case TmaxHotkeys.ViewCodes:
				default:
				
					//MessageBox.Show(eHotkey.ToString() + " hotkey not yet implemented");
					break;
			}
		
		}// private void OnTmaxHotkey(object objSender, TmaxHotkeys eHotkey)
		
		/// <summary>This method performs processing required when designations have been added to the script</summary>
		/// <param name="eView">The id of the view that added the new designations</param>
		/// <param name="xmlAdded">The collection of new designations</param>
		/// <param name="bActivate">True to activate the first new designation</param>
		/// <returns>An event item to represent the results of the addition</returns>
		private CTmaxItem OnAdded(TmaxVideoViews eView, CXmlDesignations xmlAdded, bool bActivate)
		{
			CTmaxItem tmaxResult = null;
			
			Debug.Assert(xmlAdded != null);
			Debug.Assert(xmlAdded.Count > 0);
			Debug.Assert(m_xmlScript != null);
			if(xmlAdded == null) return null;
			if(xmlAdded.Count == 0) return null;
			if(m_xmlScript == null) return null;
			
			try
			{
				//	The script has been modified
				m_xmlScript.Modified = true;
					
				//	Create an item to represent the results
				tmaxResult = new CTmaxItem(m_xmlScript);
				foreach(CXmlDesignation O in xmlAdded)
				{
					tmaxResult.SubItems.Add(new CTmaxItem(m_xmlScript, O));
					
					//	Make sure the designation has been assigned a primary media id
					if((O.PrimaryId.Length == 0) && (m_xmlScript.XmlDeposition != null))
						O.PrimaryId = m_xmlScript.XmlDeposition.MediaId;
				}
					
				//	Notify each of the child views
				for(int i = 0; i < (int)TmaxVideoViews.MaxViews; i++)
				{
					if(m_aViews[i] != null)
						m_aViews[i].OnTmaxVideoAdd(tmaxResult, eView);
				
				}// for(int i = 0; i < VIDEO_VIEW_MAX; i++)
					
				//	Should we activate the new designation?
				if(bActivate == true)
				{
					if(m_aViews[(int)TmaxVideoViews.Tree] != null)
					{
						((CTmaxVideoTree)(m_aViews[(int)TmaxVideoViews.Tree])).SetSelection(tmaxResult.SubItems[0], true);
					}
						
				}// if(bActivate == true)
					
				//	Update the captions
				SetCaptions();
			}
			catch(System.Exception Ex)
			{
				m_tmaxEventSource.FireError(this, "OnAdded", m_tmaxErrorBuilder.Message(ERROR_ON_ADDED_EX), Ex);
			}
			
			return tmaxResult;

		}// private void OnAdded(CXmlDesignations xmlAdded, bool bActivate)
		
		/// <summary>Called when the user is closing the non-modal diagnostics form</summary>
		/// <param name="sender">The object sending the event</param>
		/// <param name="e">System event arguments</param>
		private void OnDiagnosticsClosing(object sender, System.ComponentModel.CancelEventArgs e)
		{
			m_tmaxDiagnosticsForm = null;
		}

		/// <summary>This method will process the command line specified by the caller</summary>
		/// <param name="tmaxCommandLine">The command line arguments</param>
		private void ProcessCommandLine(CTmaxCommandLine tmaxCommandLine)
		{	
			Debug.Assert(tmaxCommandLine != null);
			if(tmaxCommandLine == null) return;
			
			try
			{
				//	Was a source file specified on the command line
				if(tmaxCommandLine.SourceFile.Length > 0)
				{
					if(System.IO.File.Exists(tmaxCommandLine.SourceFile) == true)
					{
						//	Should we also set the video path?
						if(tmaxCommandLine.VideoPath.Length > 0)
						{
							m_tmaxAppOptions.VideoFolder = tmaxCommandLine.VideoPath;
						}
						
						//	Is this a script?
						if(tmaxCommandLine.SourceFile.EndsWith(CXmlScript.GetExtension(TmaxXmlScriptFormats.VideoViewer)) == true)
						{
							Open(tmaxCommandLine.SourceFile);
						}
						else
						{
							//	Assume it's a deposition
							CreateScript(tmaxCommandLine.SourceFile);
						}
						
					}// if(System.IO.File.Exists(tmaxCommandLine.SourceFile) == true)
					else
					{
						MessageBox.Show("Unable to locate the source file specified on the application command line: " + m_tmaxCommandLine.SourceFile);
					}
					
				}// if(tmaxCommandLine.SourceFile.Length > 0)
				
			}
			catch(System.Exception Ex)
			{
				m_tmaxEventSource.FireError(this, "ProcessCommandLine", m_tmaxErrorBuilder.Message(ERROR_PROCESS_COMMAND_LINE_EX, m_tmaxCommandLine.ToString()), Ex);
			}
		
		}// private void ProcessCommandLine(CTmaxCommandLine tmaxCommandLine)
		
		/// <summary>This method is called create and activate a new script</summary>
		/// <param name="strXmlTranscript">The fully qualified path to the source transcript</param>
		/// <returns>true if successful</returns>
		private bool CreateScript(string strXmlTranscript)
		{
			CXmlScript	xmlScript = null;
			bool		bSuccessful = false;
			
			try
			{
				//	Allocate a new script
				xmlScript = new CXmlScript();
				xmlScript.XmlScriptFormat = TmaxXmlScriptFormats.VideoViewer;

				//	Load this new source
				if(xmlScript.FastFill(strXmlTranscript) == true)
				{
					//	Get rid of any designations
					//
					//	NOTE:	Just in case the user opened an XMLS file
					if(xmlScript.XmlDesignations != null)
						xmlScript.XmlDesignations.Clear();
							
					if(xmlScript.Save(m_strNewScriptFileSpec) == true)
					{
						xmlScript.SourceFileSpec = strXmlTranscript;
							
						//	Make sure the deposition has a media id
						//
						//	NOTE:	This is required to import into TrialMax
						if((xmlScript.XmlDeposition != null) && (xmlScript.XmlDeposition.MediaId.Length == 0))
							xmlScript.XmlDeposition.MediaId = System.IO.Path.GetFileNameWithoutExtension(strXmlTranscript);
								
						//	Prepare for editing
						xmlScript.Saved = false;
						xmlScript.Modified = true;
							
						//	Make this the active script
						Activate(xmlScript);
						
						bSuccessful = true;
					
					}// if(xmlScript.Save(m_strNewScriptFileSpec) == true)
					
				}// if(xmlScript.FastFill(strXmlTranscript) == true)
		
			}
			catch(System.Exception Ex)
			{
				m_tmaxEventSource.FireError(this, "CreateScript", m_tmaxErrorBuilder.Message(ERROR_CREATE_SCRIPT_EX, strXmlTranscript), Ex);
			}
			
			return bSuccessful;
			
		}// private bool CreateScript(string strXmlTranscript)
		
		#endregion Private Methods

	}// public class CTmaxManagerForm : System.Windows.Forms.Form

}// namespace FTI.Trialmax.TmaxVideo
