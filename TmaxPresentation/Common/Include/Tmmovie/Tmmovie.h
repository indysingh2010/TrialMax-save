#if !defined(AFX_TMMOVIE_H__74CA75D5_CFF5_453D_BDE3_DEA8B83A5B54__INCLUDED_)
#define AFX_TMMOVIE_H__74CA75D5_CFF5_453D_BDE3_DEA8B83A5B54__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CTMMovie wrapper class

class CTMMovie : public CWnd
{
protected:
	DECLARE_DYNCREATE(CTMMovie)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0xd71d2494, 0xb9ca, 0x401f, { 0x8e, 0x24, 0x18, 0x15, 0xe0, 0x77, 0xce, 0x64 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }

// Attributes
public:
	BOOL GetAutoInit();
	void SetAutoInit(BOOL);
	BOOL GetEnableErrors();
	void SetEnableErrors(BOOL);
	CString GetIniFile();
	void SetIniFile(LPCTSTR);
	BOOL GetAutoPlay();
	void SetAutoPlay(BOOL);
	BOOL GetScaleVideo();
	void SetScaleVideo(BOOL);
	OLE_COLOR GetBackColor();
	void SetBackColor(OLE_COLOR);
	short GetBorderStyle();
	void SetBorderStyle(short);
	CString GetFilename();
	void SetFilename(LPCTSTR);
	short GetUpdateRate();
	void SetUpdateRate(short);
	BOOL GetAutoShow();
	void SetAutoShow(BOOL);
	BOOL GetKeepAspect();
	void SetKeepAspect(BOOL);
	short GetBalance();
	void SetBalance(short);
	short GetRate();
	void SetRate(short);
	short GetVolume();
	void SetVolume(short);
	BOOL GetUseSnapshots();
	void SetUseSnapshots(BOOL);
	CString GetOverlayFile();
	void SetOverlayFile(LPCTSTR);
	BOOL GetOverlayVisible();
	void SetOverlayVisible(BOOL);
	CString GetVerTextLong();
	void SetVerTextLong(LPCTSTR);
	double GetPlaylistTime();
	void SetPlaylistTime(double);
	double GetElapsedDesignation();
	void SetElapsedDesignation(double);
	double GetElapsedPlaylist();
	void SetElapsedPlaylist(double);
	double GetDesignationTime();
	void SetDesignationTime(double);
	double GetStartPosition();
	void SetStartPosition(double);
	double GetStopPosition();
	void SetStopPosition(double);
	BOOL GetEnableAxErrors();
	void SetEnableAxErrors(BOOL);
	BOOL GetDetachBeforeLoad();
	void SetDetachBeforeLoad(BOOL);
	BOOL GetHideTaskBar();
	void SetHideTaskBar(BOOL);
	BOOL GetEnableSimulation();
	void SetEnableSimulation(BOOL);
	CString GetSimulationText();
	void SetSimulationText(LPCTSTR);
	short GetVerMajor();
	void SetVerMajor(short);
	short GetVerMinor();
	void SetVerMinor(short);
	short GetVerQEF();
	void SetVerQEF(short);
	short GetVerBuild();
	void SetVerBuild(short);
	CString GetVerTextShort();
	void SetVerTextShort(LPCTSTR);
	CString GetVerBuildDate();
	void SetVerBuildDate(LPCTSTR);
	BOOL GetShowAudioImage();
	void SetShowAudioImage(BOOL);

// Operations
public:
	short Unload();
	short Initialize();
	short Play();
	short Pause();
	short Stop();
	short Resume();
	BOOL IsReady();
	short GetState();
	float GetFrameRate();
	short GetSrcWidth();
	short GetSrcHeight();
	short ShowVideoProps();
	short CheckType(LPCTSTR lpFilename);
	short GetPlaylistState();
	short GetType();
	void ShowVideo(BOOL bShow);
	BOOL IsVideoVisible();
	BOOL CanSetVolume();
	BOOL CanSetBalance();
	BOOL CanSetRate();
	BOOL IsLoaded();
	short Update();
	short GetResolution();
	long ShowSnapshot();
	short Capture(LPCTSTR lpFilespec, BOOL bResume);
	CString GetRegFilters(long* pCount);
	void ShowFilterInfo();
	CString GetActFilters(BOOL bVendorInfo, long* pCount);
	LPUNKNOWN GetInterface(short sInterface);
	void SetDefaultRate(double dFrameRate);
	double GetDefaultRate();
	short SetPlaylistRange(long lStart, long lStop);
	CString GetClassIdString();
	CString GetRegisteredPath();
	short AddFilter(LPCTSTR lpszName);
	short RemoveFilter(LPCTSTR lpszName);
	CString GetUserFilters(long* pCount);
	double GetMinTime();
	double GetMaxTime();
	double GetPosition();
	long ConvertToFrames(double dSeconds);
	short SetMaxCuePosition(double dPosition);
	short SetMinCuePosition(double dPosition);
	short SetRange(double dStart, double dStop);
	short Cue(short sType, double dSeconds, BOOL bResume);
	short Load(LPCTSTR lpszFilename, double dStart, double dStop, BOOL bPlay);
	short Step(double dFrom, double dTo);
	double ConvertToTime(long lFrame);
	short CuePlaylist(short sType, double dSeconds, BOOL bResume, BOOL bPlayToEnd);
	short PlayPlaylist(long pPlaylist, long lStart, long lStop, double dPosition);
	short CueDesignation(long lDesignation, double dPosition, short bResume);
	double GetDuration(LPCTSTR lpszFilename);
	short UpdateScreenPosition();
	BOOL GetIsAudio();
	void ShowVideoBar();
	void HideVideoBar();
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_TMMOVIE_H__74CA75D5_CFF5_453D_BDE3_DEA8B83A5B54__INCLUDED_)
