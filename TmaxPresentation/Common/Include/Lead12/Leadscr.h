#if !defined(AFX_LEADSCR_H__5E041AA5_6A55_11D6_8F0B_00802966F8C1__INCLUDED_)
#define AFX_LEADSCR_H__5E041AA5_6A55_11D6_8F0B_00802966F8C1__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CLeadScr wrapper class

class CLeadScr : public CWnd
{
protected:
	DECLARE_DYNCREATE(CLeadScr)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0x120070, 0xb1ba, 0x11ce, { 0xab, 0xc6, 0xf5, 0xb2, 0xe7, 0x9d, 0x9e, 0x3f } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }

// Attributes
public:

// Operations
public:
	BOOL GetEnableMethodErrors();
	void SetEnableMethodErrors(BOOL bNewValue);
	short GetScaleMode();
	void SetScaleMode(short nNewValue);
	short GetCaptureCursorIndex();
	void SetCaptureCursorIndex(short nNewValue);
	short GetCaptureStatusCursorIndex();
	void SetCaptureStatusCursorIndex(short nNewValue);
	short GetCaptureAreaDrawCursorIndex();
	void SetCaptureAreaDrawCursorIndex(short nNewValue);
	short GetCaptureObjectSelectCursorIndex();
	void SetCaptureObjectSelectCursorIndex(short nNewValue);
	LPDISPATCH GetCaptureCursor();
	void SetCaptureCursor(LPDISPATCH newValue);
	LPDISPATCH GetCaptureStatusCursor();
	void SetCaptureStatusCursor(LPDISPATCH newValue);
	LPDISPATCH GetCaptureAreaDrawCursor();
	void SetCaptureAreaDrawCursor(LPDISPATCH newValue);
	LPDISPATCH GetCaptureObjectSelectCursor();
	void SetCaptureObjectSelectCursor(LPDISPATCH newValue);
	short GetCaptureHotKey();
	void SetCaptureHotKey(short nNewValue);
	short GetCaptureHotKeyModifiers();
	void SetCaptureHotKeyModifiers(short nNewValue);
	short GetCaptureCancelKey();
	void SetCaptureCancelKey(short nNewValue);
	long GetCaptureDelay();
	void SetCaptureDelay(long nNewValue);
	short GetCaptureCount();
	void SetCaptureCount(short nNewValue);
	long GetCaptureInterval();
	void SetCaptureInterval(long nNewValue);
	long GetCaptureInfohWnd();
	float GetCaptureInfoTop();
	float GetCaptureInfoLeft();
	float GetCaptureInfoWidth();
	float GetCaptureInfoHeight();
	long GetCaptureInfoResType();
	long GetCaptureInfoResIndex();
	CString GetCaptureInfoResourceId();
	CString GetCaptureInfoExeName();
	short GetCaptureAreaFillPattern();
	void SetCaptureAreaFillPattern(short nNewValue);
	short GetCaptureAreaDrawLineStyle();
	void SetCaptureAreaDrawLineStyle(short nNewValue);
	float GetCaptureAreaDrawEllipseWidth();
	void SetCaptureAreaDrawEllipseWidth(float newValue);
	float GetCaptureAreaDrawEllipseHeight();
	void SetCaptureAreaDrawEllipseHeight(float newValue);
	float GetCaptureAreaInfoLeft();
	void SetCaptureAreaInfoLeft(float newValue);
	float GetCaptureAreaInfoTop();
	void SetCaptureAreaInfoTop(float newValue);
	float GetCaptureAreaInfoWidth();
	void SetCaptureAreaInfoWidth(float newValue);
	BOOL GetCaptureAreaShowDrawCursor();
	void SetCaptureAreaShowDrawCursor(BOOL bNewValue);
	BOOL GetCaptureAreaIncludeCursor();
	void SetCaptureAreaIncludeCursor(BOOL bNewValue);
	float GetCaptureAreaInfoHeight();
	void SetCaptureAreaInfoHeight(float newValue);
	BOOL GetCaptureAreaEnableKeyboard();
	void SetCaptureAreaEnableKeyboard(BOOL bNewValue);
	BOOL GetCaptureAreaShowOpaqueText();
	void SetCaptureAreaShowOpaqueText(BOOL bNewValue);
	BOOL GetCaptureAreaShowCursorPosition();
	void SetCaptureAreaShowCursorPosition(BOOL bNewValue);
	BOOL GetCaptureAreaShowAreaSize();
	void SetCaptureAreaShowAreaSize(BOOL bNewValue);
	BOOL GetCaptureAreaShowInfoWindow();
	void SetCaptureAreaShowInfoWindow(BOOL bNewValue);
	BOOL GetCaptureAreaSensitiveInfoWindow();
	void SetCaptureAreaSensitiveInfoWindow(BOOL bNewValue);
	BOOL GetCaptureAreaBitmapWithRegion();
	void SetCaptureAreaBitmapWithRegion(BOOL bNewValue);
	short GetCaptureAreaZoomFactor();
	void SetCaptureAreaZoomFactor(short nNewValue);
	BOOL GetCaptureObjectInvert();
	void SetCaptureObjectInvert(BOOL bNewValue);
	BOOL GetCaptureObjectEnableKeyboard();
	void SetCaptureObjectEnableKeyboard(BOOL bNewValue);
	short GetCaptureObjectBorderWidth();
	void SetCaptureObjectBorderWidth(short nNewValue);
	long GetBitmap();
	void SetBitmap(long nNewValue);
	unsigned long GetCaptureAreaFillForeColor();
	void SetCaptureAreaFillForeColor(unsigned long newValue);
	unsigned long GetCaptureAreaFillBackColor();
	void SetCaptureAreaFillBackColor(unsigned long newValue);
	unsigned long GetCaptureAreaDrawLineColor();
	void SetCaptureAreaDrawLineColor(unsigned long newValue);
	unsigned long GetCaptureAreaTextForeColor();
	void SetCaptureAreaTextForeColor(unsigned long newValue);
	unsigned long GetCaptureAreaTextBackColor();
	void SetCaptureAreaTextBackColor(unsigned long newValue);
	unsigned long GetTransparentColor();
	void SetTransparentColor(unsigned long newValue);
	short GetCaptureAreaType();
	BOOL GetCaptureAreaUseCrossLinesCursor();
	void SetCaptureAreaUseCrossLinesCursor(BOOL bNewValue);
	short CaptureActiveWindow();
	short CaptureActiveClient();
	short CaptureFullScreen();
	short CaptureMenuUnderCursor();
	short CaptureSelectedObject();
	short CaptureArea(short AreaType);
	short CaptureMouseCursor();
	short CaptureOptionDlg(long hwndParent);
	short CaptureAreaOptionDlg(long hwndParent);
	short CaptureObjectOptionDlg(long hwndParent);
	short CaptureEXEDlg(long hwndParent, LPCTSTR FileName, short ResourceType, short DialogType);
	short CaptureGetResourceCount(LPCTSTR FileName, short nResourceType, short* pCount);
	short CaptureEXE(LPCTSTR FileName, long ResourceType, LPCTSTR ResourceID, long bIsNumberResourceID, long bCaptureByIndex);
	short CaptureWallPaper();
	short CaptureWindowUnderCursor();
	short ResetAreaOptions();
	short ResetObjectOptions();
	short StopCapture();
	BOOL IsCaptureActive();
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_LEADSCR_H__5E041AA5_6A55_11D6_8F0B_00802966F8C1__INCLUDED_)
