// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "tmlpen.h"

/////////////////////////////////////////////////////////////////////////////
// CTMLpen

IMPLEMENT_DYNCREATE(CTMLpen, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CTMLpen properties

short CTMLpen::GetVerBuild()
{
	short result;
	GetProperty(0x1, VT_I2, (void*)&result);
	return result;
}

void CTMLpen::SetVerBuild(short propVal)
{
	SetProperty(0x1, VT_I2, propVal);
}

short CTMLpen::GetVerMajor()
{
	short result;
	GetProperty(0x2, VT_I2, (void*)&result);
	return result;
}

void CTMLpen::SetVerMajor(short propVal)
{
	SetProperty(0x2, VT_I2, propVal);
}

short CTMLpen::GetVerMinor()
{
	short result;
	GetProperty(0x3, VT_I2, (void*)&result);
	return result;
}

void CTMLpen::SetVerMinor(short propVal)
{
	SetProperty(0x3, VT_I2, propVal);
}

BOOL CTMLpen::GetAutoInit()
{
	BOOL result;
	GetProperty(0x4, VT_BOOL, (void*)&result);
	return result;
}

void CTMLpen::SetAutoInit(BOOL propVal)
{
	SetProperty(0x4, VT_BOOL, propVal);
}

BOOL CTMLpen::GetEnableErrors()
{
	BOOL result;
	GetProperty(0x5, VT_BOOL, (void*)&result);
	return result;
}

void CTMLpen::SetEnableErrors(BOOL propVal)
{
	SetProperty(0x5, VT_BOOL, propVal);
}

OLE_COLOR CTMLpen::GetBackColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_BACKCOLOR, VT_I4, (void*)&result);
	return result;
}

void CTMLpen::SetBackColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_BACKCOLOR, VT_I4, propVal);
}

OLE_COLOR CTMLpen::GetForeColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_FORECOLOR, VT_I4, (void*)&result);
	return result;
}

void CTMLpen::SetForeColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_FORECOLOR, VT_I4, propVal);
}

short CTMLpen::GetAppearance()
{
	short result;
	GetProperty(DISPID_APPEARANCE, VT_I2, (void*)&result);
	return result;
}

void CTMLpen::SetAppearance(short propVal)
{
	SetProperty(DISPID_APPEARANCE, VT_I2, propVal);
}

short CTMLpen::GetBorderStyle()
{
	short result;
	GetProperty(DISPID_BORDERSTYLE, VT_I2, (void*)&result);
	return result;
}

void CTMLpen::SetBorderStyle(short propVal)
{
	SetProperty(DISPID_BORDERSTYLE, VT_I2, propVal);
}

BOOL CTMLpen::GetAlwaysOnTop()
{
	BOOL result;
	GetProperty(0x6, VT_BOOL, (void*)&result);
	return result;
}

void CTMLpen::SetAlwaysOnTop(BOOL propVal)
{
	SetProperty(0x6, VT_BOOL, propVal);
}

CString CTMLpen::GetVerTextLong()
{
	CString result;
	GetProperty(0x7, VT_BSTR, (void*)&result);
	return result;
}

void CTMLpen::SetVerTextLong(LPCTSTR propVal)
{
	SetProperty(0x7, VT_BSTR, propVal);
}

short CTMLpen::GetVerQEF()
{
	short result;
	GetProperty(0x100, VT_I2, (void*)&result);
	return result;
}

void CTMLpen::SetVerQEF(short propVal)
{
	SetProperty(0x100, VT_I2, propVal);
}

CString CTMLpen::GetVerTextShort()
{
	CString result;
	GetProperty(0x101, VT_BSTR, (void*)&result);
	return result;
}

void CTMLpen::SetVerTextShort(LPCTSTR propVal)
{
	SetProperty(0x101, VT_BSTR, propVal);
}

CString CTMLpen::GetVerBuildDate()
{
	CString result;
	GetProperty(0x102, VT_BSTR, (void*)&result);
	return result;
}

void CTMLpen::SetVerBuildDate(LPCTSTR propVal)
{
	SetProperty(0x102, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CTMLpen operations

short CTMLpen::Initialize()
{
	short result;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

CString CTMLpen::GetRegisteredPath()
{
	CString result;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString CTMLpen::GetClassIdString()
{
	CString result;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}
