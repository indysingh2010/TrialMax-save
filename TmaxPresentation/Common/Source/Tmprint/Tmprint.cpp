// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "tmprint.h"

/////////////////////////////////////////////////////////////////////////////
// CTMPrint

IMPLEMENT_DYNCREATE(CTMPrint, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CTMPrint properties

OLE_COLOR CTMPrint::GetBackColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_BACKCOLOR, VT_I4, (void*)&result);
	return result;
}

void CTMPrint::SetBackColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_BACKCOLOR, VT_I4, propVal);
}

BOOL CTMPrint::GetAutoInit()
{
	BOOL result;
	GetProperty(0x1, VT_BOOL, (void*)&result);
	return result;
}

void CTMPrint::SetAutoInit(BOOL propVal)
{
	SetProperty(0x1, VT_BOOL, propVal);
}

short CTMPrint::GetVerBuild()
{
	short result;
	GetProperty(0x22, VT_I2, (void*)&result);
	return result;
}

void CTMPrint::SetVerBuild(short propVal)
{
	SetProperty(0x22, VT_I2, propVal);
}

BOOL CTMPrint::GetEnableErrors()
{
	BOOL result;
	GetProperty(0x2, VT_BOOL, (void*)&result);
	return result;
}

void CTMPrint::SetEnableErrors(BOOL propVal)
{
	SetProperty(0x2, VT_BOOL, propVal);
}

short CTMPrint::GetVerMajor()
{
	short result;
	GetProperty(0x23, VT_I2, (void*)&result);
	return result;
}

void CTMPrint::SetVerMajor(short propVal)
{
	SetProperty(0x23, VT_I2, propVal);
}

short CTMPrint::GetVerMinor()
{
	short result;
	GetProperty(0x24, VT_I2, (void*)&result);
	return result;
}

void CTMPrint::SetVerMinor(short propVal)
{
	SetProperty(0x24, VT_I2, propVal);
}

CString CTMPrint::GetVerTextLong()
{
	CString result;
	GetProperty(0x25, VT_BSTR, (void*)&result);
	return result;
}

void CTMPrint::SetVerTextLong(LPCTSTR propVal)
{
	SetProperty(0x25, VT_BSTR, propVal);
}

CString CTMPrint::GetIniFile()
{
	CString result;
	GetProperty(0x3, VT_BSTR, (void*)&result);
	return result;
}

void CTMPrint::SetIniFile(LPCTSTR propVal)
{
	SetProperty(0x3, VT_BSTR, propVal);
}

CString CTMPrint::GetIniSection()
{
	CString result;
	GetProperty(0x4, VT_BSTR, (void*)&result);
	return result;
}

void CTMPrint::SetIniSection(LPCTSTR propVal)
{
	SetProperty(0x4, VT_BSTR, propVal);
}

BOOL CTMPrint::GetEnablePowerPoint()
{
	BOOL result;
	GetProperty(0x5, VT_BOOL, (void*)&result);
	return result;
}

void CTMPrint::SetEnablePowerPoint(BOOL propVal)
{
	SetProperty(0x5, VT_BOOL, propVal);
}

BOOL CTMPrint::GetCollate()
{
	BOOL result;
	GetProperty(0x6, VT_BOOL, (void*)&result);
	return result;
}

void CTMPrint::SetCollate(BOOL propVal)
{
	SetProperty(0x6, VT_BOOL, propVal);
}

short CTMPrint::GetCopies()
{
	short result;
	GetProperty(0x7, VT_I2, (void*)&result);
	return result;
}

void CTMPrint::SetCopies(short propVal)
{
	SetProperty(0x7, VT_I2, propVal);
}

BOOL CTMPrint::GetIncludePathInFileName()
{
	BOOL result;
	GetProperty(0x8, VT_BOOL, (void*)&result);
	return result;
}

void CTMPrint::SetIncludePathInFileName(BOOL propVal)
{
	SetProperty(0x8, VT_BOOL, propVal);
}

BOOL CTMPrint::GetIncludePageTotal()
{
	BOOL result;
	GetProperty(0x9, VT_BOOL, (void*)&result);
	return result;
}

void CTMPrint::SetIncludePageTotal(BOOL propVal)
{
	SetProperty(0x9, VT_BOOL, propVal);
}

BOOL CTMPrint::GetPrintImage()
{
	BOOL result;
	GetProperty(0xa, VT_BOOL, (void*)&result);
	return result;
}

void CTMPrint::SetPrintImage(BOOL propVal)
{
	SetProperty(0xa, VT_BOOL, propVal);
}

BOOL CTMPrint::GetPrintBarcodeGraphic()
{
	BOOL result;
	GetProperty(0xb, VT_BOOL, (void*)&result);
	return result;
}

void CTMPrint::SetPrintBarcodeGraphic(BOOL propVal)
{
	SetProperty(0xb, VT_BOOL, propVal);
}

BOOL CTMPrint::GetPrintBarcodeText()
{
	BOOL result;
	GetProperty(0xc, VT_BOOL, (void*)&result);
	return result;
}

void CTMPrint::SetPrintBarcodeText(BOOL propVal)
{
	SetProperty(0xc, VT_BOOL, propVal);
}

BOOL CTMPrint::GetPrintName()
{
	BOOL result;
	GetProperty(0xd, VT_BOOL, (void*)&result);
	return result;
}

void CTMPrint::SetPrintName(BOOL propVal)
{
	SetProperty(0xd, VT_BOOL, propVal);
}

BOOL CTMPrint::GetPrintFileName()
{
	BOOL result;
	GetProperty(0xe, VT_BOOL, (void*)&result);
	return result;
}

void CTMPrint::SetPrintFileName(BOOL propVal)
{
	SetProperty(0xe, VT_BOOL, propVal);
}

BOOL CTMPrint::GetPrintDeponent()
{
	BOOL result;
	GetProperty(0xf, VT_BOOL, (void*)&result);
	return result;
}

void CTMPrint::SetPrintDeponent(BOOL propVal)
{
	SetProperty(0xf, VT_BOOL, propVal);
}

BOOL CTMPrint::GetPrintPageNumber()
{
	BOOL result;
	GetProperty(0x10, VT_BOOL, (void*)&result);
	return result;
}

void CTMPrint::SetPrintPageNumber(BOOL propVal)
{
	SetProperty(0x10, VT_BOOL, propVal);
}

BOOL CTMPrint::GetPrintCellBorder()
{
	BOOL result;
	GetProperty(0x11, VT_BOOL, (void*)&result);
	return result;
}

void CTMPrint::SetPrintCellBorder(BOOL propVal)
{
	SetProperty(0x11, VT_BOOL, propVal);
}

CString CTMPrint::GetPrinter()
{
	CString result;
	GetProperty(0x12, VT_BSTR, (void*)&result);
	return result;
}

void CTMPrint::SetPrinter(LPCTSTR propVal)
{
	SetProperty(0x12, VT_BSTR, propVal);
}

CString CTMPrint::GetTemplateName()
{
	CString result;
	GetProperty(0x13, VT_BSTR, (void*)&result);
	return result;
}

void CTMPrint::SetTemplateName(LPCTSTR propVal)
{
	SetProperty(0x13, VT_BSTR, propVal);
}

BOOL CTMPrint::GetForceNewPage()
{
	BOOL result;
	GetProperty(0x14, VT_BOOL, (void*)&result);
	return result;
}

void CTMPrint::SetForceNewPage(BOOL propVal)
{
	SetProperty(0x14, VT_BOOL, propVal);
}

BOOL CTMPrint::GetUseSlideIDs()
{
	BOOL result;
	GetProperty(0x15, VT_BOOL, (void*)&result);
	return result;
}

void CTMPrint::SetUseSlideIDs(BOOL propVal)
{
	SetProperty(0x15, VT_BOOL, propVal);
}

CString CTMPrint::GetBarcodeCharacter()
{
	CString result;
	GetProperty(0x16, VT_BSTR, (void*)&result);
	return result;
}

void CTMPrint::SetBarcodeCharacter(LPCTSTR propVal)
{
	SetProperty(0x16, VT_BSTR, propVal);
}

BOOL CTMPrint::GetShowOptions()
{
	BOOL result;
	GetProperty(0x17, VT_BOOL, (void*)&result);
	return result;
}

void CTMPrint::SetShowOptions(BOOL propVal)
{
	SetProperty(0x17, VT_BOOL, propVal);
}

CString CTMPrint::GetBarcodeFont()
{
	CString result;
	GetProperty(0x18, VT_BSTR, (void*)&result);
	return result;
}

void CTMPrint::SetBarcodeFont(LPCTSTR propVal)
{
	SetProperty(0x18, VT_BSTR, propVal);
}

BOOL CTMPrint::GetShowStatus()
{
	BOOL result;
	GetProperty(0x19, VT_BOOL, (void*)&result);
	return result;
}

void CTMPrint::SetShowStatus(BOOL propVal)
{
	SetProperty(0x19, VT_BOOL, propVal);
}

float CTMPrint::GetLeftMargin()
{
	float result;
	GetProperty(0x1a, VT_R4, (void*)&result);
	return result;
}

void CTMPrint::SetLeftMargin(float propVal)
{
	SetProperty(0x1a, VT_R4, propVal);
}

float CTMPrint::GetTopMargin()
{
	float result;
	GetProperty(0x1b, VT_R4, (void*)&result);
	return result;
}

void CTMPrint::SetTopMargin(float propVal)
{
	SetProperty(0x1b, VT_R4, propVal);
}

BOOL CTMPrint::GetPrintCalloutBorders()
{
	BOOL result;
	GetProperty(0x1c, VT_BOOL, (void*)&result);
	return result;
}

void CTMPrint::SetPrintCalloutBorders(BOOL propVal)
{
	SetProperty(0x1c, VT_BOOL, propVal);
}

unsigned long CTMPrint::GetPrintBorderColor()
{
	unsigned long result;
	GetProperty(0x1d, VT_I4, (void*)&result);
	return result;
}

void CTMPrint::SetPrintBorderColor(unsigned long propVal)
{
	SetProperty(0x1d, VT_I4, propVal);
}

float CTMPrint::GetPrintBorderThickness()
{
	float result;
	GetProperty(0x1e, VT_R4, (void*)&result);
	return result;
}

void CTMPrint::SetPrintBorderThickness(float propVal)
{
	SetProperty(0x1e, VT_R4, propVal);
}

BOOL CTMPrint::GetPrintCallouts()
{
	BOOL result;
	GetProperty(0x1f, VT_BOOL, (void*)&result);
	return result;
}

void CTMPrint::SetPrintCallouts(BOOL propVal)
{
	SetProperty(0x1f, VT_BOOL, propVal);
}

BOOL CTMPrint::GetAutoRotate()
{
	BOOL result;
	GetProperty(0x20, VT_BOOL, (void*)&result);
	return result;
}

void CTMPrint::SetAutoRotate(BOOL propVal)
{
	SetProperty(0x20, VT_BOOL, propVal);
}

BOOL CTMPrint::GetPrintForeignBarcode()
{
	BOOL result;
	GetProperty(0x21, VT_BOOL, (void*)&result);
	return result;
}

void CTMPrint::SetPrintForeignBarcode(BOOL propVal)
{
	SetProperty(0x21, VT_BOOL, propVal);
}

BOOL CTMPrint::GetEnableAxErrors()
{
	BOOL result;
	GetProperty(0x100, VT_BOOL, (void*)&result);
	return result;
}

void CTMPrint::SetEnableAxErrors(BOOL propVal)
{
	SetProperty(0x100, VT_BOOL, propVal);
}

short CTMPrint::GetVerQEF()
{
	short result;
	GetProperty(0x101, VT_I2, (void*)&result);
	return result;
}

void CTMPrint::SetVerQEF(short propVal)
{
	SetProperty(0x101, VT_I2, propVal);
}

CString CTMPrint::GetVerTextShort()
{
	CString result;
	GetProperty(0x102, VT_BSTR, (void*)&result);
	return result;
}

void CTMPrint::SetVerTextShort(LPCTSTR propVal)
{
	SetProperty(0x102, VT_BSTR, propVal);
}

CString CTMPrint::GetVerBuildDate()
{
	CString result;
	GetProperty(0x103, VT_BSTR, (void*)&result);
	return result;
}

void CTMPrint::SetVerBuildDate(LPCTSTR propVal)
{
	SetProperty(0x103, VT_BSTR, propVal);
}

CString CTMPrint::GetJobName()
{
	CString result;
	GetProperty(0x104, VT_BSTR, (void*)&result);
	return result;
}

void CTMPrint::SetJobName(LPCTSTR propVal)
{
	SetProperty(0x104, VT_BSTR, propVal);
}

BOOL CTMPrint::GetPrintSourceBarcode()
{
	BOOL result;
	GetProperty(0x105, VT_BOOL, (void*)&result);
	return result;
}

void CTMPrint::SetPrintSourceBarcode(BOOL propVal)
{
	SetProperty(0x105, VT_BOOL, propVal);
}

BOOL CTMPrint::GetInsertSlipSheet()
{
	BOOL result;
	GetProperty(0x106, VT_BOOL, (void*)&result);
	return result;
}

void CTMPrint::SetInsertSlipSheet(BOOL propVal)
{
	SetProperty(0x106, VT_BOOL, propVal);
}

short CTMPrint::GetCalloutFrameColor()
{
	short result;
	GetProperty(0x107, VT_I2, (void*)&result);
	return result;
}

void CTMPrint::SetCalloutFrameColor(short propVal)
{
	SetProperty(0x107, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CTMPrint operations

short CTMPrint::Initialize()
{
	short result;
	InvokeHelper(0x26, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CTMPrint::Add(LPCTSTR lpszString)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x27, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		lpszString);
	return result;
}

long CTMPrint::GetQueueCount()
{
	long result;
	InvokeHelper(0x28, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

short CTMPrint::Clear()
{
	short result;
	InvokeHelper(0x29, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CTMPrint::RefreshTemplates()
{
	short result;
	InvokeHelper(0x2a, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CTMPrint::Print()
{
	short result;
	InvokeHelper(0x2b, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CTMPrint::EnumerateTemplates()
{
	short result;
	InvokeHelper(0x2c, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CTMPrint::EnumeratePrinters()
{
	short result;
	InvokeHelper(0x2d, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

CString CTMPrint::GetDefaultPrinter()
{
	CString result;
	InvokeHelper(0x2e, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

short CTMPrint::SelectPrinter()
{
	short result;
	InvokeHelper(0x2f, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CTMPrint::SetPrintTemplates(long lTemplates)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x30, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		lTemplates);
	return result;
}

short CTMPrint::SetPrintTemplate(long lTemplate)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x31, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		lTemplate);
	return result;
}

BOOL CTMPrint::IsReady()
{
	BOOL result;
	InvokeHelper(0x32, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

CString CTMPrint::GetRegisteredPath()
{
	CString result;
	InvokeHelper(0x33, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString CTMPrint::GetClassIdString()
{
	CString result;
	InvokeHelper(0x34, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

long CTMPrint::GetPrintTemplates()
{
	long result;
	InvokeHelper(0x35, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CTMPrint::GetPrintTemplate()
{
	long result;
	InvokeHelper(0x36, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

short CTMPrint::GetRowsPerPage()
{
	short result;
	InvokeHelper(0x37, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CTMPrint::GetColumnsPerPage()
{
	short result;
	InvokeHelper(0x38, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CTMPrint::Abort()
{
	short result;
	InvokeHelper(0x39, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

long CTMPrint::GetFieldEnabledMask(LPCTSTR lpszTemplate)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x3a, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lpszTemplate);
	return result;
}

long CTMPrint::GetFieldDefaultMask(LPCTSTR lpszTemplate)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x3b, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		lpszTemplate);
	return result;
}

BOOL CTMPrint::SetPrinterProperties(long hWnd)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		hWnd);
	return result;
}

short CTMPrint::ShowPrinterCaps()
{
	short result;
	InvokeHelper(0x3d, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

void CTMPrint::EnableDIBPrinting(short bEnable)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x3e, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bEnable);
}

short CTMPrint::EnumerateTextFields(LPCTSTR lpszTemplate)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x3f, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		lpszTemplate);
	return result;
}

short CTMPrint::SetTextFieldEnabled(long lId, LPCTSTR lpszName, short bEnabled)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_I2;
	InvokeHelper(0x40, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		lId, lpszName, bEnabled);
	return result;
}

void CTMPrint::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
