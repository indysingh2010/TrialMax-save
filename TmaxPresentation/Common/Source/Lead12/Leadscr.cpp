// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "leadscr.h"

/////////////////////////////////////////////////////////////////////////////
// CLeadScr

IMPLEMENT_DYNCREATE(CLeadScr, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CLeadScr properties

/////////////////////////////////////////////////////////////////////////////
// CLeadScr operations

BOOL CLeadScr::GetEnableMethodErrors()
{
	BOOL result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CLeadScr::SetEnableMethodErrors(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

short CLeadScr::GetScaleMode()
{
	short result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
	return result;
}

void CLeadScr::SetScaleMode(short nNewValue)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

short CLeadScr::GetCaptureCursorIndex()
{
	short result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
	return result;
}

void CLeadScr::SetCaptureCursorIndex(short nNewValue)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

short CLeadScr::GetCaptureStatusCursorIndex()
{
	short result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
	return result;
}

void CLeadScr::SetCaptureStatusCursorIndex(short nNewValue)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

short CLeadScr::GetCaptureAreaDrawCursorIndex()
{
	short result;
	InvokeHelper(0x1d, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
	return result;
}

void CLeadScr::SetCaptureAreaDrawCursorIndex(short nNewValue)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x1d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

short CLeadScr::GetCaptureObjectSelectCursorIndex()
{
	short result;
	InvokeHelper(0x32, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
	return result;
}

void CLeadScr::SetCaptureObjectSelectCursorIndex(short nNewValue)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x32, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

LPDISPATCH CLeadScr::GetCaptureCursor()
{
	LPDISPATCH result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void CLeadScr::SetCaptureCursor(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH CLeadScr::GetCaptureStatusCursor()
{
	LPDISPATCH result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void CLeadScr::SetCaptureStatusCursor(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH CLeadScr::GetCaptureAreaDrawCursor()
{
	LPDISPATCH result;
	InvokeHelper(0x1e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void CLeadScr::SetCaptureAreaDrawCursor(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x1e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

LPDISPATCH CLeadScr::GetCaptureObjectSelectCursor()
{
	LPDISPATCH result;
	InvokeHelper(0x33, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&result, NULL);
	return result;
}

void CLeadScr::SetCaptureObjectSelectCursor(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x33, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

short CLeadScr::GetCaptureHotKey()
{
	short result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
	return result;
}

void CLeadScr::SetCaptureHotKey(short nNewValue)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

short CLeadScr::GetCaptureHotKeyModifiers()
{
	short result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
	return result;
}

void CLeadScr::SetCaptureHotKeyModifiers(short nNewValue)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

short CLeadScr::GetCaptureCancelKey()
{
	short result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
	return result;
}

void CLeadScr::SetCaptureCancelKey(short nNewValue)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CLeadScr::GetCaptureDelay()
{
	long result;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CLeadScr::SetCaptureDelay(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

short CLeadScr::GetCaptureCount()
{
	short result;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
	return result;
}

void CLeadScr::SetCaptureCount(short nNewValue)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CLeadScr::GetCaptureInterval()
{
	long result;
	InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CLeadScr::SetCaptureInterval(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CLeadScr::GetCaptureInfohWnd()
{
	long result;
	InvokeHelper(0xd, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

float CLeadScr::GetCaptureInfoTop()
{
	float result;
	InvokeHelper(0xe, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
	return result;
}

float CLeadScr::GetCaptureInfoLeft()
{
	float result;
	InvokeHelper(0xf, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
	return result;
}

float CLeadScr::GetCaptureInfoWidth()
{
	float result;
	InvokeHelper(0x10, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
	return result;
}

float CLeadScr::GetCaptureInfoHeight()
{
	float result;
	InvokeHelper(0x11, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
	return result;
}

long CLeadScr::GetCaptureInfoResType()
{
	long result;
	InvokeHelper(0x12, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

long CLeadScr::GetCaptureInfoResIndex()
{
	long result;
	InvokeHelper(0x13, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CString CLeadScr::GetCaptureInfoResourceId()
{
	CString result;
	InvokeHelper(0x14, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString CLeadScr::GetCaptureInfoExeName()
{
	CString result;
	InvokeHelper(0x15, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

short CLeadScr::GetCaptureAreaFillPattern()
{
	short result;
	InvokeHelper(0x16, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
	return result;
}

void CLeadScr::SetCaptureAreaFillPattern(short nNewValue)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x16, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

short CLeadScr::GetCaptureAreaDrawLineStyle()
{
	short result;
	InvokeHelper(0x19, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
	return result;
}

void CLeadScr::SetCaptureAreaDrawLineStyle(short nNewValue)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x19, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

float CLeadScr::GetCaptureAreaDrawEllipseWidth()
{
	float result;
	InvokeHelper(0x1b, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
	return result;
}

void CLeadScr::SetCaptureAreaDrawEllipseWidth(float newValue)
{
	static BYTE parms[] =
		VTS_R4;
	InvokeHelper(0x1b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

float CLeadScr::GetCaptureAreaDrawEllipseHeight()
{
	float result;
	InvokeHelper(0x1c, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
	return result;
}

void CLeadScr::SetCaptureAreaDrawEllipseHeight(float newValue)
{
	static BYTE parms[] =
		VTS_R4;
	InvokeHelper(0x1c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

float CLeadScr::GetCaptureAreaInfoLeft()
{
	float result;
	InvokeHelper(0x21, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
	return result;
}

void CLeadScr::SetCaptureAreaInfoLeft(float newValue)
{
	static BYTE parms[] =
		VTS_R4;
	InvokeHelper(0x21, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

float CLeadScr::GetCaptureAreaInfoTop()
{
	float result;
	InvokeHelper(0x22, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
	return result;
}

void CLeadScr::SetCaptureAreaInfoTop(float newValue)
{
	static BYTE parms[] =
		VTS_R4;
	InvokeHelper(0x22, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

float CLeadScr::GetCaptureAreaInfoWidth()
{
	float result;
	InvokeHelper(0x23, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
	return result;
}

void CLeadScr::SetCaptureAreaInfoWidth(float newValue)
{
	static BYTE parms[] =
		VTS_R4;
	InvokeHelper(0x23, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

BOOL CLeadScr::GetCaptureAreaShowDrawCursor()
{
	BOOL result;
	InvokeHelper(0x25, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CLeadScr::SetCaptureAreaShowDrawCursor(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x25, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL CLeadScr::GetCaptureAreaIncludeCursor()
{
	BOOL result;
	InvokeHelper(0x26, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CLeadScr::SetCaptureAreaIncludeCursor(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x26, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

float CLeadScr::GetCaptureAreaInfoHeight()
{
	float result;
	InvokeHelper(0x24, DISPATCH_PROPERTYGET, VT_R4, (void*)&result, NULL);
	return result;
}

void CLeadScr::SetCaptureAreaInfoHeight(float newValue)
{
	static BYTE parms[] =
		VTS_R4;
	InvokeHelper(0x24, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

BOOL CLeadScr::GetCaptureAreaEnableKeyboard()
{
	BOOL result;
	InvokeHelper(0x27, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CLeadScr::SetCaptureAreaEnableKeyboard(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x27, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL CLeadScr::GetCaptureAreaShowOpaqueText()
{
	BOOL result;
	InvokeHelper(0x28, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CLeadScr::SetCaptureAreaShowOpaqueText(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x28, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL CLeadScr::GetCaptureAreaShowCursorPosition()
{
	BOOL result;
	InvokeHelper(0x29, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CLeadScr::SetCaptureAreaShowCursorPosition(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x29, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL CLeadScr::GetCaptureAreaShowAreaSize()
{
	BOOL result;
	InvokeHelper(0x2a, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CLeadScr::SetCaptureAreaShowAreaSize(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x2a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL CLeadScr::GetCaptureAreaShowInfoWindow()
{
	BOOL result;
	InvokeHelper(0x2b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CLeadScr::SetCaptureAreaShowInfoWindow(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x2b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL CLeadScr::GetCaptureAreaSensitiveInfoWindow()
{
	BOOL result;
	InvokeHelper(0x2c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CLeadScr::SetCaptureAreaSensitiveInfoWindow(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x2c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL CLeadScr::GetCaptureAreaBitmapWithRegion()
{
	BOOL result;
	InvokeHelper(0x2d, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CLeadScr::SetCaptureAreaBitmapWithRegion(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x2d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

short CLeadScr::GetCaptureAreaZoomFactor()
{
	short result;
	InvokeHelper(0x2e, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
	return result;
}

void CLeadScr::SetCaptureAreaZoomFactor(short nNewValue)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x2e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

BOOL CLeadScr::GetCaptureObjectInvert()
{
	BOOL result;
	InvokeHelper(0x2f, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CLeadScr::SetCaptureObjectInvert(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x2f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL CLeadScr::GetCaptureObjectEnableKeyboard()
{
	BOOL result;
	InvokeHelper(0x30, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CLeadScr::SetCaptureObjectEnableKeyboard(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x30, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

short CLeadScr::GetCaptureObjectBorderWidth()
{
	short result;
	InvokeHelper(0x31, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
	return result;
}

void CLeadScr::SetCaptureObjectBorderWidth(short nNewValue)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x31, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CLeadScr::GetBitmap()
{
	long result;
	InvokeHelper(0x34, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CLeadScr::SetBitmap(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x34, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

unsigned long CLeadScr::GetCaptureAreaFillForeColor()
{
	unsigned long result;
	InvokeHelper(0x17, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CLeadScr::SetCaptureAreaFillForeColor(unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x17, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

unsigned long CLeadScr::GetCaptureAreaFillBackColor()
{
	unsigned long result;
	InvokeHelper(0x18, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CLeadScr::SetCaptureAreaFillBackColor(unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x18, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

unsigned long CLeadScr::GetCaptureAreaDrawLineColor()
{
	unsigned long result;
	InvokeHelper(0x1a, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CLeadScr::SetCaptureAreaDrawLineColor(unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

unsigned long CLeadScr::GetCaptureAreaTextForeColor()
{
	unsigned long result;
	InvokeHelper(0x1f, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CLeadScr::SetCaptureAreaTextForeColor(unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x1f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

unsigned long CLeadScr::GetCaptureAreaTextBackColor()
{
	unsigned long result;
	InvokeHelper(0x20, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CLeadScr::SetCaptureAreaTextBackColor(unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x20, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

unsigned long CLeadScr::GetTransparentColor()
{
	unsigned long result;
	InvokeHelper(0x35, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CLeadScr::SetTransparentColor(unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x35, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

short CLeadScr::GetCaptureAreaType()
{
	short result;
	InvokeHelper(0x36, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
	return result;
}

BOOL CLeadScr::GetCaptureAreaUseCrossLinesCursor()
{
	BOOL result;
	InvokeHelper(0x75, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CLeadScr::SetCaptureAreaUseCrossLinesCursor(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x75, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

short CLeadScr::CaptureActiveWindow()
{
	short result;
	InvokeHelper(0x64, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLeadScr::CaptureActiveClient()
{
	short result;
	InvokeHelper(0x65, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLeadScr::CaptureFullScreen()
{
	short result;
	InvokeHelper(0x66, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLeadScr::CaptureMenuUnderCursor()
{
	short result;
	InvokeHelper(0x67, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLeadScr::CaptureSelectedObject()
{
	short result;
	InvokeHelper(0x68, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLeadScr::CaptureArea(short AreaType)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x69, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		AreaType);
	return result;
}

short CLeadScr::CaptureMouseCursor()
{
	short result;
	InvokeHelper(0x6a, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLeadScr::CaptureOptionDlg(long hwndParent)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6b, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hwndParent);
	return result;
}

short CLeadScr::CaptureAreaOptionDlg(long hwndParent)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6c, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hwndParent);
	return result;
}

short CLeadScr::CaptureObjectOptionDlg(long hwndParent)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6d, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hwndParent);
	return result;
}

short CLeadScr::CaptureEXEDlg(long hwndParent, LPCTSTR FileName, short ResourceType, short DialogType)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_I2 VTS_I2;
	InvokeHelper(0x6e, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hwndParent, FileName, ResourceType, DialogType);
	return result;
}

short CLeadScr::CaptureGetResourceCount(LPCTSTR FileName, short nResourceType, short* pCount)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_PI2;
	InvokeHelper(0x6f, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		FileName, nResourceType, pCount);
	return result;
}

short CLeadScr::CaptureEXE(LPCTSTR FileName, long ResourceType, LPCTSTR ResourceID, long bIsNumberResourceID, long bCaptureByIndex)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4 VTS_BSTR VTS_I4 VTS_I4;
	InvokeHelper(0x70, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		FileName, ResourceType, ResourceID, bIsNumberResourceID, bCaptureByIndex);
	return result;
}

short CLeadScr::CaptureWallPaper()
{
	short result;
	InvokeHelper(0x71, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLeadScr::CaptureWindowUnderCursor()
{
	short result;
	InvokeHelper(0x72, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLeadScr::ResetAreaOptions()
{
	short result;
	InvokeHelper(0x73, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLeadScr::ResetObjectOptions()
{
	short result;
	InvokeHelper(0x74, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CLeadScr::StopCapture()
{
	short result;
	InvokeHelper(0x76, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

BOOL CLeadScr::IsCaptureActive()
{
	BOOL result;
	InvokeHelper(0x77, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}
