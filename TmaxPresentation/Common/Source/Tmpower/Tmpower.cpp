// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "tmpower.h"

/////////////////////////////////////////////////////////////////////////////
// CTMPower

IMPLEMENT_DYNCREATE(CTMPower, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CTMPower properties

BOOL CTMPower::GetAutoInit()
{
	BOOL result;
	GetProperty(0x1, VT_BOOL, (void*)&result);
	return result;
}

void CTMPower::SetAutoInit(BOOL propVal)
{
	SetProperty(0x1, VT_BOOL, propVal);
}

OLE_COLOR CTMPower::GetBackColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_BACKCOLOR, VT_I4, (void*)&result);
	return result;
}

void CTMPower::SetBackColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_BACKCOLOR, VT_I4, propVal);
}

short CTMPower::GetVerBuild()
{
	short result;
	GetProperty(0x2, VT_I2, (void*)&result);
	return result;
}

void CTMPower::SetVerBuild(short propVal)
{
	SetProperty(0x2, VT_I2, propVal);
}

BOOL CTMPower::GetEnableErrors()
{
	BOOL result;
	GetProperty(0x3, VT_BOOL, (void*)&result);
	return result;
}

void CTMPower::SetEnableErrors(BOOL propVal)
{
	SetProperty(0x3, VT_BOOL, propVal);
}

short CTMPower::GetVerMajor()
{
	short result;
	GetProperty(0x4, VT_I2, (void*)&result);
	return result;
}

void CTMPower::SetVerMajor(short propVal)
{
	SetProperty(0x4, VT_I2, propVal);
}

short CTMPower::GetVerMinor()
{
	short result;
	GetProperty(0x5, VT_I2, (void*)&result);
	return result;
}

void CTMPower::SetVerMinor(short propVal)
{
	SetProperty(0x5, VT_I2, propVal);
}

CString CTMPower::GetVerTextLong()
{
	CString result;
	GetProperty(0x6, VT_BSTR, (void*)&result);
	return result;
}

void CTMPower::SetVerTextLong(LPCTSTR propVal)
{
	SetProperty(0x6, VT_BSTR, propVal);
}

BOOL CTMPower::GetSplitScreen()
{
	BOOL result;
	GetProperty(0x7, VT_BOOL, (void*)&result);
	return result;
}

void CTMPower::SetSplitScreen(BOOL propVal)
{
	SetProperty(0x7, VT_BOOL, propVal);
}

short CTMPower::GetSplitFrameThickness()
{
	short result;
	GetProperty(0x8, VT_I2, (void*)&result);
	return result;
}

void CTMPower::SetSplitFrameThickness(short propVal)
{
	SetProperty(0x8, VT_I2, propVal);
}

unsigned long CTMPower::GetSplitFrameColor()
{
	unsigned long result;
	GetProperty(0x9, VT_I4, (void*)&result);
	return result;
}

void CTMPower::SetSplitFrameColor(unsigned long propVal)
{
	SetProperty(0x9, VT_I4, propVal);
}

CString CTMPower::GetRightFile()
{
	CString result;
	GetProperty(0xa, VT_BSTR, (void*)&result);
	return result;
}

void CTMPower::SetRightFile(LPCTSTR propVal)
{
	SetProperty(0xa, VT_BSTR, propVal);
}

CString CTMPower::GetLeftFile()
{
	CString result;
	GetProperty(0xb, VT_BSTR, (void*)&result);
	return result;
}

void CTMPower::SetLeftFile(LPCTSTR propVal)
{
	SetProperty(0xb, VT_BSTR, propVal);
}

BOOL CTMPower::GetSyncViews()
{
	BOOL result;
	GetProperty(0xc, VT_BOOL, (void*)&result);
	return result;
}

void CTMPower::SetSyncViews(BOOL propVal)
{
	SetProperty(0xc, VT_BOOL, propVal);
}

short CTMPower::GetActiveView()
{
	short result;
	GetProperty(0xd, VT_I2, (void*)&result);
	return result;
}

void CTMPower::SetActiveView(short propVal)
{
	SetProperty(0xd, VT_I2, propVal);
}

long CTMPower::GetStartSlide()
{
	long result;
	GetProperty(0xe, VT_I4, (void*)&result);
	return result;
}

void CTMPower::SetStartSlide(long propVal)
{
	SetProperty(0xe, VT_I4, propVal);
}

short CTMPower::GetBorderStyle()
{
	short result;
	GetProperty(DISPID_BORDERSTYLE, VT_I2, (void*)&result);
	return result;
}

void CTMPower::SetBorderStyle(short propVal)
{
	SetProperty(DISPID_BORDERSTYLE, VT_I2, propVal);
}

BOOL CTMPower::GetEnableAccelerators()
{
	BOOL result;
	GetProperty(0xf, VT_BOOL, (void*)&result);
	return result;
}

void CTMPower::SetEnableAccelerators(BOOL propVal)
{
	SetProperty(0xf, VT_BOOL, propVal);
}

BOOL CTMPower::GetUseSlideId()
{
	BOOL result;
	GetProperty(0x10, VT_BOOL, (void*)&result);
	return result;
}

void CTMPower::SetUseSlideId(BOOL propVal)
{
	SetProperty(0x10, VT_BOOL, propVal);
}

short CTMPower::GetSaveFormat()
{
	short result;
	GetProperty(0x11, VT_I2, (void*)&result);
	return result;
}

void CTMPower::SetSaveFormat(short propVal)
{
	SetProperty(0x11, VT_I2, propVal);
}

BOOL CTMPower::GetHideTaskBar()
{
	BOOL result;
	GetProperty(0x101, VT_BOOL, (void*)&result);
	return result;
}

void CTMPower::SetHideTaskBar(BOOL propVal)
{
	SetProperty(0x101, VT_BOOL, propVal);
}

BOOL CTMPower::GetEnableAxErrors()
{
	BOOL result;
	GetProperty(0x102, VT_BOOL, (void*)&result);
	return result;
}

void CTMPower::SetEnableAxErrors(BOOL propVal)
{
	SetProperty(0x102, VT_BOOL, propVal);
}

short CTMPower::GetVerQEF()
{
	short result;
	GetProperty(0x103, VT_I2, (void*)&result);
	return result;
}

void CTMPower::SetVerQEF(short propVal)
{
	SetProperty(0x103, VT_I2, propVal);
}

CString CTMPower::GetVerTextShort()
{
	CString result;
	GetProperty(0x104, VT_BSTR, (void*)&result);
	return result;
}

void CTMPower::SetVerTextShort(LPCTSTR propVal)
{
	SetProperty(0x104, VT_BSTR, propVal);
}

CString CTMPower::GetVerBuildDate()
{
	CString result;
	GetProperty(0x105, VT_BSTR, (void*)&result);
	return result;
}

void CTMPower::SetVerBuildDate(LPCTSTR propVal)
{
	SetProperty(0x105, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CTMPower operations

short CTMPower::Initialize()
{
	//AfxMessageBox("ppt");
	short result;
	InvokeHelper(0x12, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

BOOL CTMPower::IsInitialized()
{
	BOOL result;
	InvokeHelper(0x13, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

CString CTMPower::GetPPVersion()
{
	CString result;
	InvokeHelper(0x14, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString CTMPower::GetPPBuild()
{
	CString result;
	InvokeHelper(0x15, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

short CTMPower::Next(short sView)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x16, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		sView);
	return result;
}

short CTMPower::Previous(short sView)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x17, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		sView);
	return result;
}

short CTMPower::First(short sView)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x18, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		sView);
	return result;
}

short CTMPower::Last(short sView)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x19, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		sView);
	return result;
}

long CTMPower::GetCurrentSlide(short sView)
{
	long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x1a, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		sView);
	return result;
}

long CTMPower::GetSlideCount(short sView)
{
	long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x1b, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		sView);
	return result;
}

short CTMPower::Close()
{
	short result;
	InvokeHelper(0x1c, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CTMPower::Unload(short sView)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x1d, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		sView);
	return result;
}

CString CTMPower::GetFilename(short sView)
{
	CString result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x1e, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		sView);
	return result;
}

long CTMPower::GetBitmap(long pWidth, long pHeight, short sView)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I2;
	InvokeHelper(0x1f, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		pWidth, pHeight, sView);
	return result;
}

short CTMPower::ShowSnapshot(short sView)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x20, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		sView);
	return result;
}

short CTMPower::SaveSlide(LPCTSTR lpFilename, short sView)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2;
	InvokeHelper(0x21, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		lpFilename, sView);
	return result;
}

short CTMPower::CopySlide(short sView)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x22, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		sView);
	return result;
}

void CTMPower::SetData(short sView, long lData)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x23, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 sView, lData);
}

long CTMPower::GetData(short sView)
{
	long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x24, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		sView);
	return result;
}

short CTMPower::SetFocusWnd(long hWnd)
{
	short result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x25, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hWnd);
	return result;
}

short CTMPower::Show(short sShow)
{
	//AfxMessageBox("showppt");
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x26, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		sShow);
	return result;
}

short CTMPower::GetCurrentState(short sView)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x27, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		sView);
	return result;
}

short CTMPower::SetSlide(short sView, long lSlide, short bUseId)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I4 VTS_I2;
	InvokeHelper(0x28, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		sView, lSlide, bUseId);
	return result;
}

short CTMPower::LoadFile(LPCTSTR lpszFilename, long lSlide, short bUseId, short sView)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4 VTS_I2 VTS_I2;
	InvokeHelper(0x29, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		lpszFilename, lSlide, bUseId, sView);
	return result;
}

long CTMPower::GetSlideNumber(short sView, long lSlideId)
{
	long result;
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x2a, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		sView, lSlideId);
	return result;
}

CString CTMPower::GetClassIdString()
{
	CString result;
	InvokeHelper(0x2b, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString CTMPower::GetRegisteredPath()
{
	CString result;
	InvokeHelper(0x2c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

short CTMPower::GetAnimationCount(short sView)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x2d, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		sView);
	return result;
}

short CTMPower::GetAnimationIndex(short sView)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x2e, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		sView);
	return result;
}

void CTMPower::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
