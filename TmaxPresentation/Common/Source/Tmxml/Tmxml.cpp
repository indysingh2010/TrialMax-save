// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "tmxml.h"

/////////////////////////////////////////////////////////////////////////////
// CTMXml

IMPLEMENT_DYNCREATE(CTMXml, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CTMXml properties

short CTMXml::GetVerBuild()
{
	short result;
	GetProperty(0x1, VT_I2, (void*)&result);
	return result;
}

void CTMXml::SetVerBuild(short propVal)
{
	SetProperty(0x1, VT_I2, propVal);
}

OLE_COLOR CTMXml::GetBackColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_BACKCOLOR, VT_I4, (void*)&result);
	return result;
}

void CTMXml::SetBackColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_BACKCOLOR, VT_I4, propVal);
}

OLE_COLOR CTMXml::GetForeColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_FORECOLOR, VT_I4, (void*)&result);
	return result;
}

void CTMXml::SetForeColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_FORECOLOR, VT_I4, propVal);
}

BOOL CTMXml::GetEnableErrors()
{
	BOOL result;
	GetProperty(0x2, VT_BOOL, (void*)&result);
	return result;
}

void CTMXml::SetEnableErrors(BOOL propVal)
{
	SetProperty(0x2, VT_BOOL, propVal);
}

short CTMXml::GetVerMajor()
{
	short result;
	GetProperty(0x3, VT_I2, (void*)&result);
	return result;
}

void CTMXml::SetVerMajor(short propVal)
{
	SetProperty(0x3, VT_I2, propVal);
}

short CTMXml::GetVerMinor()
{
	short result;
	GetProperty(0x4, VT_I2, (void*)&result);
	return result;
}

void CTMXml::SetVerMinor(short propVal)
{
	SetProperty(0x4, VT_I2, propVal);
}

CString CTMXml::GetVerTextLong()
{
	CString result;
	GetProperty(0x5, VT_BSTR, (void*)&result);
	return result;
}

void CTMXml::SetVerTextLong(LPCTSTR propVal)
{
	SetProperty(0x5, VT_BSTR, propVal);
}

BOOL CTMXml::GetAutoInit()
{
	BOOL result;
	GetProperty(0x6, VT_BOOL, (void*)&result);
	return result;
}

void CTMXml::SetAutoInit(BOOL propVal)
{
	SetProperty(0x6, VT_BOOL, propVal);
}

CString CTMXml::GetFilename()
{
	CString result;
	GetProperty(0x7, VT_BSTR, (void*)&result);
	return result;
}

void CTMXml::SetFilename(LPCTSTR propVal)
{
	SetProperty(0x7, VT_BSTR, propVal);
}

BOOL CTMXml::GetDockPrintProgress()
{
	BOOL result;
	GetProperty(0x8, VT_BOOL, (void*)&result);
	return result;
}

void CTMXml::SetDockPrintProgress(BOOL propVal)
{
	SetProperty(0x8, VT_BOOL, propVal);
}

short CTMXml::GetVerQEF()
{
	short result;
	GetProperty(0x100, VT_I2, (void*)&result);
	return result;
}

void CTMXml::SetVerQEF(short propVal)
{
	SetProperty(0x100, VT_I2, propVal);
}

CString CTMXml::GetVerTextShort()
{
	CString result;
	GetProperty(0x101, VT_BSTR, (void*)&result);
	return result;
}

void CTMXml::SetVerTextShort(LPCTSTR propVal)
{
	SetProperty(0x101, VT_BSTR, propVal);
}

CString CTMXml::GetVerBuildDate()
{
	CString result;
	GetProperty(0x102, VT_BSTR, (void*)&result);
	return result;
}

void CTMXml::SetVerBuildDate(LPCTSTR propVal)
{
	SetProperty(0x102, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CTMXml operations

short CTMXml::Initialize()
{
	short result;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CTMXml::LoadFile(LPCTSTR lpFilename)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		lpFilename);
	return result;
}

CString CTMXml::GetClassIdString()
{
	CString result;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

CString CTMXml::GetRegisteredPath()
{
	CString result;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

short CTMXml::loadDocument(LPCTSTR lpszUrl)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xd, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		lpszUrl);
	return result;
}

short CTMXml::jumpToPage(LPCTSTR lpszPageId)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xe, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		lpszPageId);
	return result;
}

void CTMXml::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
